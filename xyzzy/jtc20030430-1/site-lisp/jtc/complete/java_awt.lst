パッケージ java.awt のソースファイルを読み込んでいます...
パッケージ java.awt.image のソースファイルを読み込んでいます...
パッケージ java.awt.peer のソースファイルを読み込んでいます...
Javadoc 情報を構築しています...
Transparency
class Transparency;

java/awt/Transparency.html
java.awt.Transparency
f
int
OPAQUE
java/awt/Transparency.html#OPAQUE
int OPAQUE;
f
int
BITMASK
java/awt/Transparency.html#BITMASK
int BITMASK;
f
int
TRANSLUCENT
java/awt/Transparency.html#TRANSLUCENT
int TRANSLUCENT;
m
int
getTransparency
java/awt/Transparency.html#getTransparency()
int getTransparency();
Shape
class Shape;

java/awt/Shape.html
java.awt.Shape
m
Rectangle
getBounds
java/awt/Shape.html#getBounds()
Rectangle getBounds();
m
Rectangle2D
getBounds2D
java/awt/Shape.html#getBounds2D()
Rectangle2D getBounds2D();
m
boolean
contains
java/awt/Shape.html#contains(double, double)
boolean contains(double x, double y);
boolean contains(Point2D p);
m
boolean
intersects
java/awt/Shape.html#intersects(double, double, double, double)
boolean intersects(double x, double y, double w, double h);
boolean intersects(Rectangle2D r);
m
boolean
contains
java/awt/Shape.html#contains(double, double, double, double)
boolean contains(double x, double y, double w, double h);
boolean contains(Rectangle2D r);
m
PathIterator
getPathIterator
java/awt/Shape.html#getPathIterator(java.awt.geom.AffineTransform)
PathIterator getPathIterator(AffineTransform at);
PathIterator getPathIterator(AffineTransform at, double flatness);
ComponentOrientation
class ComponentOrientation extends Object;
Object
java/awt/ComponentOrientation.html
java.awt.ComponentOrientation
f
ComponentOrientation
LEFT_TO_RIGHT
java/awt/ComponentOrientation.html#LEFT_TO_RIGHT
ComponentOrientation LEFT_TO_RIGHT;
f
ComponentOrientation
RIGHT_TO_LEFT
java/awt/ComponentOrientation.html#RIGHT_TO_LEFT
ComponentOrientation RIGHT_TO_LEFT;
f
ComponentOrientation
UNKNOWN
java/awt/ComponentOrientation.html#UNKNOWN
ComponentOrientation UNKNOWN;
m
boolean
isHorizontal
java/awt/ComponentOrientation.html#isHorizontal()
boolean isHorizontal();
m
boolean
isLeftToRight
java/awt/ComponentOrientation.html#isLeftToRight()
boolean isLeftToRight();
m
ComponentOrientation
getOrientation
java/awt/ComponentOrientation.html#getOrientation(java.util.Locale)
ComponentOrientation getOrientation(Locale locale);
ComponentOrientation getOrientation(ResourceBundle bdl);
BorderLayout
class BorderLayout extends Object;
Object
java/awt/BorderLayout.html
java.awt.BorderLayout
c

BorderLayout
java/awt/BorderLayout.html
BorderLayout();
BorderLayout(int hgap, int vgap);
f
String
NORTH
java/awt/BorderLayout.html#NORTH
String NORTH;
f
String
SOUTH
java/awt/BorderLayout.html#SOUTH
String SOUTH;
f
String
EAST
java/awt/BorderLayout.html#EAST
String EAST;
f
String
WEST
java/awt/BorderLayout.html#WEST
String WEST;
f
String
CENTER
java/awt/BorderLayout.html#CENTER
String CENTER;
f
String
BEFORE_FIRST_LINE
java/awt/BorderLayout.html#BEFORE_FIRST_LINE
String BEFORE_FIRST_LINE;
f
String
AFTER_LAST_LINE
java/awt/BorderLayout.html#AFTER_LAST_LINE
String AFTER_LAST_LINE;
f
String
BEFORE_LINE_BEGINS
java/awt/BorderLayout.html#BEFORE_LINE_BEGINS
String BEFORE_LINE_BEGINS;
f
String
AFTER_LINE_ENDS
java/awt/BorderLayout.html#AFTER_LINE_ENDS
String AFTER_LINE_ENDS;
m
int
getHgap
java/awt/BorderLayout.html#getHgap()
int getHgap();
m
void
setHgap
java/awt/BorderLayout.html#setHgap(int)
void setHgap(int hgap);
m
int
getVgap
java/awt/BorderLayout.html#getVgap()
int getVgap();
m
void
setVgap
java/awt/BorderLayout.html#setVgap(int)
void setVgap(int vgap);
m
void
addLayoutComponent
java/awt/BorderLayout.html#addLayoutComponent(java.awt.Component, java.lang.Object)
void addLayoutComponent(Component comp, Object constraints);
void addLayoutComponent(String name, Component comp);
m
void
removeLayoutComponent
java/awt/BorderLayout.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
minimumLayoutSize
java/awt/BorderLayout.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container target);
m
Dimension
preferredLayoutSize
java/awt/BorderLayout.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container target);
m
Dimension
maximumLayoutSize
java/awt/BorderLayout.html#maximumLayoutSize(java.awt.Container)
Dimension maximumLayoutSize(Container target);
m
float
getLayoutAlignmentX
java/awt/BorderLayout.html#getLayoutAlignmentX(java.awt.Container)
float getLayoutAlignmentX(Container parent);
m
float
getLayoutAlignmentY
java/awt/BorderLayout.html#getLayoutAlignmentY(java.awt.Container)
float getLayoutAlignmentY(Container parent);
m
void
invalidateLayout
java/awt/BorderLayout.html#invalidateLayout(java.awt.Container)
void invalidateLayout(Container target);
m
void
layoutContainer
java/awt/BorderLayout.html#layoutContainer(java.awt.Container)
void layoutContainer(Container target);
m
String
toString
java/awt/BorderLayout.html#toString()
String toString();
MenuComponent
class MenuComponent extends Object;
Object
java/awt/MenuComponent.html
java.awt.MenuComponent
c

MenuComponent
java/awt/MenuComponent.html
MenuComponent();
l
MenuComponent.AccessibleAWTMenuComponent
AccessibleAWTMenuComponent
java/awt/MenuComponent.AccessibleAWTMenuComponent.html
inner class MenuComponent.AccessibleAWTMenuComponent;
m
String
getName
java/awt/MenuComponent.html#getName()
String getName();
m
void
setName
java/awt/MenuComponent.html#setName(java.lang.String)
void setName(String name);
m
MenuContainer
getParent
java/awt/MenuComponent.html#getParent()
MenuContainer getParent();
m
MenuComponentPeer
getPeer
java/awt/MenuComponent.html#getPeer()
MenuComponentPeer getPeer();
m
Font
getFont
java/awt/MenuComponent.html#getFont()
Font getFont();
m
void
setFont
java/awt/MenuComponent.html#setFont(java.awt.Font)
void setFont(Font f);
m
void
removeNotify
java/awt/MenuComponent.html#removeNotify()
void removeNotify();
m
boolean
postEvent
java/awt/MenuComponent.html#postEvent(java.awt.Event)
boolean postEvent(Event evt);
m
void
dispatchEvent
java/awt/MenuComponent.html#dispatchEvent(java.awt.AWTEvent)
void dispatchEvent(AWTEvent e);
m
void
processEvent
java/awt/MenuComponent.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
String
paramString
java/awt/MenuComponent.html#paramString()
String paramString();
m
String
toString
java/awt/MenuComponent.html#toString()
String toString();
m
Object
getTreeLock
java/awt/MenuComponent.html#getTreeLock()
Object getTreeLock();
m
AccessibleContext
getAccessibleContext
java/awt/MenuComponent.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
MenuBar
class MenuBar extends MenuComponent;
MenuComponent
java/awt/MenuBar.html
java.awt.MenuBar
c

MenuBar
java/awt/MenuBar.html
MenuBar();
l
MenuBar.AccessibleAWTMenuBar
AccessibleAWTMenuBar
java/awt/MenuBar.AccessibleAWTMenuBar.html
inner class MenuBar.AccessibleAWTMenuBar;
m
void
addNotify
java/awt/MenuBar.html#addNotify()
void addNotify();
m
void
removeNotify
java/awt/MenuBar.html#removeNotify()
void removeNotify();
m
Menu
getHelpMenu
java/awt/MenuBar.html#getHelpMenu()
Menu getHelpMenu();
m
void
setHelpMenu
java/awt/MenuBar.html#setHelpMenu(java.awt.Menu)
void setHelpMenu(Menu m);
m
Menu
add
java/awt/MenuBar.html#add(java.awt.Menu)
Menu add(Menu m);
m
void
remove
java/awt/MenuBar.html#remove(int)
void remove(int index);
void remove(MenuComponent m);
m
int
getMenuCount
java/awt/MenuBar.html#getMenuCount()
int getMenuCount();
m
int
countMenus
java/awt/MenuBar.html#countMenus()
int countMenus();
m
Menu
getMenu
java/awt/MenuBar.html#getMenu(int)
Menu getMenu(int i);
m
Enumeration
shortcuts
java/awt/MenuBar.html#shortcuts()
Enumeration shortcuts();
m
MenuItem
getShortcutMenuItem
java/awt/MenuBar.html#getShortcutMenuItem(java.awt.MenuShortcut)
MenuItem getShortcutMenuItem(MenuShortcut s);
m
void
deleteShortcut
java/awt/MenuBar.html#deleteShortcut(java.awt.MenuShortcut)
void deleteShortcut(MenuShortcut s);
m
AccessibleContext
getAccessibleContext
java/awt/MenuBar.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
MenuComponent.AccessibleAWTMenuComponent
class MenuComponent.AccessibleAWTMenuComponent extends AccessibleContext;
AccessibleContext
java/awt/MenuComponent.AccessibleAWTMenuComponent.html
java.awt.MenuComponent.AccessibleAWTMenuComponent
c

MenuComponent.AccessibleAWTMenuComponent
java/awt/MenuComponent.AccessibleAWTMenuComponent.html
MenuComponent.AccessibleAWTMenuComponent(MenuComponent this$0);
m
AccessibleSelection
getAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleSelection()
AccessibleSelection getAccessibleSelection();
m
String
getAccessibleName
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleName()
String getAccessibleName();
m
String
getAccessibleDescription
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleDescription()
String getAccessibleDescription();
m
AccessibleRole
getAccessibleRole
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
Accessible
getAccessibleParent
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleParent()
Accessible getAccessibleParent();
m
int
getAccessibleIndexInParent
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleIndexInParent()
int getAccessibleIndexInParent();
m
int
getAccessibleChildrenCount
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleChildrenCount()
int getAccessibleChildrenCount();
m
Accessible
getAccessibleChild
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleChild(int)
Accessible getAccessibleChild(int i);
m
Locale
getLocale
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getLocale()
Locale getLocale();
m
AccessibleComponent
getAccessibleComponent
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleComponent()
AccessibleComponent getAccessibleComponent();
m
Color
getBackground
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getBackground()
Color getBackground();
m
void
setBackground
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
Color
getForeground
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getForeground()
Color getForeground();
m
void
setForeground
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setForeground(java.awt.Color)
void setForeground(Color c);
m
Cursor
getCursor
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getCursor()
Cursor getCursor();
m
void
setCursor
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
Font
getFont
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getFont()
Font getFont();
m
void
setFont
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setFont(java.awt.Font)
void setFont(Font f);
m
FontMetrics
getFontMetrics
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font f);
m
boolean
isEnabled
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#isEnabled()
boolean isEnabled();
m
void
setEnabled
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setEnabled(boolean)
void setEnabled(boolean b);
m
boolean
isVisible
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#isVisible()
boolean isVisible();
m
void
setVisible
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setVisible(boolean)
void setVisible(boolean b);
m
boolean
isShowing
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#isShowing()
boolean isShowing();
m
boolean
contains
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#contains(java.awt.Point)
boolean contains(Point p);
m
Point
getLocationOnScreen
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getLocationOnScreen()
Point getLocationOnScreen();
m
Point
getLocation
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getLocation()
Point getLocation();
m
void
setLocation
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setLocation(java.awt.Point)
void setLocation(Point p);
m
Rectangle
getBounds
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getBounds()
Rectangle getBounds();
m
void
setBounds
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setBounds(java.awt.Rectangle)
void setBounds(Rectangle r);
m
Dimension
getSize
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getSize()
Dimension getSize();
m
void
setSize
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
m
Accessible
getAccessibleAt
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleAt(java.awt.Point)
Accessible getAccessibleAt(Point p);
m
boolean
isFocusTraversable
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#isFocusTraversable()
boolean isFocusTraversable();
m
void
requestFocus
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#requestFocus()
void requestFocus();
m
void
addFocusListener
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#addFocusListener(java.awt.event.FocusListener)
void addFocusListener(FocusListener l);
m
void
removeFocusListener
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#removeFocusListener(java.awt.event.FocusListener)
void removeFocusListener(FocusListener l);
m
int
getAccessibleSelectionCount
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleSelectionCount()
int getAccessibleSelectionCount();
m
Accessible
getAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#getAccessibleSelection(int)
Accessible getAccessibleSelection(int i);
m
boolean
isAccessibleChildSelected
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#isAccessibleChildSelected(int)
boolean isAccessibleChildSelected(int i);
m
void
addAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#addAccessibleSelection(int)
void addAccessibleSelection(int i);
m
void
removeAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#removeAccessibleSelection(int)
void removeAccessibleSelection(int i);
m
void
clearAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#clearAccessibleSelection()
void clearAccessibleSelection();
m
void
selectAllAccessibleSelection
java/awt/MenuComponent.AccessibleAWTMenuComponent.html#selectAllAccessibleSelection()
void selectAllAccessibleSelection();
MenuBar.AccessibleAWTMenuBar
class MenuBar.AccessibleAWTMenuBar extends MenuComponent.AccessibleAWTMenuComponent;
MenuComponent.AccessibleAWTMenuComponent
java/awt/MenuBar.AccessibleAWTMenuBar.html
java.awt.MenuBar.AccessibleAWTMenuBar
c

MenuBar.AccessibleAWTMenuBar
java/awt/MenuBar.AccessibleAWTMenuBar.html
MenuBar.AccessibleAWTMenuBar(MenuBar this$0);
m
AccessibleRole
getAccessibleRole
java/awt/MenuBar.AccessibleAWTMenuBar.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
CardLayout
class CardLayout extends Object;
Object
java/awt/CardLayout.html
java.awt.CardLayout
c

CardLayout
java/awt/CardLayout.html
CardLayout();
CardLayout(int hgap, int vgap);
m
int
getHgap
java/awt/CardLayout.html#getHgap()
int getHgap();
m
void
setHgap
java/awt/CardLayout.html#setHgap(int)
void setHgap(int hgap);
m
int
getVgap
java/awt/CardLayout.html#getVgap()
int getVgap();
m
void
setVgap
java/awt/CardLayout.html#setVgap(int)
void setVgap(int vgap);
m
void
addLayoutComponent
java/awt/CardLayout.html#addLayoutComponent(java.awt.Component, java.lang.Object)
void addLayoutComponent(Component comp, Object constraints);
void addLayoutComponent(String name, Component comp);
m
void
removeLayoutComponent
java/awt/CardLayout.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
preferredLayoutSize
java/awt/CardLayout.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container parent);
m
Dimension
minimumLayoutSize
java/awt/CardLayout.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container parent);
m
Dimension
maximumLayoutSize
java/awt/CardLayout.html#maximumLayoutSize(java.awt.Container)
Dimension maximumLayoutSize(Container target);
m
float
getLayoutAlignmentX
java/awt/CardLayout.html#getLayoutAlignmentX(java.awt.Container)
float getLayoutAlignmentX(Container parent);
m
float
getLayoutAlignmentY
java/awt/CardLayout.html#getLayoutAlignmentY(java.awt.Container)
float getLayoutAlignmentY(Container parent);
m
void
invalidateLayout
java/awt/CardLayout.html#invalidateLayout(java.awt.Container)
void invalidateLayout(Container target);
m
void
layoutContainer
java/awt/CardLayout.html#layoutContainer(java.awt.Container)
void layoutContainer(Container parent);
m
void
first
java/awt/CardLayout.html#first(java.awt.Container)
void first(Container parent);
m
void
next
java/awt/CardLayout.html#next(java.awt.Container)
void next(Container parent);
m
void
previous
java/awt/CardLayout.html#previous(java.awt.Container)
void previous(Container parent);
m
void
last
java/awt/CardLayout.html#last(java.awt.Container)
void last(Container parent);
m
void
show
java/awt/CardLayout.html#show(java.awt.Container, java.lang.String)
void show(Container parent, String name);
m
String
toString
java/awt/CardLayout.html#toString()
String toString();
LayoutManager2
class LayoutManager2;

java/awt/LayoutManager2.html
java.awt.LayoutManager2
m
void
addLayoutComponent
java/awt/LayoutManager2.html#addLayoutComponent(java.awt.Component, java.lang.Object)
void addLayoutComponent(Component comp, Object constraints);
m
Dimension
maximumLayoutSize
java/awt/LayoutManager2.html#maximumLayoutSize(java.awt.Container)
Dimension maximumLayoutSize(Container target);
m
float
getLayoutAlignmentX
java/awt/LayoutManager2.html#getLayoutAlignmentX(java.awt.Container)
float getLayoutAlignmentX(Container target);
m
float
getLayoutAlignmentY
java/awt/LayoutManager2.html#getLayoutAlignmentY(java.awt.Container)
float getLayoutAlignmentY(Container target);
m
void
invalidateLayout
java/awt/LayoutManager2.html#invalidateLayout(java.awt.Container)
void invalidateLayout(Container target);
ActiveEvent
class ActiveEvent;

java/awt/ActiveEvent.html
java.awt.ActiveEvent
m
void
dispatch
java/awt/ActiveEvent.html#dispatch()
void dispatch();
Component
class Component extends Object;
Object
java/awt/Component.html
java.awt.Component
c

Component
java/awt/Component.html
Component();
l
Component.AccessibleAWTComponent
AccessibleAWTComponent
java/awt/Component.AccessibleAWTComponent.html
inner class Component.AccessibleAWTComponent;
f
float
TOP_ALIGNMENT
java/awt/Component.html#TOP_ALIGNMENT
float TOP_ALIGNMENT;
f
float
CENTER_ALIGNMENT
java/awt/Component.html#CENTER_ALIGNMENT
float CENTER_ALIGNMENT;
f
float
BOTTOM_ALIGNMENT
java/awt/Component.html#BOTTOM_ALIGNMENT
float BOTTOM_ALIGNMENT;
f
float
LEFT_ALIGNMENT
java/awt/Component.html#LEFT_ALIGNMENT
float LEFT_ALIGNMENT;
f
float
RIGHT_ALIGNMENT
java/awt/Component.html#RIGHT_ALIGNMENT
float RIGHT_ALIGNMENT;
m
String
getName
java/awt/Component.html#getName()
String getName();
m
void
setName
java/awt/Component.html#setName(java.lang.String)
void setName(String name);
m
Container
getParent
java/awt/Component.html#getParent()
Container getParent();
m
ComponentPeer
getPeer
java/awt/Component.html#getPeer()
ComponentPeer getPeer();
m
void
setDropTarget
java/awt/Component.html#setDropTarget(java.awt.dnd.DropTarget)
void setDropTarget(DropTarget dt);
m
DropTarget
getDropTarget
java/awt/Component.html#getDropTarget()
DropTarget getDropTarget();
m
GraphicsConfiguration
getGraphicsConfiguration
java/awt/Component.html#getGraphicsConfiguration()
GraphicsConfiguration getGraphicsConfiguration();
m
Object
getTreeLock
java/awt/Component.html#getTreeLock()
Object getTreeLock();
m
Toolkit
getToolkit
java/awt/Component.html#getToolkit()
Toolkit getToolkit();
m
boolean
isValid
java/awt/Component.html#isValid()
boolean isValid();
m
boolean
isDisplayable
java/awt/Component.html#isDisplayable()
boolean isDisplayable();
m
boolean
isVisible
java/awt/Component.html#isVisible()
boolean isVisible();
m
boolean
isShowing
java/awt/Component.html#isShowing()
boolean isShowing();
m
boolean
isEnabled
java/awt/Component.html#isEnabled()
boolean isEnabled();
m
void
setEnabled
java/awt/Component.html#setEnabled(boolean)
void setEnabled(boolean b);
m
void
enable
java/awt/Component.html#enable()
void enable();
void enable(boolean b);
m
void
disable
java/awt/Component.html#disable()
void disable();
m
boolean
isDoubleBuffered
java/awt/Component.html#isDoubleBuffered()
boolean isDoubleBuffered();
m
void
enableInputMethods
java/awt/Component.html#enableInputMethods(boolean)
void enableInputMethods(boolean enable);
m
void
setVisible
java/awt/Component.html#setVisible(boolean)
void setVisible(boolean b);
m
void
show
java/awt/Component.html#show()
void show();
void show(boolean b);
m
void
hide
java/awt/Component.html#hide()
void hide();
m
Color
getForeground
java/awt/Component.html#getForeground()
Color getForeground();
m
void
setForeground
java/awt/Component.html#setForeground(java.awt.Color)
void setForeground(Color c);
m
Color
getBackground
java/awt/Component.html#getBackground()
Color getBackground();
m
void
setBackground
java/awt/Component.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
Font
getFont
java/awt/Component.html#getFont()
Font getFont();
m
void
setFont
java/awt/Component.html#setFont(java.awt.Font)
void setFont(Font f);
m
Locale
getLocale
java/awt/Component.html#getLocale()
Locale getLocale();
m
void
setLocale
java/awt/Component.html#setLocale(java.util.Locale)
void setLocale(Locale l);
m
ColorModel
getColorModel
java/awt/Component.html#getColorModel()
ColorModel getColorModel();
m
Point
getLocation
java/awt/Component.html#getLocation()
Point getLocation();
m
Point
getLocationOnScreen
java/awt/Component.html#getLocationOnScreen()
Point getLocationOnScreen();
m
Point
location
java/awt/Component.html#location()
Point location();
m
void
setLocation
java/awt/Component.html#setLocation(int, int)
void setLocation(int x, int y);
m
void
move
java/awt/Component.html#move(int, int)
void move(int x, int y);
m
void
setLocation
java/awt/Component.html#setLocation(java.awt.Point)
void setLocation(Point p);
m
Dimension
getSize
java/awt/Component.html#getSize()
Dimension getSize();
m
Dimension
size
java/awt/Component.html#size()
Dimension size();
m
void
setSize
java/awt/Component.html#setSize(int, int)
void setSize(int width, int height);
m
void
resize
java/awt/Component.html#resize(int, int)
void resize(int width, int height);
m
void
setSize
java/awt/Component.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
m
void
resize
java/awt/Component.html#resize(java.awt.Dimension)
void resize(Dimension d);
m
Rectangle
getBounds
java/awt/Component.html#getBounds()
Rectangle getBounds();
m
Rectangle
bounds
java/awt/Component.html#bounds()
Rectangle bounds();
m
void
setBounds
java/awt/Component.html#setBounds(int, int, int, int)
void setBounds(int x, int y, int width, int height);
m
void
reshape
java/awt/Component.html#reshape(int, int, int, int)
void reshape(int x, int y, int width, int height);
m
void
setBounds
java/awt/Component.html#setBounds(java.awt.Rectangle)
void setBounds(Rectangle r);
m
int
getX
java/awt/Component.html#getX()
int getX();
m
int
getY
java/awt/Component.html#getY()
int getY();
m
int
getWidth
java/awt/Component.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/Component.html#getHeight()
int getHeight();
m
Rectangle
getBounds
java/awt/Component.html#getBounds(java.awt.Rectangle)
Rectangle getBounds(Rectangle rv);
m
Dimension
getSize
java/awt/Component.html#getSize(java.awt.Dimension)
Dimension getSize(Dimension rv);
m
Point
getLocation
java/awt/Component.html#getLocation(java.awt.Point)
Point getLocation(Point rv);
m
boolean
isOpaque
java/awt/Component.html#isOpaque()
boolean isOpaque();
m
boolean
isLightweight
java/awt/Component.html#isLightweight()
boolean isLightweight();
m
Dimension
getPreferredSize
java/awt/Component.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
preferredSize
java/awt/Component.html#preferredSize()
Dimension preferredSize();
m
Dimension
getMinimumSize
java/awt/Component.html#getMinimumSize()
Dimension getMinimumSize();
m
Dimension
minimumSize
java/awt/Component.html#minimumSize()
Dimension minimumSize();
m
Dimension
getMaximumSize
java/awt/Component.html#getMaximumSize()
Dimension getMaximumSize();
m
float
getAlignmentX
java/awt/Component.html#getAlignmentX()
float getAlignmentX();
m
float
getAlignmentY
java/awt/Component.html#getAlignmentY()
float getAlignmentY();
m
void
doLayout
java/awt/Component.html#doLayout()
void doLayout();
m
void
layout
java/awt/Component.html#layout()
void layout();
m
void
validate
java/awt/Component.html#validate()
void validate();
m
void
invalidate
java/awt/Component.html#invalidate()
void invalidate();
m
Graphics
getGraphics
java/awt/Component.html#getGraphics()
Graphics getGraphics();
m
FontMetrics
getFontMetrics
java/awt/Component.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font font);
m
void
setCursor
java/awt/Component.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
Cursor
getCursor
java/awt/Component.html#getCursor()
Cursor getCursor();
m
void
paint
java/awt/Component.html#paint(java.awt.Graphics)
void paint(Graphics g);
m
void
update
java/awt/Component.html#update(java.awt.Graphics)
void update(Graphics g);
m
void
paintAll
java/awt/Component.html#paintAll(java.awt.Graphics)
void paintAll(Graphics g);
m
void
repaint
java/awt/Component.html#repaint()
void repaint();
void repaint(long tm);
void repaint(int x, int y, int width, int height);
void repaint(long tm, int x, int y, int width, int height);
m
void
print
java/awt/Component.html#print(java.awt.Graphics)
void print(Graphics g);
m
void
printAll
java/awt/Component.html#printAll(java.awt.Graphics)
void printAll(Graphics g);
m
boolean
imageUpdate
java/awt/Component.html#imageUpdate(java.awt.Image, int, int, int, int, int)
boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h);
m
Image
createImage
java/awt/Component.html#createImage(java.awt.image.ImageProducer)
Image createImage(ImageProducer producer);
Image createImage(int width, int height);
m
boolean
prepareImage
java/awt/Component.html#prepareImage(java.awt.Image, java.awt.image.ImageObserver)
boolean prepareImage(Image image, ImageObserver observer);
boolean prepareImage(Image image, int width, int height, ImageObserver observer);
m
int
checkImage
java/awt/Component.html#checkImage(java.awt.Image, java.awt.image.ImageObserver)
int checkImage(Image image, ImageObserver observer);
int checkImage(Image image, int width, int height, ImageObserver observer);
m
boolean
contains
java/awt/Component.html#contains(int, int)
boolean contains(int x, int y);
m
boolean
inside
java/awt/Component.html#inside(int, int)
boolean inside(int x, int y);
m
boolean
contains
java/awt/Component.html#contains(java.awt.Point)
boolean contains(Point p);
m
Component
getComponentAt
java/awt/Component.html#getComponentAt(int, int)
Component getComponentAt(int x, int y);
m
Component
locate
java/awt/Component.html#locate(int, int)
Component locate(int x, int y);
m
Component
getComponentAt
java/awt/Component.html#getComponentAt(java.awt.Point)
Component getComponentAt(Point p);
m
void
deliverEvent
java/awt/Component.html#deliverEvent(java.awt.Event)
void deliverEvent(Event e);
m
void
dispatchEvent
java/awt/Component.html#dispatchEvent(java.awt.AWTEvent)
void dispatchEvent(AWTEvent e);
m
boolean
postEvent
java/awt/Component.html#postEvent(java.awt.Event)
boolean postEvent(Event e);
m
void
addComponentListener
java/awt/Component.html#addComponentListener(java.awt.event.ComponentListener)
void addComponentListener(ComponentListener l);
m
void
removeComponentListener
java/awt/Component.html#removeComponentListener(java.awt.event.ComponentListener)
void removeComponentListener(ComponentListener l);
m
void
addFocusListener
java/awt/Component.html#addFocusListener(java.awt.event.FocusListener)
void addFocusListener(FocusListener l);
m
void
removeFocusListener
java/awt/Component.html#removeFocusListener(java.awt.event.FocusListener)
void removeFocusListener(FocusListener l);
m
void
addHierarchyListener
java/awt/Component.html#addHierarchyListener(java.awt.event.HierarchyListener)
void addHierarchyListener(HierarchyListener l);
m
void
removeHierarchyListener
java/awt/Component.html#removeHierarchyListener(java.awt.event.HierarchyListener)
void removeHierarchyListener(HierarchyListener l);
m
void
addHierarchyBoundsListener
java/awt/Component.html#addHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)
void addHierarchyBoundsListener(HierarchyBoundsListener l);
m
void
removeHierarchyBoundsListener
java/awt/Component.html#removeHierarchyBoundsListener(java.awt.event.HierarchyBoundsListener)
void removeHierarchyBoundsListener(HierarchyBoundsListener l);
m
void
addKeyListener
java/awt/Component.html#addKeyListener(java.awt.event.KeyListener)
void addKeyListener(KeyListener l);
m
void
removeKeyListener
java/awt/Component.html#removeKeyListener(java.awt.event.KeyListener)
void removeKeyListener(KeyListener l);
m
void
addMouseListener
java/awt/Component.html#addMouseListener(java.awt.event.MouseListener)
void addMouseListener(MouseListener l);
m
void
removeMouseListener
java/awt/Component.html#removeMouseListener(java.awt.event.MouseListener)
void removeMouseListener(MouseListener l);
m
void
addMouseMotionListener
java/awt/Component.html#addMouseMotionListener(java.awt.event.MouseMotionListener)
void addMouseMotionListener(MouseMotionListener l);
m
void
removeMouseMotionListener
java/awt/Component.html#removeMouseMotionListener(java.awt.event.MouseMotionListener)
void removeMouseMotionListener(MouseMotionListener l);
m
void
addInputMethodListener
java/awt/Component.html#addInputMethodListener(java.awt.event.InputMethodListener)
void addInputMethodListener(InputMethodListener l);
m
void
removeInputMethodListener
java/awt/Component.html#removeInputMethodListener(java.awt.event.InputMethodListener)
void removeInputMethodListener(InputMethodListener l);
m
EventListener
getListeners
java/awt/Component.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
InputMethodRequests
getInputMethodRequests
java/awt/Component.html#getInputMethodRequests()
InputMethodRequests getInputMethodRequests();
m
InputContext
getInputContext
java/awt/Component.html#getInputContext()
InputContext getInputContext();
m
void
enableEvents
java/awt/Component.html#enableEvents(long)
void enableEvents(long eventsToEnable);
m
void
disableEvents
java/awt/Component.html#disableEvents(long)
void disableEvents(long eventsToDisable);
m
AWTEvent
coalesceEvents
java/awt/Component.html#coalesceEvents(java.awt.AWTEvent, java.awt.AWTEvent)
AWTEvent coalesceEvents(AWTEvent existingEvent, AWTEvent newEvent);
m
void
processEvent
java/awt/Component.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processComponentEvent
java/awt/Component.html#processComponentEvent(java.awt.event.ComponentEvent)
void processComponentEvent(ComponentEvent e);
m
void
processFocusEvent
java/awt/Component.html#processFocusEvent(java.awt.event.FocusEvent)
void processFocusEvent(FocusEvent e);
m
void
processKeyEvent
java/awt/Component.html#processKeyEvent(java.awt.event.KeyEvent)
void processKeyEvent(KeyEvent e);
m
void
processMouseEvent
java/awt/Component.html#processMouseEvent(java.awt.event.MouseEvent)
void processMouseEvent(MouseEvent e);
m
void
processMouseMotionEvent
java/awt/Component.html#processMouseMotionEvent(java.awt.event.MouseEvent)
void processMouseMotionEvent(MouseEvent e);
m
void
processInputMethodEvent
java/awt/Component.html#processInputMethodEvent(java.awt.event.InputMethodEvent)
void processInputMethodEvent(InputMethodEvent e);
m
void
processHierarchyEvent
java/awt/Component.html#processHierarchyEvent(java.awt.event.HierarchyEvent)
void processHierarchyEvent(HierarchyEvent e);
m
void
processHierarchyBoundsEvent
java/awt/Component.html#processHierarchyBoundsEvent(java.awt.event.HierarchyEvent)
void processHierarchyBoundsEvent(HierarchyEvent e);
m
boolean
handleEvent
java/awt/Component.html#handleEvent(java.awt.Event)
boolean handleEvent(Event evt);
m
boolean
mouseDown
java/awt/Component.html#mouseDown(java.awt.Event, int, int)
boolean mouseDown(Event evt, int x, int y);
m
boolean
mouseDrag
java/awt/Component.html#mouseDrag(java.awt.Event, int, int)
boolean mouseDrag(Event evt, int x, int y);
m
boolean
mouseUp
java/awt/Component.html#mouseUp(java.awt.Event, int, int)
boolean mouseUp(Event evt, int x, int y);
m
boolean
mouseMove
java/awt/Component.html#mouseMove(java.awt.Event, int, int)
boolean mouseMove(Event evt, int x, int y);
m
boolean
mouseEnter
java/awt/Component.html#mouseEnter(java.awt.Event, int, int)
boolean mouseEnter(Event evt, int x, int y);
m
boolean
mouseExit
java/awt/Component.html#mouseExit(java.awt.Event, int, int)
boolean mouseExit(Event evt, int x, int y);
m
boolean
keyDown
java/awt/Component.html#keyDown(java.awt.Event, int)
boolean keyDown(Event evt, int key);
m
boolean
keyUp
java/awt/Component.html#keyUp(java.awt.Event, int)
boolean keyUp(Event evt, int key);
m
boolean
action
java/awt/Component.html#action(java.awt.Event, java.lang.Object)
boolean action(Event evt, Object what);
m
void
addNotify
java/awt/Component.html#addNotify()
void addNotify();
m
void
removeNotify
java/awt/Component.html#removeNotify()
void removeNotify();
m
boolean
gotFocus
java/awt/Component.html#gotFocus(java.awt.Event, java.lang.Object)
boolean gotFocus(Event evt, Object what);
m
boolean
lostFocus
java/awt/Component.html#lostFocus(java.awt.Event, java.lang.Object)
boolean lostFocus(Event evt, Object what);
m
boolean
isFocusTraversable
java/awt/Component.html#isFocusTraversable()
boolean isFocusTraversable();
m
void
requestFocus
java/awt/Component.html#requestFocus()
void requestFocus();
m
void
transferFocus
java/awt/Component.html#transferFocus()
void transferFocus();
m
void
nextFocus
java/awt/Component.html#nextFocus()
void nextFocus();
m
boolean
hasFocus
java/awt/Component.html#hasFocus()
boolean hasFocus();
m
void
add
java/awt/Component.html#add(java.awt.PopupMenu)
void add(PopupMenu popup);
m
void
remove
java/awt/Component.html#remove(java.awt.MenuComponent)
void remove(MenuComponent popup);
m
String
paramString
java/awt/Component.html#paramString()
String paramString();
m
String
toString
java/awt/Component.html#toString()
String toString();
m
void
list
java/awt/Component.html#list()
void list();
void list(PrintStream out);
void list(PrintStream out, int indent);
void list(PrintWriter out);
void list(PrintWriter out, int indent);
m
void
addPropertyChangeListener
java/awt/Component.html#addPropertyChangeListener(java.beans.PropertyChangeListener)
void addPropertyChangeListener(PropertyChangeListener listener);
m
void
removePropertyChangeListener
java/awt/Component.html#removePropertyChangeListener(java.beans.PropertyChangeListener)
void removePropertyChangeListener(PropertyChangeListener listener);
m
void
addPropertyChangeListener
java/awt/Component.html#addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
void addPropertyChangeListener(String propertyName, PropertyChangeListener listener);
m
void
removePropertyChangeListener
java/awt/Component.html#removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
void removePropertyChangeListener(String propertyName, PropertyChangeListener listener);
m
void
firePropertyChange
java/awt/Component.html#firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)
void firePropertyChange(String propertyName, Object oldValue, Object newValue);
m
void
setComponentOrientation
java/awt/Component.html#setComponentOrientation(java.awt.ComponentOrientation)
void setComponentOrientation(ComponentOrientation o);
m
ComponentOrientation
getComponentOrientation
java/awt/Component.html#getComponentOrientation()
ComponentOrientation getComponentOrientation();
m
AccessibleContext
getAccessibleContext
java/awt/Component.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Checkbox
class Checkbox extends Component;
Component
java/awt/Checkbox.html
java.awt.Checkbox
c

Checkbox
java/awt/Checkbox.html
Checkbox();
Checkbox(String label);
Checkbox(String label, boolean state);
Checkbox(String label, boolean state, CheckboxGroup group);
Checkbox(String label, CheckboxGroup group, boolean state);
l
Checkbox.AccessibleAWTCheckbox
AccessibleAWTCheckbox
java/awt/Checkbox.AccessibleAWTCheckbox.html
inner class Checkbox.AccessibleAWTCheckbox;
m
void
addNotify
java/awt/Checkbox.html#addNotify()
void addNotify();
m
String
getLabel
java/awt/Checkbox.html#getLabel()
String getLabel();
m
void
setLabel
java/awt/Checkbox.html#setLabel(java.lang.String)
void setLabel(String label);
m
boolean
getState
java/awt/Checkbox.html#getState()
boolean getState();
m
void
setState
java/awt/Checkbox.html#setState(boolean)
void setState(boolean state);
m
Object
getSelectedObjects
java/awt/Checkbox.html#getSelectedObjects()
Object[] getSelectedObjects();
m
CheckboxGroup
getCheckboxGroup
java/awt/Checkbox.html#getCheckboxGroup()
CheckboxGroup getCheckboxGroup();
m
void
setCheckboxGroup
java/awt/Checkbox.html#setCheckboxGroup(java.awt.CheckboxGroup)
void setCheckboxGroup(CheckboxGroup g);
m
void
addItemListener
java/awt/Checkbox.html#addItemListener(java.awt.event.ItemListener)
void addItemListener(ItemListener l);
m
void
removeItemListener
java/awt/Checkbox.html#removeItemListener(java.awt.event.ItemListener)
void removeItemListener(ItemListener l);
m
EventListener
getListeners
java/awt/Checkbox.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Checkbox.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processItemEvent
java/awt/Checkbox.html#processItemEvent(java.awt.event.ItemEvent)
void processItemEvent(ItemEvent e);
m
String
paramString
java/awt/Checkbox.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Checkbox.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Component.AccessibleAWTComponent
class Component.AccessibleAWTComponent extends AccessibleContext;
AccessibleContext
java/awt/Component.AccessibleAWTComponent.html
java.awt.Component.AccessibleAWTComponent
c

Component.AccessibleAWTComponent
java/awt/Component.AccessibleAWTComponent.html
Component.AccessibleAWTComponent(Component this$0);
l
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
AccessibleAWTComponentHandler
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html
inner class Component.AccessibleAWTComponent.AccessibleAWTComponentHandler;
l
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
AccessibleAWTFocusHandler
java/awt/Component.AccessibleAWTComponent.AccessibleAWTFocusHandler.html
inner class Component.AccessibleAWTComponent.AccessibleAWTFocusHandler;
f
ComponentListener
accessibleAWTComponentHandler
java/awt/Component.AccessibleAWTComponent.html#accessibleAWTComponentHandler
ComponentListener accessibleAWTComponentHandler;
f
FocusListener
accessibleAWTFocusHandler
java/awt/Component.AccessibleAWTComponent.html#accessibleAWTFocusHandler
FocusListener accessibleAWTFocusHandler;
m
void
addPropertyChangeListener
java/awt/Component.AccessibleAWTComponent.html#addPropertyChangeListener(java.beans.PropertyChangeListener)
void addPropertyChangeListener(PropertyChangeListener listener);
m
void
removePropertyChangeListener
java/awt/Component.AccessibleAWTComponent.html#removePropertyChangeListener(java.beans.PropertyChangeListener)
void removePropertyChangeListener(PropertyChangeListener listener);
m
String
getAccessibleName
java/awt/Component.AccessibleAWTComponent.html#getAccessibleName()
String getAccessibleName();
m
String
getAccessibleDescription
java/awt/Component.AccessibleAWTComponent.html#getAccessibleDescription()
String getAccessibleDescription();
m
AccessibleRole
getAccessibleRole
java/awt/Component.AccessibleAWTComponent.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Component.AccessibleAWTComponent.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
Accessible
getAccessibleParent
java/awt/Component.AccessibleAWTComponent.html#getAccessibleParent()
Accessible getAccessibleParent();
m
int
getAccessibleIndexInParent
java/awt/Component.AccessibleAWTComponent.html#getAccessibleIndexInParent()
int getAccessibleIndexInParent();
m
int
getAccessibleChildrenCount
java/awt/Component.AccessibleAWTComponent.html#getAccessibleChildrenCount()
int getAccessibleChildrenCount();
m
Accessible
getAccessibleChild
java/awt/Component.AccessibleAWTComponent.html#getAccessibleChild(int)
Accessible getAccessibleChild(int i);
m
Locale
getLocale
java/awt/Component.AccessibleAWTComponent.html#getLocale()
Locale getLocale();
m
AccessibleComponent
getAccessibleComponent
java/awt/Component.AccessibleAWTComponent.html#getAccessibleComponent()
AccessibleComponent getAccessibleComponent();
m
Color
getBackground
java/awt/Component.AccessibleAWTComponent.html#getBackground()
Color getBackground();
m
void
setBackground
java/awt/Component.AccessibleAWTComponent.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
Color
getForeground
java/awt/Component.AccessibleAWTComponent.html#getForeground()
Color getForeground();
m
void
setForeground
java/awt/Component.AccessibleAWTComponent.html#setForeground(java.awt.Color)
void setForeground(Color c);
m
Cursor
getCursor
java/awt/Component.AccessibleAWTComponent.html#getCursor()
Cursor getCursor();
m
void
setCursor
java/awt/Component.AccessibleAWTComponent.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
Font
getFont
java/awt/Component.AccessibleAWTComponent.html#getFont()
Font getFont();
m
void
setFont
java/awt/Component.AccessibleAWTComponent.html#setFont(java.awt.Font)
void setFont(Font f);
m
FontMetrics
getFontMetrics
java/awt/Component.AccessibleAWTComponent.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font f);
m
boolean
isEnabled
java/awt/Component.AccessibleAWTComponent.html#isEnabled()
boolean isEnabled();
m
void
setEnabled
java/awt/Component.AccessibleAWTComponent.html#setEnabled(boolean)
void setEnabled(boolean b);
m
boolean
isVisible
java/awt/Component.AccessibleAWTComponent.html#isVisible()
boolean isVisible();
m
void
setVisible
java/awt/Component.AccessibleAWTComponent.html#setVisible(boolean)
void setVisible(boolean b);
m
boolean
isShowing
java/awt/Component.AccessibleAWTComponent.html#isShowing()
boolean isShowing();
m
boolean
contains
java/awt/Component.AccessibleAWTComponent.html#contains(java.awt.Point)
boolean contains(Point p);
m
Point
getLocationOnScreen
java/awt/Component.AccessibleAWTComponent.html#getLocationOnScreen()
Point getLocationOnScreen();
m
Point
getLocation
java/awt/Component.AccessibleAWTComponent.html#getLocation()
Point getLocation();
m
void
setLocation
java/awt/Component.AccessibleAWTComponent.html#setLocation(java.awt.Point)
void setLocation(Point p);
m
Rectangle
getBounds
java/awt/Component.AccessibleAWTComponent.html#getBounds()
Rectangle getBounds();
m
void
setBounds
java/awt/Component.AccessibleAWTComponent.html#setBounds(java.awt.Rectangle)
void setBounds(Rectangle r);
m
Dimension
getSize
java/awt/Component.AccessibleAWTComponent.html#getSize()
Dimension getSize();
m
void
setSize
java/awt/Component.AccessibleAWTComponent.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
m
Accessible
getAccessibleAt
java/awt/Component.AccessibleAWTComponent.html#getAccessibleAt(java.awt.Point)
Accessible getAccessibleAt(Point p);
m
boolean
isFocusTraversable
java/awt/Component.AccessibleAWTComponent.html#isFocusTraversable()
boolean isFocusTraversable();
m
void
requestFocus
java/awt/Component.AccessibleAWTComponent.html#requestFocus()
void requestFocus();
m
void
addFocusListener
java/awt/Component.AccessibleAWTComponent.html#addFocusListener(java.awt.event.FocusListener)
void addFocusListener(FocusListener l);
m
void
removeFocusListener
java/awt/Component.AccessibleAWTComponent.html#removeFocusListener(java.awt.event.FocusListener)
void removeFocusListener(FocusListener l);
Checkbox.AccessibleAWTCheckbox
class Checkbox.AccessibleAWTCheckbox extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Checkbox.AccessibleAWTCheckbox.html
java.awt.Checkbox.AccessibleAWTCheckbox
c

Checkbox.AccessibleAWTCheckbox
java/awt/Checkbox.AccessibleAWTCheckbox.html
Checkbox.AccessibleAWTCheckbox(Checkbox this$0);
m
void
itemStateChanged
java/awt/Checkbox.AccessibleAWTCheckbox.html#itemStateChanged(java.awt.event.ItemEvent)
void itemStateChanged(ItemEvent e);
m
AccessibleAction
getAccessibleAction
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleAction()
AccessibleAction getAccessibleAction();
m
AccessibleValue
getAccessibleValue
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleValue()
AccessibleValue getAccessibleValue();
m
int
getAccessibleActionCount
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleActionCount()
int getAccessibleActionCount();
m
String
getAccessibleActionDescription
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleActionDescription(int)
String getAccessibleActionDescription(int i);
m
boolean
doAccessibleAction
java/awt/Checkbox.AccessibleAWTCheckbox.html#doAccessibleAction(int)
boolean doAccessibleAction(int i);
m
Number
getCurrentAccessibleValue
java/awt/Checkbox.AccessibleAWTCheckbox.html#getCurrentAccessibleValue()
Number getCurrentAccessibleValue();
m
boolean
setCurrentAccessibleValue
java/awt/Checkbox.AccessibleAWTCheckbox.html#setCurrentAccessibleValue(java.lang.Number)
boolean setCurrentAccessibleValue(Number n);
m
Number
getMinimumAccessibleValue
java/awt/Checkbox.AccessibleAWTCheckbox.html#getMinimumAccessibleValue()
Number getMinimumAccessibleValue();
m
Number
getMaximumAccessibleValue
java/awt/Checkbox.AccessibleAWTCheckbox.html#getMaximumAccessibleValue()
Number getMaximumAccessibleValue();
m
AccessibleRole
getAccessibleRole
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Checkbox.AccessibleAWTCheckbox.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
MenuItem
class MenuItem extends MenuComponent;
MenuComponent
java/awt/MenuItem.html
java.awt.MenuItem
c

MenuItem
java/awt/MenuItem.html
MenuItem();
MenuItem(String label);
MenuItem(String label, MenuShortcut s);
l
MenuItem.AccessibleAWTMenuItem
AccessibleAWTMenuItem
java/awt/MenuItem.AccessibleAWTMenuItem.html
inner class MenuItem.AccessibleAWTMenuItem;
m
void
addNotify
java/awt/MenuItem.html#addNotify()
void addNotify();
m
String
getLabel
java/awt/MenuItem.html#getLabel()
String getLabel();
m
void
setLabel
java/awt/MenuItem.html#setLabel(java.lang.String)
void setLabel(String label);
m
boolean
isEnabled
java/awt/MenuItem.html#isEnabled()
boolean isEnabled();
m
void
setEnabled
java/awt/MenuItem.html#setEnabled(boolean)
void setEnabled(boolean b);
m
void
enable
java/awt/MenuItem.html#enable()
void enable();
void enable(boolean b);
m
void
disable
java/awt/MenuItem.html#disable()
void disable();
m
MenuShortcut
getShortcut
java/awt/MenuItem.html#getShortcut()
MenuShortcut getShortcut();
m
void
setShortcut
java/awt/MenuItem.html#setShortcut(java.awt.MenuShortcut)
void setShortcut(MenuShortcut s);
m
void
deleteShortcut
java/awt/MenuItem.html#deleteShortcut()
void deleteShortcut();
m
void
enableEvents
java/awt/MenuItem.html#enableEvents(long)
void enableEvents(long eventsToEnable);
m
void
disableEvents
java/awt/MenuItem.html#disableEvents(long)
void disableEvents(long eventsToDisable);
m
void
setActionCommand
java/awt/MenuItem.html#setActionCommand(java.lang.String)
void setActionCommand(String command);
m
String
getActionCommand
java/awt/MenuItem.html#getActionCommand()
String getActionCommand();
m
void
addActionListener
java/awt/MenuItem.html#addActionListener(java.awt.event.ActionListener)
void addActionListener(ActionListener l);
m
void
removeActionListener
java/awt/MenuItem.html#removeActionListener(java.awt.event.ActionListener)
void removeActionListener(ActionListener l);
m
EventListener
getListeners
java/awt/MenuItem.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/MenuItem.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processActionEvent
java/awt/MenuItem.html#processActionEvent(java.awt.event.ActionEvent)
void processActionEvent(ActionEvent e);
m
String
paramString
java/awt/MenuItem.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/MenuItem.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
CheckboxMenuItem
class CheckboxMenuItem extends MenuItem;
MenuItem
java/awt/CheckboxMenuItem.html
java.awt.CheckboxMenuItem
c

CheckboxMenuItem
java/awt/CheckboxMenuItem.html
CheckboxMenuItem();
CheckboxMenuItem(String label);
CheckboxMenuItem(String label, boolean state);
l
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
AccessibleAWTCheckboxMenuItem
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html
inner class CheckboxMenuItem.AccessibleAWTCheckboxMenuItem;
m
void
addNotify
java/awt/CheckboxMenuItem.html#addNotify()
void addNotify();
m
boolean
getState
java/awt/CheckboxMenuItem.html#getState()
boolean getState();
m
void
setState
java/awt/CheckboxMenuItem.html#setState(boolean)
void setState(boolean b);
m
Object
getSelectedObjects
java/awt/CheckboxMenuItem.html#getSelectedObjects()
Object[] getSelectedObjects();
m
void
addItemListener
java/awt/CheckboxMenuItem.html#addItemListener(java.awt.event.ItemListener)
void addItemListener(ItemListener l);
m
void
removeItemListener
java/awt/CheckboxMenuItem.html#removeItemListener(java.awt.event.ItemListener)
void removeItemListener(ItemListener l);
m
EventListener
getListeners
java/awt/CheckboxMenuItem.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/CheckboxMenuItem.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processItemEvent
java/awt/CheckboxMenuItem.html#processItemEvent(java.awt.event.ItemEvent)
void processItemEvent(ItemEvent e);
m
String
paramString
java/awt/CheckboxMenuItem.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/CheckboxMenuItem.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
MenuItem.AccessibleAWTMenuItem
class MenuItem.AccessibleAWTMenuItem extends MenuComponent.AccessibleAWTMenuComponent;
MenuComponent.AccessibleAWTMenuComponent
java/awt/MenuItem.AccessibleAWTMenuItem.html
java.awt.MenuItem.AccessibleAWTMenuItem
c

MenuItem.AccessibleAWTMenuItem
java/awt/MenuItem.AccessibleAWTMenuItem.html
MenuItem.AccessibleAWTMenuItem(MenuItem this$0);
m
String
getAccessibleName
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleName()
String getAccessibleName();
m
AccessibleRole
getAccessibleRole
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleAction
getAccessibleAction
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleAction()
AccessibleAction getAccessibleAction();
m
AccessibleValue
getAccessibleValue
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleValue()
AccessibleValue getAccessibleValue();
m
int
getAccessibleActionCount
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleActionCount()
int getAccessibleActionCount();
m
String
getAccessibleActionDescription
java/awt/MenuItem.AccessibleAWTMenuItem.html#getAccessibleActionDescription(int)
String getAccessibleActionDescription(int i);
m
boolean
doAccessibleAction
java/awt/MenuItem.AccessibleAWTMenuItem.html#doAccessibleAction(int)
boolean doAccessibleAction(int i);
m
Number
getCurrentAccessibleValue
java/awt/MenuItem.AccessibleAWTMenuItem.html#getCurrentAccessibleValue()
Number getCurrentAccessibleValue();
m
boolean
setCurrentAccessibleValue
java/awt/MenuItem.AccessibleAWTMenuItem.html#setCurrentAccessibleValue(java.lang.Number)
boolean setCurrentAccessibleValue(Number n);
m
Number
getMinimumAccessibleValue
java/awt/MenuItem.AccessibleAWTMenuItem.html#getMinimumAccessibleValue()
Number getMinimumAccessibleValue();
m
Number
getMaximumAccessibleValue
java/awt/MenuItem.AccessibleAWTMenuItem.html#getMaximumAccessibleValue()
Number getMaximumAccessibleValue();
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
class CheckboxMenuItem.AccessibleAWTCheckboxMenuItem extends MenuItem.AccessibleAWTMenuItem;
MenuItem.AccessibleAWTMenuItem
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html
java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
c

CheckboxMenuItem.AccessibleAWTCheckboxMenuItem
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html
CheckboxMenuItem.AccessibleAWTCheckboxMenuItem(CheckboxMenuItem this$0);
m
AccessibleAction
getAccessibleAction
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getAccessibleAction()
AccessibleAction getAccessibleAction();
m
AccessibleValue
getAccessibleValue
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getAccessibleValue()
AccessibleValue getAccessibleValue();
m
int
getAccessibleActionCount
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getAccessibleActionCount()
int getAccessibleActionCount();
m
String
getAccessibleActionDescription
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getAccessibleActionDescription(int)
String getAccessibleActionDescription(int i);
m
boolean
doAccessibleAction
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#doAccessibleAction(int)
boolean doAccessibleAction(int i);
m
Number
getCurrentAccessibleValue
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getCurrentAccessibleValue()
Number getCurrentAccessibleValue();
m
boolean
setCurrentAccessibleValue
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#setCurrentAccessibleValue(java.lang.Number)
boolean setCurrentAccessibleValue(Number n);
m
Number
getMinimumAccessibleValue
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getMinimumAccessibleValue()
Number getMinimumAccessibleValue();
m
Number
getMaximumAccessibleValue
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getMaximumAccessibleValue()
Number getMaximumAccessibleValue();
m
AccessibleRole
getAccessibleRole
java/awt/CheckboxMenuItem.AccessibleAWTCheckboxMenuItem.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
Composite
class Composite;

java/awt/Composite.html
java.awt.Composite
m
CompositeContext
createContext
java/awt/Composite.html#createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints)
CompositeContext createContext(ColorModel srcColorModel, ColorModel dstColorModel, RenderingHints hints);
Point
class Point extends Point2D;
Point2D
java/awt/Point.html
java.awt.Point
c

Point
java/awt/Point.html
Point();
Point(Point p);
Point(int x, int y);
f
int
x
java/awt/Point.html#x
int x;
f
int
y
java/awt/Point.html#y
int y;
m
double
getX
java/awt/Point.html#getX()
double getX();
m
double
getY
java/awt/Point.html#getY()
double getY();
m
Point
getLocation
java/awt/Point.html#getLocation()
Point getLocation();
m
void
setLocation
java/awt/Point.html#setLocation(java.awt.Point)
void setLocation(Point p);
void setLocation(int x, int y);
void setLocation(double x, double y);
m
void
move
java/awt/Point.html#move(int, int)
void move(int x, int y);
m
void
translate
java/awt/Point.html#translate(int, int)
void translate(int x, int y);
m
boolean
equals
java/awt/Point.html#equals(java.lang.Object)
boolean equals(Object obj);
m
String
toString
java/awt/Point.html#toString()
String toString();
TextComponent
class TextComponent extends Component;
Component
java/awt/TextComponent.html
java.awt.TextComponent
l
TextComponent.AccessibleAWTTextComponent
AccessibleAWTTextComponent
java/awt/TextComponent.AccessibleAWTTextComponent.html
inner class TextComponent.AccessibleAWTTextComponent;
f
TextListener
textListener
java/awt/TextComponent.html#textListener
TextListener textListener;
m
void
removeNotify
java/awt/TextComponent.html#removeNotify()
void removeNotify();
m
void
setText
java/awt/TextComponent.html#setText(java.lang.String)
void setText(String t);
m
String
getText
java/awt/TextComponent.html#getText()
String getText();
m
String
getSelectedText
java/awt/TextComponent.html#getSelectedText()
String getSelectedText();
m
boolean
isEditable
java/awt/TextComponent.html#isEditable()
boolean isEditable();
m
void
setEditable
java/awt/TextComponent.html#setEditable(boolean)
void setEditable(boolean b);
m
Color
getBackground
java/awt/TextComponent.html#getBackground()
Color getBackground();
m
void
setBackground
java/awt/TextComponent.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
int
getSelectionStart
java/awt/TextComponent.html#getSelectionStart()
int getSelectionStart();
m
void
setSelectionStart
java/awt/TextComponent.html#setSelectionStart(int)
void setSelectionStart(int selectionStart);
m
int
getSelectionEnd
java/awt/TextComponent.html#getSelectionEnd()
int getSelectionEnd();
m
void
setSelectionEnd
java/awt/TextComponent.html#setSelectionEnd(int)
void setSelectionEnd(int selectionEnd);
m
void
select
java/awt/TextComponent.html#select(int, int)
void select(int selectionStart, int selectionEnd);
m
void
selectAll
java/awt/TextComponent.html#selectAll()
void selectAll();
m
void
setCaretPosition
java/awt/TextComponent.html#setCaretPosition(int)
void setCaretPosition(int position);
m
int
getCaretPosition
java/awt/TextComponent.html#getCaretPosition()
int getCaretPosition();
m
void
addTextListener
java/awt/TextComponent.html#addTextListener(java.awt.event.TextListener)
void addTextListener(TextListener l);
m
void
removeTextListener
java/awt/TextComponent.html#removeTextListener(java.awt.event.TextListener)
void removeTextListener(TextListener l);
m
EventListener
getListeners
java/awt/TextComponent.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/TextComponent.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processTextEvent
java/awt/TextComponent.html#processTextEvent(java.awt.event.TextEvent)
void processTextEvent(TextEvent e);
m
String
paramString
java/awt/TextComponent.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/TextComponent.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
TextField
class TextField extends TextComponent;
TextComponent
java/awt/TextField.html
java.awt.TextField
c

TextField
java/awt/TextField.html
TextField();
TextField(String text);
TextField(int columns);
TextField(String text, int columns);
l
TextField.AccessibleAWTTextField
AccessibleAWTTextField
java/awt/TextField.AccessibleAWTTextField.html
inner class TextField.AccessibleAWTTextField;
m
void
addNotify
java/awt/TextField.html#addNotify()
void addNotify();
m
char
getEchoChar
java/awt/TextField.html#getEchoChar()
char getEchoChar();
m
void
setEchoChar
java/awt/TextField.html#setEchoChar(char)
void setEchoChar(char c);
m
void
setEchoCharacter
java/awt/TextField.html#setEchoCharacter(char)
void setEchoCharacter(char c);
m
void
setText
java/awt/TextField.html#setText(java.lang.String)
void setText(String t);
m
boolean
echoCharIsSet
java/awt/TextField.html#echoCharIsSet()
boolean echoCharIsSet();
m
int
getColumns
java/awt/TextField.html#getColumns()
int getColumns();
m
void
setColumns
java/awt/TextField.html#setColumns(int)
void setColumns(int columns);
m
Dimension
getPreferredSize
java/awt/TextField.html#getPreferredSize(int)
Dimension getPreferredSize(int columns);
m
Dimension
preferredSize
java/awt/TextField.html#preferredSize(int)
Dimension preferredSize(int columns);
m
Dimension
getPreferredSize
java/awt/TextField.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
preferredSize
java/awt/TextField.html#preferredSize()
Dimension preferredSize();
m
Dimension
getMinimumSize
java/awt/TextField.html#getMinimumSize(int)
Dimension getMinimumSize(int columns);
m
Dimension
minimumSize
java/awt/TextField.html#minimumSize(int)
Dimension minimumSize(int columns);
m
Dimension
getMinimumSize
java/awt/TextField.html#getMinimumSize()
Dimension getMinimumSize();
m
Dimension
minimumSize
java/awt/TextField.html#minimumSize()
Dimension minimumSize();
m
void
addActionListener
java/awt/TextField.html#addActionListener(java.awt.event.ActionListener)
void addActionListener(ActionListener l);
m
void
removeActionListener
java/awt/TextField.html#removeActionListener(java.awt.event.ActionListener)
void removeActionListener(ActionListener l);
m
EventListener
getListeners
java/awt/TextField.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/TextField.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processActionEvent
java/awt/TextField.html#processActionEvent(java.awt.event.ActionEvent)
void processActionEvent(ActionEvent e);
m
String
paramString
java/awt/TextField.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/TextField.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
TextComponent.AccessibleAWTTextComponent
class TextComponent.AccessibleAWTTextComponent extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/TextComponent.AccessibleAWTTextComponent.html
java.awt.TextComponent.AccessibleAWTTextComponent
c

TextComponent.AccessibleAWTTextComponent
java/awt/TextComponent.AccessibleAWTTextComponent.html
TextComponent.AccessibleAWTTextComponent(TextComponent this$0);
m
void
textValueChanged
java/awt/TextComponent.AccessibleAWTTextComponent.html#textValueChanged(java.awt.event.TextEvent)
void textValueChanged(TextEvent textEvent);
m
AccessibleStateSet
getAccessibleStateSet
java/awt/TextComponent.AccessibleAWTTextComponent.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
AccessibleRole
getAccessibleRole
java/awt/TextComponent.AccessibleAWTTextComponent.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleText
getAccessibleText
java/awt/TextComponent.AccessibleAWTTextComponent.html#getAccessibleText()
AccessibleText getAccessibleText();
m
int
getIndexAtPoint
java/awt/TextComponent.AccessibleAWTTextComponent.html#getIndexAtPoint(java.awt.Point)
int getIndexAtPoint(Point p);
m
Rectangle
getCharacterBounds
java/awt/TextComponent.AccessibleAWTTextComponent.html#getCharacterBounds(int)
Rectangle getCharacterBounds(int i);
m
int
getCharCount
java/awt/TextComponent.AccessibleAWTTextComponent.html#getCharCount()
int getCharCount();
m
int
getCaretPosition
java/awt/TextComponent.AccessibleAWTTextComponent.html#getCaretPosition()
int getCaretPosition();
m
AttributeSet
getCharacterAttribute
java/awt/TextComponent.AccessibleAWTTextComponent.html#getCharacterAttribute(int)
AttributeSet getCharacterAttribute(int i);
m
int
getSelectionStart
java/awt/TextComponent.AccessibleAWTTextComponent.html#getSelectionStart()
int getSelectionStart();
m
int
getSelectionEnd
java/awt/TextComponent.AccessibleAWTTextComponent.html#getSelectionEnd()
int getSelectionEnd();
m
String
getSelectedText
java/awt/TextComponent.AccessibleAWTTextComponent.html#getSelectedText()
String getSelectedText();
m
String
getAtIndex
java/awt/TextComponent.AccessibleAWTTextComponent.html#getAtIndex(int, int)
String getAtIndex(int part, int index);
m
String
getAfterIndex
java/awt/TextComponent.AccessibleAWTTextComponent.html#getAfterIndex(int, int)
String getAfterIndex(int part, int index);
m
String
getBeforeIndex
java/awt/TextComponent.AccessibleAWTTextComponent.html#getBeforeIndex(int, int)
String getBeforeIndex(int part, int index);
TextField.AccessibleAWTTextField
class TextField.AccessibleAWTTextField extends TextComponent.AccessibleAWTTextComponent;
TextComponent.AccessibleAWTTextComponent
java/awt/TextField.AccessibleAWTTextField.html
java.awt.TextField.AccessibleAWTTextField
c

TextField.AccessibleAWTTextField
java/awt/TextField.AccessibleAWTTextField.html
TextField.AccessibleAWTTextField(TextField this$0);
m
AccessibleStateSet
getAccessibleStateSet
java/awt/TextField.AccessibleAWTTextField.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
Button
class Button extends Component;
Component
java/awt/Button.html
java.awt.Button
c

Button
java/awt/Button.html
Button();
Button(String label);
l
Button.AccessibleAWTButton
AccessibleAWTButton
java/awt/Button.AccessibleAWTButton.html
inner class Button.AccessibleAWTButton;
m
void
addNotify
java/awt/Button.html#addNotify()
void addNotify();
m
String
getLabel
java/awt/Button.html#getLabel()
String getLabel();
m
void
setLabel
java/awt/Button.html#setLabel(java.lang.String)
void setLabel(String label);
m
void
setActionCommand
java/awt/Button.html#setActionCommand(java.lang.String)
void setActionCommand(String command);
m
String
getActionCommand
java/awt/Button.html#getActionCommand()
String getActionCommand();
m
void
addActionListener
java/awt/Button.html#addActionListener(java.awt.event.ActionListener)
void addActionListener(ActionListener l);
m
void
removeActionListener
java/awt/Button.html#removeActionListener(java.awt.event.ActionListener)
void removeActionListener(ActionListener l);
m
EventListener
getListeners
java/awt/Button.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Button.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processActionEvent
java/awt/Button.html#processActionEvent(java.awt.event.ActionEvent)
void processActionEvent(ActionEvent e);
m
String
paramString
java/awt/Button.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Button.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Button.AccessibleAWTButton
class Button.AccessibleAWTButton extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Button.AccessibleAWTButton.html
java.awt.Button.AccessibleAWTButton
c

Button.AccessibleAWTButton
java/awt/Button.AccessibleAWTButton.html
Button.AccessibleAWTButton(Button this$0);
m
String
getAccessibleName
java/awt/Button.AccessibleAWTButton.html#getAccessibleName()
String getAccessibleName();
m
AccessibleAction
getAccessibleAction
java/awt/Button.AccessibleAWTButton.html#getAccessibleAction()
AccessibleAction getAccessibleAction();
m
AccessibleValue
getAccessibleValue
java/awt/Button.AccessibleAWTButton.html#getAccessibleValue()
AccessibleValue getAccessibleValue();
m
int
getAccessibleActionCount
java/awt/Button.AccessibleAWTButton.html#getAccessibleActionCount()
int getAccessibleActionCount();
m
String
getAccessibleActionDescription
java/awt/Button.AccessibleAWTButton.html#getAccessibleActionDescription(int)
String getAccessibleActionDescription(int i);
m
boolean
doAccessibleAction
java/awt/Button.AccessibleAWTButton.html#doAccessibleAction(int)
boolean doAccessibleAction(int i);
m
Number
getCurrentAccessibleValue
java/awt/Button.AccessibleAWTButton.html#getCurrentAccessibleValue()
Number getCurrentAccessibleValue();
m
boolean
setCurrentAccessibleValue
java/awt/Button.AccessibleAWTButton.html#setCurrentAccessibleValue(java.lang.Number)
boolean setCurrentAccessibleValue(Number n);
m
Number
getMinimumAccessibleValue
java/awt/Button.AccessibleAWTButton.html#getMinimumAccessibleValue()
Number getMinimumAccessibleValue();
m
Number
getMaximumAccessibleValue
java/awt/Button.AccessibleAWTButton.html#getMaximumAccessibleValue()
Number getMaximumAccessibleValue();
m
AccessibleRole
getAccessibleRole
java/awt/Button.AccessibleAWTButton.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
Color
class Color extends Object;
Object
java/awt/Color.html
java.awt.Color
c

Color
java/awt/Color.html
Color(int r, int g, int b);
Color(int r, int g, int b, int a);
Color(int rgb);
Color(int rgba, boolean hasalpha);
Color(float r, float g, float b);
Color(float r, float g, float b, float a);
Color(ColorSpace cspace, float[] components, float alpha);
f
Color
white
java/awt/Color.html#white
Color white;
f
Color
lightGray
java/awt/Color.html#lightGray
Color lightGray;
f
Color
gray
java/awt/Color.html#gray
Color gray;
f
Color
darkGray
java/awt/Color.html#darkGray
Color darkGray;
f
Color
black
java/awt/Color.html#black
Color black;
f
Color
red
java/awt/Color.html#red
Color red;
f
Color
pink
java/awt/Color.html#pink
Color pink;
f
Color
orange
java/awt/Color.html#orange
Color orange;
f
Color
yellow
java/awt/Color.html#yellow
Color yellow;
f
Color
green
java/awt/Color.html#green
Color green;
f
Color
magenta
java/awt/Color.html#magenta
Color magenta;
f
Color
cyan
java/awt/Color.html#cyan
Color cyan;
f
Color
blue
java/awt/Color.html#blue
Color blue;
m
int
getRed
java/awt/Color.html#getRed()
int getRed();
m
int
getGreen
java/awt/Color.html#getGreen()
int getGreen();
m
int
getBlue
java/awt/Color.html#getBlue()
int getBlue();
m
int
getAlpha
java/awt/Color.html#getAlpha()
int getAlpha();
m
int
getRGB
java/awt/Color.html#getRGB()
int getRGB();
m
Color
brighter
java/awt/Color.html#brighter()
Color brighter();
m
Color
darker
java/awt/Color.html#darker()
Color darker();
m
int
hashCode
java/awt/Color.html#hashCode()
int hashCode();
m
boolean
equals
java/awt/Color.html#equals(java.lang.Object)
boolean equals(Object obj);
m
String
toString
java/awt/Color.html#toString()
String toString();
m
Color
decode
java/awt/Color.html#decode(java.lang.String)
Color decode(String nm) throws NumberFormatException;
m
Color
getColor
java/awt/Color.html#getColor(java.lang.String)
Color getColor(String nm);
Color getColor(String nm, Color v);
Color getColor(String nm, int v);
m
int
HSBtoRGB
java/awt/Color.html#HSBtoRGB(float, float, float)
int HSBtoRGB(float hue, float saturation, float brightness);
m
float
RGBtoHSB
java/awt/Color.html#RGBtoHSB(int, int, int, float[])
float[] RGBtoHSB(int r, int g, int b, float[] hsbvals);
m
Color
getHSBColor
java/awt/Color.html#getHSBColor(float, float, float)
Color getHSBColor(float h, float s, float b);
m
float
getRGBComponents
java/awt/Color.html#getRGBComponents(float[])
float[] getRGBComponents(float[] compArray);
m
float
getRGBColorComponents
java/awt/Color.html#getRGBColorComponents(float[])
float[] getRGBColorComponents(float[] compArray);
m
float
getComponents
java/awt/Color.html#getComponents(float[])
float[] getComponents(float[] compArray);
m
float
getColorComponents
java/awt/Color.html#getColorComponents(float[])
float[] getColorComponents(float[] compArray);
m
float
getComponents
java/awt/Color.html#getComponents(java.awt.color.ColorSpace, float[])
float[] getComponents(ColorSpace cspace, float[] compArray);
m
float
getColorComponents
java/awt/Color.html#getColorComponents(java.awt.color.ColorSpace, float[])
float[] getColorComponents(ColorSpace cspace, float[] compArray);
m
ColorSpace
getColorSpace
java/awt/Color.html#getColorSpace()
ColorSpace getColorSpace();
m
PaintContext
createContext
java/awt/Color.html#createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
PaintContext createContext(ColorModel cm, Rectangle r, Rectangle2D r2d, AffineTransform xform, RenderingHints hints);
m
int
getTransparency
java/awt/Color.html#getTransparency()
int getTransparency();
Container
class Container extends Component;
Component
java/awt/Container.html
java.awt.Container
c

Container
java/awt/Container.html
Container();
l
Container.AccessibleAWTContainer
AccessibleAWTContainer
java/awt/Container.AccessibleAWTContainer.html
inner class Container.AccessibleAWTContainer;
m
int
getComponentCount
java/awt/Container.html#getComponentCount()
int getComponentCount();
m
int
countComponents
java/awt/Container.html#countComponents()
int countComponents();
m
Component
getComponent
java/awt/Container.html#getComponent(int)
Component getComponent(int n);
m
Component
getComponents
java/awt/Container.html#getComponents()
Component[] getComponents();
m
Insets
getInsets
java/awt/Container.html#getInsets()
Insets getInsets();
m
Insets
insets
java/awt/Container.html#insets()
Insets insets();
m
Component
add
java/awt/Container.html#add(java.awt.Component)
Component add(Component comp);
Component add(String name, Component comp);
Component add(Component comp, int index);
void add(Component comp, Object constraints);
void add(Component comp, Object constraints, int index);
m
void
addImpl
java/awt/Container.html#addImpl(java.awt.Component, java.lang.Object, int)
void addImpl(Component comp, Object constraints, int index);
m
void
remove
java/awt/Container.html#remove(int)
void remove(int index);
void remove(Component comp);
m
void
removeAll
java/awt/Container.html#removeAll()
void removeAll();
m
LayoutManager
getLayout
java/awt/Container.html#getLayout()
LayoutManager getLayout();
m
void
setLayout
java/awt/Container.html#setLayout(java.awt.LayoutManager)
void setLayout(LayoutManager mgr);
m
void
doLayout
java/awt/Container.html#doLayout()
void doLayout();
m
void
layout
java/awt/Container.html#layout()
void layout();
m
void
invalidate
java/awt/Container.html#invalidate()
void invalidate();
m
void
validate
java/awt/Container.html#validate()
void validate();
m
void
validateTree
java/awt/Container.html#validateTree()
void validateTree();
m
void
setFont
java/awt/Container.html#setFont(java.awt.Font)
void setFont(Font f);
m
Dimension
getPreferredSize
java/awt/Container.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
preferredSize
java/awt/Container.html#preferredSize()
Dimension preferredSize();
m
Dimension
getMinimumSize
java/awt/Container.html#getMinimumSize()
Dimension getMinimumSize();
m
Dimension
minimumSize
java/awt/Container.html#minimumSize()
Dimension minimumSize();
m
Dimension
getMaximumSize
java/awt/Container.html#getMaximumSize()
Dimension getMaximumSize();
m
float
getAlignmentX
java/awt/Container.html#getAlignmentX()
float getAlignmentX();
m
float
getAlignmentY
java/awt/Container.html#getAlignmentY()
float getAlignmentY();
m
void
paint
java/awt/Container.html#paint(java.awt.Graphics)
void paint(Graphics g);
m
void
update
java/awt/Container.html#update(java.awt.Graphics)
void update(Graphics g);
m
void
print
java/awt/Container.html#print(java.awt.Graphics)
void print(Graphics g);
m
void
paintComponents
java/awt/Container.html#paintComponents(java.awt.Graphics)
void paintComponents(Graphics g);
m
void
printComponents
java/awt/Container.html#printComponents(java.awt.Graphics)
void printComponents(Graphics g);
m
void
addContainerListener
java/awt/Container.html#addContainerListener(java.awt.event.ContainerListener)
void addContainerListener(ContainerListener l);
m
void
removeContainerListener
java/awt/Container.html#removeContainerListener(java.awt.event.ContainerListener)
void removeContainerListener(ContainerListener l);
m
EventListener
getListeners
java/awt/Container.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Container.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processContainerEvent
java/awt/Container.html#processContainerEvent(java.awt.event.ContainerEvent)
void processContainerEvent(ContainerEvent e);
m
void
deliverEvent
java/awt/Container.html#deliverEvent(java.awt.Event)
void deliverEvent(Event e);
m
Component
getComponentAt
java/awt/Container.html#getComponentAt(int, int)
Component getComponentAt(int x, int y);
m
Component
locate
java/awt/Container.html#locate(int, int)
Component locate(int x, int y);
m
Component
getComponentAt
java/awt/Container.html#getComponentAt(java.awt.Point)
Component getComponentAt(Point p);
m
Component
findComponentAt
java/awt/Container.html#findComponentAt(int, int)
Component findComponentAt(int x, int y);
Component findComponentAt(Point p);
m
void
addNotify
java/awt/Container.html#addNotify()
void addNotify();
m
void
removeNotify
java/awt/Container.html#removeNotify()
void removeNotify();
m
boolean
isAncestorOf
java/awt/Container.html#isAncestorOf(java.awt.Component)
boolean isAncestorOf(Component c);
m
String
paramString
java/awt/Container.html#paramString()
String paramString();
m
void
list
java/awt/Container.html#list(java.io.PrintStream, int)
void list(PrintStream out, int indent);
void list(PrintWriter out, int indent);
ScrollPane
class ScrollPane extends Container;
Container
java/awt/ScrollPane.html
java.awt.ScrollPane
c

ScrollPane
java/awt/ScrollPane.html
ScrollPane();
ScrollPane(int scrollbarDisplayPolicy);
l
ScrollPane.AccessibleAWTScrollPane
AccessibleAWTScrollPane
java/awt/ScrollPane.AccessibleAWTScrollPane.html
inner class ScrollPane.AccessibleAWTScrollPane;
f
int
SCROLLBARS_AS_NEEDED
java/awt/ScrollPane.html#SCROLLBARS_AS_NEEDED
int SCROLLBARS_AS_NEEDED;
f
int
SCROLLBARS_ALWAYS
java/awt/ScrollPane.html#SCROLLBARS_ALWAYS
int SCROLLBARS_ALWAYS;
f
int
SCROLLBARS_NEVER
java/awt/ScrollPane.html#SCROLLBARS_NEVER
int SCROLLBARS_NEVER;
m
void
addImpl
java/awt/ScrollPane.html#addImpl(java.awt.Component, java.lang.Object, int)
void addImpl(Component comp, Object constraints, int index);
m
int
getScrollbarDisplayPolicy
java/awt/ScrollPane.html#getScrollbarDisplayPolicy()
int getScrollbarDisplayPolicy();
m
Dimension
getViewportSize
java/awt/ScrollPane.html#getViewportSize()
Dimension getViewportSize();
m
int
getHScrollbarHeight
java/awt/ScrollPane.html#getHScrollbarHeight()
int getHScrollbarHeight();
m
int
getVScrollbarWidth
java/awt/ScrollPane.html#getVScrollbarWidth()
int getVScrollbarWidth();
m
Adjustable
getVAdjustable
java/awt/ScrollPane.html#getVAdjustable()
Adjustable getVAdjustable();
m
Adjustable
getHAdjustable
java/awt/ScrollPane.html#getHAdjustable()
Adjustable getHAdjustable();
m
void
setScrollPosition
java/awt/ScrollPane.html#setScrollPosition(int, int)
void setScrollPosition(int x, int y);
void setScrollPosition(Point p);
m
Point
getScrollPosition
java/awt/ScrollPane.html#getScrollPosition()
Point getScrollPosition();
m
void
setLayout
java/awt/ScrollPane.html#setLayout(java.awt.LayoutManager)
void setLayout(LayoutManager mgr);
m
void
doLayout
java/awt/ScrollPane.html#doLayout()
void doLayout();
m
void
layout
java/awt/ScrollPane.html#layout()
void layout();
m
void
printComponents
java/awt/ScrollPane.html#printComponents(java.awt.Graphics)
void printComponents(Graphics g);
m
void
addNotify
java/awt/ScrollPane.html#addNotify()
void addNotify();
m
String
paramString
java/awt/ScrollPane.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/ScrollPane.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Container.AccessibleAWTContainer
class Container.AccessibleAWTContainer extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Container.AccessibleAWTContainer.html
java.awt.Container.AccessibleAWTContainer
c

Container.AccessibleAWTContainer
java/awt/Container.AccessibleAWTContainer.html
Container.AccessibleAWTContainer(Container this$0);
l
Container.AccessibleAWTContainer.AccessibleContainerHandler
AccessibleContainerHandler
java/awt/Container.AccessibleAWTContainer.AccessibleContainerHandler.html
inner class Container.AccessibleAWTContainer.AccessibleContainerHandler;
f
ContainerListener
accessibleContainerHandler
java/awt/Container.AccessibleAWTContainer.html#accessibleContainerHandler
ContainerListener accessibleContainerHandler;
m
int
getAccessibleChildrenCount
java/awt/Container.AccessibleAWTContainer.html#getAccessibleChildrenCount()
int getAccessibleChildrenCount();
m
Accessible
getAccessibleChild
java/awt/Container.AccessibleAWTContainer.html#getAccessibleChild(int)
Accessible getAccessibleChild(int i);
m
Accessible
getAccessibleAt
java/awt/Container.AccessibleAWTContainer.html#getAccessibleAt(java.awt.Point)
Accessible getAccessibleAt(Point p);
ScrollPane.AccessibleAWTScrollPane
class ScrollPane.AccessibleAWTScrollPane extends Container.AccessibleAWTContainer;
Container.AccessibleAWTContainer
java/awt/ScrollPane.AccessibleAWTScrollPane.html
java.awt.ScrollPane.AccessibleAWTScrollPane
c

ScrollPane.AccessibleAWTScrollPane
java/awt/ScrollPane.AccessibleAWTScrollPane.html
ScrollPane.AccessibleAWTScrollPane(ScrollPane this$0);
m
AccessibleRole
getAccessibleRole
java/awt/ScrollPane.AccessibleAWTScrollPane.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
Window
class Window extends Container;
Container
java/awt/Window.html
java.awt.Window
c

Window
java/awt/Window.html
Window(Frame owner);
Window(Window owner);
Window(Window owner, GraphicsConfiguration gc);
l
Window.AccessibleAWTWindow
AccessibleAWTWindow
java/awt/Window.AccessibleAWTWindow.html
inner class Window.AccessibleAWTWindow;
m
void
finalize
java/awt/Window.html#finalize()
void finalize() throws Throwable;
m
void
addNotify
java/awt/Window.html#addNotify()
void addNotify();
m
void
pack
java/awt/Window.html#pack()
void pack();
m
void
show
java/awt/Window.html#show()
void show();
m
void
hide
java/awt/Window.html#hide()
void hide();
m
void
dispose
java/awt/Window.html#dispose()
void dispose();
m
void
toFront
java/awt/Window.html#toFront()
void toFront();
m
void
toBack
java/awt/Window.html#toBack()
void toBack();
m
Toolkit
getToolkit
java/awt/Window.html#getToolkit()
Toolkit getToolkit();
m
String
getWarningString
java/awt/Window.html#getWarningString()
String getWarningString();
m
Locale
getLocale
java/awt/Window.html#getLocale()
Locale getLocale();
m
InputContext
getInputContext
java/awt/Window.html#getInputContext()
InputContext getInputContext();
m
void
setCursor
java/awt/Window.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
Window
getOwner
java/awt/Window.html#getOwner()
Window getOwner();
m
Window
getOwnedWindows
java/awt/Window.html#getOwnedWindows()
Window[] getOwnedWindows();
m
void
addWindowListener
java/awt/Window.html#addWindowListener(java.awt.event.WindowListener)
void addWindowListener(WindowListener l);
m
void
removeWindowListener
java/awt/Window.html#removeWindowListener(java.awt.event.WindowListener)
void removeWindowListener(WindowListener l);
m
EventListener
getListeners
java/awt/Window.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Window.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processWindowEvent
java/awt/Window.html#processWindowEvent(java.awt.event.WindowEvent)
void processWindowEvent(WindowEvent e);
m
Component
getFocusOwner
java/awt/Window.html#getFocusOwner()
Component getFocusOwner();
m
boolean
postEvent
java/awt/Window.html#postEvent(java.awt.Event)
boolean postEvent(Event e);
m
boolean
isShowing
java/awt/Window.html#isShowing()
boolean isShowing();
m
void
applyResourceBundle
java/awt/Window.html#applyResourceBundle(java.util.ResourceBundle)
void applyResourceBundle(ResourceBundle rb);
void applyResourceBundle(String rbName);
m
AccessibleContext
getAccessibleContext
java/awt/Window.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
m
GraphicsConfiguration
getGraphicsConfiguration
java/awt/Window.html#getGraphicsConfiguration()
GraphicsConfiguration getGraphicsConfiguration();
Window.AccessibleAWTWindow
class Window.AccessibleAWTWindow extends Container.AccessibleAWTContainer;
Container.AccessibleAWTContainer
java/awt/Window.AccessibleAWTWindow.html
java.awt.Window.AccessibleAWTWindow
c

Window.AccessibleAWTWindow
java/awt/Window.AccessibleAWTWindow.html
Window.AccessibleAWTWindow(Window this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Window.AccessibleAWTWindow.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Window.AccessibleAWTWindow.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
Font
class Font extends Object;
Object
java/awt/Font.html
java.awt.Font
c

Font
java/awt/Font.html
Font(String name, int style, int size);
Font(Map attributes);
f
int
PLAIN
java/awt/Font.html#PLAIN
int PLAIN;
f
int
BOLD
java/awt/Font.html#BOLD
int BOLD;
f
int
ITALIC
java/awt/Font.html#ITALIC
int ITALIC;
f
int
ROMAN_BASELINE
java/awt/Font.html#ROMAN_BASELINE
int ROMAN_BASELINE;
f
int
CENTER_BASELINE
java/awt/Font.html#CENTER_BASELINE
int CENTER_BASELINE;
f
int
HANGING_BASELINE
java/awt/Font.html#HANGING_BASELINE
int HANGING_BASELINE;
f
int
TRUETYPE_FONT
java/awt/Font.html#TRUETYPE_FONT
int TRUETYPE_FONT;
f
String
name
java/awt/Font.html#name
String name;
f
int
style
java/awt/Font.html#style
int style;
f
int
size
java/awt/Font.html#size
int size;
f
float
pointSize
java/awt/Font.html#pointSize
float pointSize;
m
FontPeer
getPeer
java/awt/Font.html#getPeer()
FontPeer getPeer();
m
Font
getFont
java/awt/Font.html#getFont(java.util.Map)
Font getFont(Map attributes);
m
Font
createFont
java/awt/Font.html#createFont(int, java.io.InputStream)
Font createFont(int fontFormat, InputStream fontStream) throws FontFormatException, IOException;
m
AffineTransform
getTransform
java/awt/Font.html#getTransform()
AffineTransform getTransform();
m
String
getFamily
java/awt/Font.html#getFamily()
String getFamily();
String getFamily(Locale l);
m
String
getPSName
java/awt/Font.html#getPSName()
String getPSName();
m
String
getName
java/awt/Font.html#getName()
String getName();
m
String
getFontName
java/awt/Font.html#getFontName()
String getFontName();
String getFontName(Locale l);
m
int
getStyle
java/awt/Font.html#getStyle()
int getStyle();
m
int
getSize
java/awt/Font.html#getSize()
int getSize();
m
float
getSize2D
java/awt/Font.html#getSize2D()
float getSize2D();
m
boolean
isPlain
java/awt/Font.html#isPlain()
boolean isPlain();
m
boolean
isBold
java/awt/Font.html#isBold()
boolean isBold();
m
boolean
isItalic
java/awt/Font.html#isItalic()
boolean isItalic();
m
Font
getFont
java/awt/Font.html#getFont(java.lang.String)
Font getFont(String nm);
m
Font
decode
java/awt/Font.html#decode(java.lang.String)
Font decode(String str);
m
Font
getFont
java/awt/Font.html#getFont(java.lang.String, java.awt.Font)
Font getFont(String nm, Font font);
m
int
hashCode
java/awt/Font.html#hashCode()
int hashCode();
m
boolean
equals
java/awt/Font.html#equals(java.lang.Object)
boolean equals(Object obj);
m
String
toString
java/awt/Font.html#toString()
String toString();
m
int
getNumGlyphs
java/awt/Font.html#getNumGlyphs()
int getNumGlyphs();
m
int
getMissingGlyphCode
java/awt/Font.html#getMissingGlyphCode()
int getMissingGlyphCode();
m
byte
getBaselineFor
java/awt/Font.html#getBaselineFor(char)
byte getBaselineFor(char c);
m
Map
getAttributes
java/awt/Font.html#getAttributes()
Map getAttributes();
m
AttributedCharacterIterator.Attribute
getAvailableAttributes
java/awt/Font.html#getAvailableAttributes()
AttributedCharacterIterator.Attribute[] getAvailableAttributes();
m
Font
deriveFont
java/awt/Font.html#deriveFont(int, float)
Font deriveFont(int style, float size);
Font deriveFont(int style, AffineTransform trans);
Font deriveFont(float size);
Font deriveFont(AffineTransform trans);
Font deriveFont(int style);
Font deriveFont(Map attributes);
m
boolean
canDisplay
java/awt/Font.html#canDisplay(char)
boolean canDisplay(char c);
m
int
canDisplayUpTo
java/awt/Font.html#canDisplayUpTo(java.lang.String)
int canDisplayUpTo(String str);
int canDisplayUpTo(char[] text, int start, int limit);
int canDisplayUpTo(CharacterIterator iter, int start, int limit);
m
float
getItalicAngle
java/awt/Font.html#getItalicAngle()
float getItalicAngle();
m
boolean
hasUniformLineMetrics
java/awt/Font.html#hasUniformLineMetrics()
boolean hasUniformLineMetrics();
m
LineMetrics
getLineMetrics
java/awt/Font.html#getLineMetrics(java.lang.String, java.awt.font.FontRenderContext)
LineMetrics getLineMetrics(String str, FontRenderContext frc);
LineMetrics getLineMetrics(String str, int beginIndex, int limit, FontRenderContext frc);
LineMetrics getLineMetrics(char[] chars, int beginIndex, int limit, FontRenderContext frc);
LineMetrics getLineMetrics(CharacterIterator ci, int beginIndex, int limit, FontRenderContext frc);
m
Rectangle2D
getStringBounds
java/awt/Font.html#getStringBounds(java.lang.String, java.awt.font.FontRenderContext)
Rectangle2D getStringBounds(String str, FontRenderContext frc);
Rectangle2D getStringBounds(String str, int beginIndex, int limit, FontRenderContext frc);
Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit, FontRenderContext frc);
Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex, int limit, FontRenderContext frc);
m
Rectangle2D
getMaxCharBounds
java/awt/Font.html#getMaxCharBounds(java.awt.font.FontRenderContext)
Rectangle2D getMaxCharBounds(FontRenderContext frc);
m
GlyphVector
createGlyphVector
java/awt/Font.html#createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)
GlyphVector createGlyphVector(FontRenderContext frc, String str);
GlyphVector createGlyphVector(FontRenderContext frc, char[] chars);
GlyphVector createGlyphVector(FontRenderContext frc, CharacterIterator ci);
GlyphVector createGlyphVector(FontRenderContext frc, int[] glyphCodes);
m
void
finalize
java/awt/Font.html#finalize()
void finalize() throws Throwable;
Rectangle
class Rectangle extends Rectangle2D;
Rectangle2D
java/awt/Rectangle.html
java.awt.Rectangle
c

Rectangle
java/awt/Rectangle.html
Rectangle();
Rectangle(Rectangle r);
Rectangle(int x, int y, int width, int height);
Rectangle(int width, int height);
Rectangle(Point p, Dimension d);
Rectangle(Point p);
Rectangle(Dimension d);
f
int
x
java/awt/Rectangle.html#x
int x;
f
int
y
java/awt/Rectangle.html#y
int y;
f
int
width
java/awt/Rectangle.html#width
int width;
f
int
height
java/awt/Rectangle.html#height
int height;
m
double
getX
java/awt/Rectangle.html#getX()
double getX();
m
double
getY
java/awt/Rectangle.html#getY()
double getY();
m
double
getWidth
java/awt/Rectangle.html#getWidth()
double getWidth();
m
double
getHeight
java/awt/Rectangle.html#getHeight()
double getHeight();
m
Rectangle
getBounds
java/awt/Rectangle.html#getBounds()
Rectangle getBounds();
m
Rectangle2D
getBounds2D
java/awt/Rectangle.html#getBounds2D()
Rectangle2D getBounds2D();
m
void
setBounds
java/awt/Rectangle.html#setBounds(java.awt.Rectangle)
void setBounds(Rectangle r);
void setBounds(int x, int y, int width, int height);
m
void
setRect
java/awt/Rectangle.html#setRect(double, double, double, double)
void setRect(double x, double y, double width, double height);
m
void
reshape
java/awt/Rectangle.html#reshape(int, int, int, int)
void reshape(int x, int y, int width, int height);
m
Point
getLocation
java/awt/Rectangle.html#getLocation()
Point getLocation();
m
void
setLocation
java/awt/Rectangle.html#setLocation(java.awt.Point)
void setLocation(Point p);
void setLocation(int x, int y);
m
void
move
java/awt/Rectangle.html#move(int, int)
void move(int x, int y);
m
void
translate
java/awt/Rectangle.html#translate(int, int)
void translate(int x, int y);
m
Dimension
getSize
java/awt/Rectangle.html#getSize()
Dimension getSize();
m
void
setSize
java/awt/Rectangle.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
void setSize(int width, int height);
m
void
resize
java/awt/Rectangle.html#resize(int, int)
void resize(int width, int height);
m
boolean
contains
java/awt/Rectangle.html#contains(java.awt.Point)
boolean contains(Point p);
boolean contains(int x, int y);
boolean contains(Rectangle r);
boolean contains(int X, int Y, int W, int H);
m
boolean
inside
java/awt/Rectangle.html#inside(int, int)
boolean inside(int x, int y);
m
boolean
intersects
java/awt/Rectangle.html#intersects(java.awt.Rectangle)
boolean intersects(Rectangle r);
m
Rectangle
intersection
java/awt/Rectangle.html#intersection(java.awt.Rectangle)
Rectangle intersection(Rectangle r);
m
Rectangle
union
java/awt/Rectangle.html#union(java.awt.Rectangle)
Rectangle union(Rectangle r);
m
void
add
java/awt/Rectangle.html#add(int, int)
void add(int newx, int newy);
void add(Point pt);
void add(Rectangle r);
m
void
grow
java/awt/Rectangle.html#grow(int, int)
void grow(int h, int v);
m
boolean
isEmpty
java/awt/Rectangle.html#isEmpty()
boolean isEmpty();
m
int
outcode
java/awt/Rectangle.html#outcode(double, double)
int outcode(double x, double y);
m
Rectangle2D
createIntersection
java/awt/Rectangle.html#createIntersection(java.awt.geom.Rectangle2D)
Rectangle2D createIntersection(Rectangle2D r);
m
Rectangle2D
createUnion
java/awt/Rectangle.html#createUnion(java.awt.geom.Rectangle2D)
Rectangle2D createUnion(Rectangle2D r);
m
boolean
equals
java/awt/Rectangle.html#equals(java.lang.Object)
boolean equals(Object obj);
m
String
toString
java/awt/Rectangle.html#toString()
String toString();
LayoutManager
class LayoutManager;

java/awt/LayoutManager.html
java.awt.LayoutManager
m
void
addLayoutComponent
java/awt/LayoutManager.html#addLayoutComponent(java.lang.String, java.awt.Component)
void addLayoutComponent(String name, Component comp);
m
void
removeLayoutComponent
java/awt/LayoutManager.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
preferredLayoutSize
java/awt/LayoutManager.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container parent);
m
Dimension
minimumLayoutSize
java/awt/LayoutManager.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container parent);
m
void
layoutContainer
java/awt/LayoutManager.html#layoutContainer(java.awt.Container)
void layoutContainer(Container parent);
List
class List extends Component;
Component
java/awt/List.html
java.awt.List
c

List
java/awt/List.html
List();
List(int rows);
List(int rows, boolean multipleMode);
l
List.AccessibleAWTList
AccessibleAWTList
java/awt/List.AccessibleAWTList.html
inner class List.AccessibleAWTList;
m
void
addNotify
java/awt/List.html#addNotify()
void addNotify();
m
void
removeNotify
java/awt/List.html#removeNotify()
void removeNotify();
m
int
getItemCount
java/awt/List.html#getItemCount()
int getItemCount();
m
int
countItems
java/awt/List.html#countItems()
int countItems();
m
String
getItem
java/awt/List.html#getItem(int)
String getItem(int index);
m
String
getItems
java/awt/List.html#getItems()
String[] getItems();
m
void
add
java/awt/List.html#add(java.lang.String)
void add(String item);
m
void
addItem
java/awt/List.html#addItem(java.lang.String)
void addItem(String item);
m
void
add
java/awt/List.html#add(java.lang.String, int)
void add(String item, int index);
m
void
addItem
java/awt/List.html#addItem(java.lang.String, int)
void addItem(String item, int index);
m
void
replaceItem
java/awt/List.html#replaceItem(java.lang.String, int)
void replaceItem(String newValue, int index);
m
void
removeAll
java/awt/List.html#removeAll()
void removeAll();
m
void
clear
java/awt/List.html#clear()
void clear();
m
void
remove
java/awt/List.html#remove(java.lang.String)
void remove(String item);
void remove(int position);
m
void
delItem
java/awt/List.html#delItem(int)
void delItem(int position);
m
int
getSelectedIndex
java/awt/List.html#getSelectedIndex()
int getSelectedIndex();
m
int
getSelectedIndexes
java/awt/List.html#getSelectedIndexes()
int[] getSelectedIndexes();
m
String
getSelectedItem
java/awt/List.html#getSelectedItem()
String getSelectedItem();
m
String
getSelectedItems
java/awt/List.html#getSelectedItems()
String[] getSelectedItems();
m
Object
getSelectedObjects
java/awt/List.html#getSelectedObjects()
Object[] getSelectedObjects();
m
void
select
java/awt/List.html#select(int)
void select(int index);
m
void
deselect
java/awt/List.html#deselect(int)
void deselect(int index);
m
boolean
isIndexSelected
java/awt/List.html#isIndexSelected(int)
boolean isIndexSelected(int index);
m
boolean
isSelected
java/awt/List.html#isSelected(int)
boolean isSelected(int index);
m
int
getRows
java/awt/List.html#getRows()
int getRows();
m
boolean
isMultipleMode
java/awt/List.html#isMultipleMode()
boolean isMultipleMode();
m
boolean
allowsMultipleSelections
java/awt/List.html#allowsMultipleSelections()
boolean allowsMultipleSelections();
m
void
setMultipleMode
java/awt/List.html#setMultipleMode(boolean)
void setMultipleMode(boolean b);
m
void
setMultipleSelections
java/awt/List.html#setMultipleSelections(boolean)
void setMultipleSelections(boolean b);
m
int
getVisibleIndex
java/awt/List.html#getVisibleIndex()
int getVisibleIndex();
m
void
makeVisible
java/awt/List.html#makeVisible(int)
void makeVisible(int index);
m
Dimension
getPreferredSize
java/awt/List.html#getPreferredSize(int)
Dimension getPreferredSize(int rows);
m
Dimension
preferredSize
java/awt/List.html#preferredSize(int)
Dimension preferredSize(int rows);
m
Dimension
getPreferredSize
java/awt/List.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
preferredSize
java/awt/List.html#preferredSize()
Dimension preferredSize();
m
Dimension
getMinimumSize
java/awt/List.html#getMinimumSize(int)
Dimension getMinimumSize(int rows);
m
Dimension
minimumSize
java/awt/List.html#minimumSize(int)
Dimension minimumSize(int rows);
m
Dimension
getMinimumSize
java/awt/List.html#getMinimumSize()
Dimension getMinimumSize();
m
Dimension
minimumSize
java/awt/List.html#minimumSize()
Dimension minimumSize();
m
void
addItemListener
java/awt/List.html#addItemListener(java.awt.event.ItemListener)
void addItemListener(ItemListener l);
m
void
removeItemListener
java/awt/List.html#removeItemListener(java.awt.event.ItemListener)
void removeItemListener(ItemListener l);
m
void
addActionListener
java/awt/List.html#addActionListener(java.awt.event.ActionListener)
void addActionListener(ActionListener l);
m
void
removeActionListener
java/awt/List.html#removeActionListener(java.awt.event.ActionListener)
void removeActionListener(ActionListener l);
m
EventListener
getListeners
java/awt/List.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/List.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processItemEvent
java/awt/List.html#processItemEvent(java.awt.event.ItemEvent)
void processItemEvent(ItemEvent e);
m
void
processActionEvent
java/awt/List.html#processActionEvent(java.awt.event.ActionEvent)
void processActionEvent(ActionEvent e);
m
String
paramString
java/awt/List.html#paramString()
String paramString();
m
void
delItems
java/awt/List.html#delItems(int, int)
void delItems(int start, int end);
m
AccessibleContext
getAccessibleContext
java/awt/List.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
List.AccessibleAWTList
class List.AccessibleAWTList extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/List.AccessibleAWTList.html
java.awt.List.AccessibleAWTList
c

List.AccessibleAWTList
java/awt/List.AccessibleAWTList.html
List.AccessibleAWTList(List this$0);
l
List.AccessibleAWTList.AccessibleAWTListChild
AccessibleAWTListChild
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html
inner class List.AccessibleAWTList.AccessibleAWTListChild;
m
void
actionPerformed
java/awt/List.AccessibleAWTList.html#actionPerformed(java.awt.event.ActionEvent)
void actionPerformed(ActionEvent event);
m
void
itemStateChanged
java/awt/List.AccessibleAWTList.html#itemStateChanged(java.awt.event.ItemEvent)
void itemStateChanged(ItemEvent event);
m
AccessibleStateSet
getAccessibleStateSet
java/awt/List.AccessibleAWTList.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
AccessibleRole
getAccessibleRole
java/awt/List.AccessibleAWTList.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
Accessible
getAccessibleAt
java/awt/List.AccessibleAWTList.html#getAccessibleAt(java.awt.Point)
Accessible getAccessibleAt(Point p);
m
int
getAccessibleChildrenCount
java/awt/List.AccessibleAWTList.html#getAccessibleChildrenCount()
int getAccessibleChildrenCount();
m
Accessible
getAccessibleChild
java/awt/List.AccessibleAWTList.html#getAccessibleChild(int)
Accessible getAccessibleChild(int i);
m
AccessibleSelection
getAccessibleSelection
java/awt/List.AccessibleAWTList.html#getAccessibleSelection()
AccessibleSelection getAccessibleSelection();
m
int
getAccessibleSelectionCount
java/awt/List.AccessibleAWTList.html#getAccessibleSelectionCount()
int getAccessibleSelectionCount();
m
Accessible
getAccessibleSelection
java/awt/List.AccessibleAWTList.html#getAccessibleSelection(int)
Accessible getAccessibleSelection(int i);
m
boolean
isAccessibleChildSelected
java/awt/List.AccessibleAWTList.html#isAccessibleChildSelected(int)
boolean isAccessibleChildSelected(int i);
m
void
addAccessibleSelection
java/awt/List.AccessibleAWTList.html#addAccessibleSelection(int)
void addAccessibleSelection(int i);
m
void
removeAccessibleSelection
java/awt/List.AccessibleAWTList.html#removeAccessibleSelection(int)
void removeAccessibleSelection(int i);
m
void
clearAccessibleSelection
java/awt/List.AccessibleAWTList.html#clearAccessibleSelection()
void clearAccessibleSelection();
m
void
selectAllAccessibleSelection
java/awt/List.AccessibleAWTList.html#selectAllAccessibleSelection()
void selectAllAccessibleSelection();
List.AccessibleAWTList.AccessibleAWTListChild
class List.AccessibleAWTList.AccessibleAWTListChild extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html
java.awt.List.AccessibleAWTList.AccessibleAWTListChild
c

List.AccessibleAWTList.AccessibleAWTListChild
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html
List.AccessibleAWTList.AccessibleAWTListChild(List.AccessibleAWTList this$1, List parent, int indexInParent);
m
AccessibleContext
getAccessibleContext
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
m
AccessibleRole
getAccessibleRole
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
Locale
getLocale
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getLocale()
Locale getLocale();
m
int
getAccessibleIndexInParent
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleIndexInParent()
int getAccessibleIndexInParent();
m
int
getAccessibleChildrenCount
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleChildrenCount()
int getAccessibleChildrenCount();
m
Accessible
getAccessibleChild
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleChild(int)
Accessible getAccessibleChild(int i);
m
Color
getBackground
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getBackground()
Color getBackground();
m
void
setBackground
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
Color
getForeground
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getForeground()
Color getForeground();
m
void
setForeground
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setForeground(java.awt.Color)
void setForeground(Color c);
m
Cursor
getCursor
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getCursor()
Cursor getCursor();
m
void
setCursor
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
Font
getFont
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getFont()
Font getFont();
m
void
setFont
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setFont(java.awt.Font)
void setFont(Font f);
m
FontMetrics
getFontMetrics
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font f);
m
boolean
isEnabled
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#isEnabled()
boolean isEnabled();
m
void
setEnabled
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setEnabled(boolean)
void setEnabled(boolean b);
m
boolean
isVisible
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#isVisible()
boolean isVisible();
m
void
setVisible
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setVisible(boolean)
void setVisible(boolean b);
m
boolean
isShowing
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#isShowing()
boolean isShowing();
m
boolean
contains
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#contains(java.awt.Point)
boolean contains(Point p);
m
Point
getLocationOnScreen
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getLocationOnScreen()
Point getLocationOnScreen();
m
Point
getLocation
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getLocation()
Point getLocation();
m
void
setLocation
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setLocation(java.awt.Point)
void setLocation(Point p);
m
Rectangle
getBounds
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getBounds()
Rectangle getBounds();
m
void
setBounds
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setBounds(java.awt.Rectangle)
void setBounds(Rectangle r);
m
Dimension
getSize
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getSize()
Dimension getSize();
m
void
setSize
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
m
Accessible
getAccessibleAt
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#getAccessibleAt(java.awt.Point)
Accessible getAccessibleAt(Point p);
m
boolean
isFocusTraversable
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#isFocusTraversable()
boolean isFocusTraversable();
m
void
requestFocus
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#requestFocus()
void requestFocus();
m
void
addFocusListener
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#addFocusListener(java.awt.event.FocusListener)
void addFocusListener(FocusListener l);
m
void
removeFocusListener
java/awt/List.AccessibleAWTList.AccessibleAWTListChild.html#removeFocusListener(java.awt.event.FocusListener)
void removeFocusListener(FocusListener l);
GradientPaint
class GradientPaint extends Object;
Object
java/awt/GradientPaint.html
java.awt.GradientPaint
c

GradientPaint
java/awt/GradientPaint.html
GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2);
GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2);
GradientPaint(float x1, float y1, Color color1, float x2, float y2, Color color2, boolean cyclic);
GradientPaint(Point2D pt1, Color color1, Point2D pt2, Color color2, boolean cyclic);
m
Point2D
getPoint1
java/awt/GradientPaint.html#getPoint1()
Point2D getPoint1();
m
Color
getColor1
java/awt/GradientPaint.html#getColor1()
Color getColor1();
m
Point2D
getPoint2
java/awt/GradientPaint.html#getPoint2()
Point2D getPoint2();
m
Color
getColor2
java/awt/GradientPaint.html#getColor2()
Color getColor2();
m
boolean
isCyclic
java/awt/GradientPaint.html#isCyclic()
boolean isCyclic();
m
PaintContext
createContext
java/awt/GradientPaint.html#createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints);
m
int
getTransparency
java/awt/GradientPaint.html#getTransparency()
int getTransparency();
Graphics
class Graphics extends Object;
Object
java/awt/Graphics.html
java.awt.Graphics
c

Graphics
java/awt/Graphics.html
Graphics();
m
Graphics
create
java/awt/Graphics.html#create()
Graphics create();
Graphics create(int x, int y, int width, int height);
m
void
translate
java/awt/Graphics.html#translate(int, int)
void translate(int x, int y);
m
Color
getColor
java/awt/Graphics.html#getColor()
Color getColor();
m
void
setColor
java/awt/Graphics.html#setColor(java.awt.Color)
void setColor(Color c);
m
void
setPaintMode
java/awt/Graphics.html#setPaintMode()
void setPaintMode();
m
void
setXORMode
java/awt/Graphics.html#setXORMode(java.awt.Color)
void setXORMode(Color c1);
m
Font
getFont
java/awt/Graphics.html#getFont()
Font getFont();
m
void
setFont
java/awt/Graphics.html#setFont(java.awt.Font)
void setFont(Font font);
m
FontMetrics
getFontMetrics
java/awt/Graphics.html#getFontMetrics()
FontMetrics getFontMetrics();
FontMetrics getFontMetrics(Font f);
m
Rectangle
getClipBounds
java/awt/Graphics.html#getClipBounds()
Rectangle getClipBounds();
m
void
clipRect
java/awt/Graphics.html#clipRect(int, int, int, int)
void clipRect(int x, int y, int width, int height);
m
void
setClip
java/awt/Graphics.html#setClip(int, int, int, int)
void setClip(int x, int y, int width, int height);
m
Shape
getClip
java/awt/Graphics.html#getClip()
Shape getClip();
m
void
setClip
java/awt/Graphics.html#setClip(java.awt.Shape)
void setClip(Shape clip);
m
void
copyArea
java/awt/Graphics.html#copyArea(int, int, int, int, int, int)
void copyArea(int x, int y, int width, int height, int dx, int dy);
m
void
drawLine
java/awt/Graphics.html#drawLine(int, int, int, int)
void drawLine(int x1, int y1, int x2, int y2);
m
void
fillRect
java/awt/Graphics.html#fillRect(int, int, int, int)
void fillRect(int x, int y, int width, int height);
m
void
drawRect
java/awt/Graphics.html#drawRect(int, int, int, int)
void drawRect(int x, int y, int width, int height);
m
void
clearRect
java/awt/Graphics.html#clearRect(int, int, int, int)
void clearRect(int x, int y, int width, int height);
m
void
drawRoundRect
java/awt/Graphics.html#drawRoundRect(int, int, int, int, int, int)
void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight);
m
void
fillRoundRect
java/awt/Graphics.html#fillRoundRect(int, int, int, int, int, int)
void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight);
m
void
draw3DRect
java/awt/Graphics.html#draw3DRect(int, int, int, int, boolean)
void draw3DRect(int x, int y, int width, int height, boolean raised);
m
void
fill3DRect
java/awt/Graphics.html#fill3DRect(int, int, int, int, boolean)
void fill3DRect(int x, int y, int width, int height, boolean raised);
m
void
drawOval
java/awt/Graphics.html#drawOval(int, int, int, int)
void drawOval(int x, int y, int width, int height);
m
void
fillOval
java/awt/Graphics.html#fillOval(int, int, int, int)
void fillOval(int x, int y, int width, int height);
m
void
drawArc
java/awt/Graphics.html#drawArc(int, int, int, int, int, int)
void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle);
m
void
fillArc
java/awt/Graphics.html#fillArc(int, int, int, int, int, int)
void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle);
m
void
drawPolyline
java/awt/Graphics.html#drawPolyline(int[], int[], int)
void drawPolyline(int[] xPoints, int[] yPoints, int nPoints);
m
void
drawPolygon
java/awt/Graphics.html#drawPolygon(int[], int[], int)
void drawPolygon(int[] xPoints, int[] yPoints, int nPoints);
void drawPolygon(Polygon p);
m
void
fillPolygon
java/awt/Graphics.html#fillPolygon(int[], int[], int)
void fillPolygon(int[] xPoints, int[] yPoints, int nPoints);
void fillPolygon(Polygon p);
m
void
drawString
java/awt/Graphics.html#drawString(java.lang.String, int, int)
void drawString(String str, int x, int y);
void drawString(AttributedCharacterIterator iterator, int x, int y);
m
void
drawChars
java/awt/Graphics.html#drawChars(char[], int, int, int, int)
void drawChars(char[] data, int offset, int length, int x, int y);
m
void
drawBytes
java/awt/Graphics.html#drawBytes(byte[], int, int, int, int)
void drawBytes(byte[] data, int offset, int length, int x, int y);
m
boolean
drawImage
java/awt/Graphics.html#drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
boolean drawImage(Image img, int x, int y, ImageObserver observer);
boolean drawImage(Image img, int x, int y, int width, int height, ImageObserver observer);
boolean drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer);
boolean drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer);
boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer);
boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer);
m
void
dispose
java/awt/Graphics.html#dispose()
void dispose();
m
void
finalize
java/awt/Graphics.html#finalize()
void finalize();
m
String
toString
java/awt/Graphics.html#toString()
String toString();
m
Rectangle
getClipRect
java/awt/Graphics.html#getClipRect()
Rectangle getClipRect();
m
boolean
hitClip
java/awt/Graphics.html#hitClip(int, int, int, int)
boolean hitClip(int x, int y, int width, int height);
m
Rectangle
getClipBounds
java/awt/Graphics.html#getClipBounds(java.awt.Rectangle)
Rectangle getClipBounds(Rectangle r);
Graphics2D
class Graphics2D extends Graphics;
Graphics
java/awt/Graphics2D.html
java.awt.Graphics2D
c

Graphics2D
java/awt/Graphics2D.html
Graphics2D();
m
void
draw3DRect
java/awt/Graphics2D.html#draw3DRect(int, int, int, int, boolean)
void draw3DRect(int x, int y, int width, int height, boolean raised);
m
void
fill3DRect
java/awt/Graphics2D.html#fill3DRect(int, int, int, int, boolean)
void fill3DRect(int x, int y, int width, int height, boolean raised);
m
void
draw
java/awt/Graphics2D.html#draw(java.awt.Shape)
void draw(Shape s);
m
boolean
drawImage
java/awt/Graphics2D.html#drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
boolean drawImage(Image img, AffineTransform xform, ImageObserver obs);
void drawImage(BufferedImage img, BufferedImageOp op, int x, int y);
m
void
drawRenderedImage
java/awt/Graphics2D.html#drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
void drawRenderedImage(RenderedImage img, AffineTransform xform);
m
void
drawRenderableImage
java/awt/Graphics2D.html#drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
void drawRenderableImage(RenderableImage img, AffineTransform xform);
m
void
drawString
java/awt/Graphics2D.html#drawString(java.lang.String, int, int)
void drawString(String str, int x, int y);
void drawString(String s, float x, float y);
void drawString(AttributedCharacterIterator iterator, int x, int y);
void drawString(AttributedCharacterIterator iterator, float x, float y);
m
void
drawGlyphVector
java/awt/Graphics2D.html#drawGlyphVector(java.awt.font.GlyphVector, float, float)
void drawGlyphVector(GlyphVector g, float x, float y);
m
void
fill
java/awt/Graphics2D.html#fill(java.awt.Shape)
void fill(Shape s);
m
boolean
hit
java/awt/Graphics2D.html#hit(java.awt.Rectangle, java.awt.Shape, boolean)
boolean hit(Rectangle rect, Shape s, boolean onStroke);
m
GraphicsConfiguration
getDeviceConfiguration
java/awt/Graphics2D.html#getDeviceConfiguration()
GraphicsConfiguration getDeviceConfiguration();
m
void
setComposite
java/awt/Graphics2D.html#setComposite(java.awt.Composite)
void setComposite(Composite comp);
m
void
setPaint
java/awt/Graphics2D.html#setPaint(java.awt.Paint)
void setPaint(Paint paint);
m
void
setStroke
java/awt/Graphics2D.html#setStroke(java.awt.Stroke)
void setStroke(Stroke s);
m
void
setRenderingHint
java/awt/Graphics2D.html#setRenderingHint(java.awt.RenderingHints.Key, java.lang.Object)
void setRenderingHint(RenderingHints.Key hintKey, Object hintValue);
m
Object
getRenderingHint
java/awt/Graphics2D.html#getRenderingHint(java.awt.RenderingHints.Key)
Object getRenderingHint(RenderingHints.Key hintKey);
m
void
setRenderingHints
java/awt/Graphics2D.html#setRenderingHints(java.util.Map)
void setRenderingHints(Map hints);
m
void
addRenderingHints
java/awt/Graphics2D.html#addRenderingHints(java.util.Map)
void addRenderingHints(Map hints);
m
RenderingHints
getRenderingHints
java/awt/Graphics2D.html#getRenderingHints()
RenderingHints getRenderingHints();
m
void
translate
java/awt/Graphics2D.html#translate(int, int)
void translate(int x, int y);
void translate(double tx, double ty);
m
void
rotate
java/awt/Graphics2D.html#rotate(double)
void rotate(double theta);
void rotate(double theta, double x, double y);
m
void
scale
java/awt/Graphics2D.html#scale(double, double)
void scale(double sx, double sy);
m
void
shear
java/awt/Graphics2D.html#shear(double, double)
void shear(double shx, double shy);
m
void
transform
java/awt/Graphics2D.html#transform(java.awt.geom.AffineTransform)
void transform(AffineTransform Tx);
m
void
setTransform
java/awt/Graphics2D.html#setTransform(java.awt.geom.AffineTransform)
void setTransform(AffineTransform Tx);
m
AffineTransform
getTransform
java/awt/Graphics2D.html#getTransform()
AffineTransform getTransform();
m
Paint
getPaint
java/awt/Graphics2D.html#getPaint()
Paint getPaint();
m
Composite
getComposite
java/awt/Graphics2D.html#getComposite()
Composite getComposite();
m
void
setBackground
java/awt/Graphics2D.html#setBackground(java.awt.Color)
void setBackground(Color color);
m
Color
getBackground
java/awt/Graphics2D.html#getBackground()
Color getBackground();
m
Stroke
getStroke
java/awt/Graphics2D.html#getStroke()
Stroke getStroke();
m
void
clip
java/awt/Graphics2D.html#clip(java.awt.Shape)
void clip(Shape s);
m
FontRenderContext
getFontRenderContext
java/awt/Graphics2D.html#getFontRenderContext()
FontRenderContext getFontRenderContext();
Panel
class Panel extends Container;
Container
java/awt/Panel.html
java.awt.Panel
c

Panel
java/awt/Panel.html
Panel();
Panel(LayoutManager layout);
l
Panel.AccessibleAWTPanel
AccessibleAWTPanel
java/awt/Panel.AccessibleAWTPanel.html
inner class Panel.AccessibleAWTPanel;
m
void
addNotify
java/awt/Panel.html#addNotify()
void addNotify();
m
AccessibleContext
getAccessibleContext
java/awt/Panel.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Panel.AccessibleAWTPanel
class Panel.AccessibleAWTPanel extends Container.AccessibleAWTContainer;
Container.AccessibleAWTContainer
java/awt/Panel.AccessibleAWTPanel.html
java.awt.Panel.AccessibleAWTPanel
c

Panel.AccessibleAWTPanel
java/awt/Panel.AccessibleAWTPanel.html
Panel.AccessibleAWTPanel(Panel this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Panel.AccessibleAWTPanel.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
BasicStroke
class BasicStroke extends Object;
Object
java/awt/BasicStroke.html
java.awt.BasicStroke
c

BasicStroke
java/awt/BasicStroke.html
BasicStroke(float width, int cap, int join, float miterlimit, float[] dash, float dash_phase);
BasicStroke(float width, int cap, int join, float miterlimit);
BasicStroke(float width, int cap, int join);
BasicStroke(float width);
BasicStroke();
f
int
JOIN_MITER
java/awt/BasicStroke.html#JOIN_MITER
int JOIN_MITER;
f
int
JOIN_ROUND
java/awt/BasicStroke.html#JOIN_ROUND
int JOIN_ROUND;
f
int
JOIN_BEVEL
java/awt/BasicStroke.html#JOIN_BEVEL
int JOIN_BEVEL;
f
int
CAP_BUTT
java/awt/BasicStroke.html#CAP_BUTT
int CAP_BUTT;
f
int
CAP_ROUND
java/awt/BasicStroke.html#CAP_ROUND
int CAP_ROUND;
f
int
CAP_SQUARE
java/awt/BasicStroke.html#CAP_SQUARE
int CAP_SQUARE;
m
Shape
createStrokedShape
java/awt/BasicStroke.html#createStrokedShape(java.awt.Shape)
Shape createStrokedShape(Shape s);
m
float
getLineWidth
java/awt/BasicStroke.html#getLineWidth()
float getLineWidth();
m
int
getEndCap
java/awt/BasicStroke.html#getEndCap()
int getEndCap();
m
int
getLineJoin
java/awt/BasicStroke.html#getLineJoin()
int getLineJoin();
m
float
getMiterLimit
java/awt/BasicStroke.html#getMiterLimit()
float getMiterLimit();
m
float
getDashArray
java/awt/BasicStroke.html#getDashArray()
float[] getDashArray();
m
float
getDashPhase
java/awt/BasicStroke.html#getDashPhase()
float getDashPhase();
m
int
hashCode
java/awt/BasicStroke.html#hashCode()
int hashCode();
m
boolean
equals
java/awt/BasicStroke.html#equals(java.lang.Object)
boolean equals(Object obj);
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
class Component.AccessibleAWTComponent.AccessibleAWTComponentHandler extends Object;
Object
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html
java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
c

Component.AccessibleAWTComponent.AccessibleAWTComponentHandler
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html
Component.AccessibleAWTComponent.AccessibleAWTComponentHandler(Component.AccessibleAWTComponent this$1);
m
void
componentHidden
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html#componentHidden(java.awt.event.ComponentEvent)
void componentHidden(ComponentEvent e);
m
void
componentShown
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html#componentShown(java.awt.event.ComponentEvent)
void componentShown(ComponentEvent e);
m
void
componentMoved
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html#componentMoved(java.awt.event.ComponentEvent)
void componentMoved(ComponentEvent e);
m
void
componentResized
java/awt/Component.AccessibleAWTComponent.AccessibleAWTComponentHandler.html#componentResized(java.awt.event.ComponentEvent)
void componentResized(ComponentEvent e);
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
class Component.AccessibleAWTComponent.AccessibleAWTFocusHandler extends Object;
Object
java/awt/Component.AccessibleAWTComponent.AccessibleAWTFocusHandler.html
java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
c

Component.AccessibleAWTComponent.AccessibleAWTFocusHandler
java/awt/Component.AccessibleAWTComponent.AccessibleAWTFocusHandler.html
Component.AccessibleAWTComponent.AccessibleAWTFocusHandler(Component.AccessibleAWTComponent this$1);
m
void
focusGained
java/awt/Component.AccessibleAWTComponent.AccessibleAWTFocusHandler.html#focusGained(java.awt.event.FocusEvent)
void focusGained(FocusEvent event);
m
void
focusLost
java/awt/Component.AccessibleAWTComponent.AccessibleAWTFocusHandler.html#focusLost(java.awt.event.FocusEvent)
void focusLost(FocusEvent event);
GraphicsDevice
class GraphicsDevice extends Object;
Object
java/awt/GraphicsDevice.html
java.awt.GraphicsDevice
c

GraphicsDevice
java/awt/GraphicsDevice.html
GraphicsDevice();
f
int
TYPE_RASTER_SCREEN
java/awt/GraphicsDevice.html#TYPE_RASTER_SCREEN
int TYPE_RASTER_SCREEN;
f
int
TYPE_PRINTER
java/awt/GraphicsDevice.html#TYPE_PRINTER
int TYPE_PRINTER;
f
int
TYPE_IMAGE_BUFFER
java/awt/GraphicsDevice.html#TYPE_IMAGE_BUFFER
int TYPE_IMAGE_BUFFER;
m
int
getType
java/awt/GraphicsDevice.html#getType()
int getType();
m
String
getIDstring
java/awt/GraphicsDevice.html#getIDstring()
String getIDstring();
m
GraphicsConfiguration
getConfigurations
java/awt/GraphicsDevice.html#getConfigurations()
GraphicsConfiguration[] getConfigurations();
m
GraphicsConfiguration
getDefaultConfiguration
java/awt/GraphicsDevice.html#getDefaultConfiguration()
GraphicsConfiguration getDefaultConfiguration();
m
GraphicsConfiguration
getBestConfiguration
java/awt/GraphicsDevice.html#getBestConfiguration(java.awt.GraphicsConfigTemplate)
GraphicsConfiguration getBestConfiguration(GraphicsConfigTemplate gct);
AWTException
class AWTException extends Exception;
Exception
java/awt/AWTException.html
java.awt.AWTException
c

AWTException
java/awt/AWTException.html
AWTException(String msg);
GridBagConstraints
class GridBagConstraints extends Object;
Object
java/awt/GridBagConstraints.html
java.awt.GridBagConstraints
c

GridBagConstraints
java/awt/GridBagConstraints.html
GridBagConstraints();
GridBagConstraints(int gridx, int gridy, int gridwidth, int gridheight, double weightx, double weighty, int anchor, int fill, Insets insets, int ipadx, int ipady);
f
int
RELATIVE
java/awt/GridBagConstraints.html#RELATIVE
int RELATIVE;
f
int
REMAINDER
java/awt/GridBagConstraints.html#REMAINDER
int REMAINDER;
f
int
NONE
java/awt/GridBagConstraints.html#NONE
int NONE;
f
int
BOTH
java/awt/GridBagConstraints.html#BOTH
int BOTH;
f
int
HORIZONTAL
java/awt/GridBagConstraints.html#HORIZONTAL
int HORIZONTAL;
f
int
VERTICAL
java/awt/GridBagConstraints.html#VERTICAL
int VERTICAL;
f
int
CENTER
java/awt/GridBagConstraints.html#CENTER
int CENTER;
f
int
NORTH
java/awt/GridBagConstraints.html#NORTH
int NORTH;
f
int
NORTHEAST
java/awt/GridBagConstraints.html#NORTHEAST
int NORTHEAST;
f
int
EAST
java/awt/GridBagConstraints.html#EAST
int EAST;
f
int
SOUTHEAST
java/awt/GridBagConstraints.html#SOUTHEAST
int SOUTHEAST;
f
int
SOUTH
java/awt/GridBagConstraints.html#SOUTH
int SOUTH;
f
int
SOUTHWEST
java/awt/GridBagConstraints.html#SOUTHWEST
int SOUTHWEST;
f
int
WEST
java/awt/GridBagConstraints.html#WEST
int WEST;
f
int
NORTHWEST
java/awt/GridBagConstraints.html#NORTHWEST
int NORTHWEST;
f
int
gridx
java/awt/GridBagConstraints.html#gridx
int gridx;
f
int
gridy
java/awt/GridBagConstraints.html#gridy
int gridy;
f
int
gridwidth
java/awt/GridBagConstraints.html#gridwidth
int gridwidth;
f
int
gridheight
java/awt/GridBagConstraints.html#gridheight
int gridheight;
f
double
weightx
java/awt/GridBagConstraints.html#weightx
double weightx;
f
double
weighty
java/awt/GridBagConstraints.html#weighty
double weighty;
f
int
anchor
java/awt/GridBagConstraints.html#anchor
int anchor;
f
int
fill
java/awt/GridBagConstraints.html#fill
int fill;
f
Insets
insets
java/awt/GridBagConstraints.html#insets
Insets insets;
f
int
ipadx
java/awt/GridBagConstraints.html#ipadx
int ipadx;
f
int
ipady
java/awt/GridBagConstraints.html#ipady
int ipady;
m
Object
clone
java/awt/GridBagConstraints.html#clone()
Object clone();
GridLayout
class GridLayout extends Object;
Object
java/awt/GridLayout.html
java.awt.GridLayout
c

GridLayout
java/awt/GridLayout.html
GridLayout();
GridLayout(int rows, int cols);
GridLayout(int rows, int cols, int hgap, int vgap);
m
int
getRows
java/awt/GridLayout.html#getRows()
int getRows();
m
void
setRows
java/awt/GridLayout.html#setRows(int)
void setRows(int rows);
m
int
getColumns
java/awt/GridLayout.html#getColumns()
int getColumns();
m
void
setColumns
java/awt/GridLayout.html#setColumns(int)
void setColumns(int cols);
m
int
getHgap
java/awt/GridLayout.html#getHgap()
int getHgap();
m
void
setHgap
java/awt/GridLayout.html#setHgap(int)
void setHgap(int hgap);
m
int
getVgap
java/awt/GridLayout.html#getVgap()
int getVgap();
m
void
setVgap
java/awt/GridLayout.html#setVgap(int)
void setVgap(int vgap);
m
void
addLayoutComponent
java/awt/GridLayout.html#addLayoutComponent(java.lang.String, java.awt.Component)
void addLayoutComponent(String name, Component comp);
m
void
removeLayoutComponent
java/awt/GridLayout.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
preferredLayoutSize
java/awt/GridLayout.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container parent);
m
Dimension
minimumLayoutSize
java/awt/GridLayout.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container parent);
m
void
layoutContainer
java/awt/GridLayout.html#layoutContainer(java.awt.Container)
void layoutContainer(Container parent);
m
String
toString
java/awt/GridLayout.html#toString()
String toString();
Stroke
class Stroke;

java/awt/Stroke.html
java.awt.Stroke
m
Shape
createStrokedShape
java/awt/Stroke.html#createStrokedShape(java.awt.Shape)
Shape createStrokedShape(Shape p);
CheckboxGroup
class CheckboxGroup extends Object;
Object
java/awt/CheckboxGroup.html
java.awt.CheckboxGroup
c

CheckboxGroup
java/awt/CheckboxGroup.html
CheckboxGroup();
m
Checkbox
getSelectedCheckbox
java/awt/CheckboxGroup.html#getSelectedCheckbox()
Checkbox getSelectedCheckbox();
m
Checkbox
getCurrent
java/awt/CheckboxGroup.html#getCurrent()
Checkbox getCurrent();
m
void
setSelectedCheckbox
java/awt/CheckboxGroup.html#setSelectedCheckbox(java.awt.Checkbox)
void setSelectedCheckbox(Checkbox box);
m
void
setCurrent
java/awt/CheckboxGroup.html#setCurrent(java.awt.Checkbox)
void setCurrent(Checkbox box);
m
String
toString
java/awt/CheckboxGroup.html#toString()
String toString();
Canvas
class Canvas extends Component;
Component
java/awt/Canvas.html
java.awt.Canvas
c

Canvas
java/awt/Canvas.html
Canvas();
Canvas(GraphicsConfiguration config);
l
Canvas.AccessibleAWTCanvas
AccessibleAWTCanvas
java/awt/Canvas.AccessibleAWTCanvas.html
inner class Canvas.AccessibleAWTCanvas;
m
void
addNotify
java/awt/Canvas.html#addNotify()
void addNotify();
m
void
paint
java/awt/Canvas.html#paint(java.awt.Graphics)
void paint(Graphics g);
m
AccessibleContext
getAccessibleContext
java/awt/Canvas.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Canvas.AccessibleAWTCanvas
class Canvas.AccessibleAWTCanvas extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Canvas.AccessibleAWTCanvas.html
java.awt.Canvas.AccessibleAWTCanvas
c

Canvas.AccessibleAWTCanvas
java/awt/Canvas.AccessibleAWTCanvas.html
Canvas.AccessibleAWTCanvas(Canvas this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Canvas.AccessibleAWTCanvas.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
GraphicsEnvironment
class GraphicsEnvironment extends Object;
Object
java/awt/GraphicsEnvironment.html
java.awt.GraphicsEnvironment
c

GraphicsEnvironment
java/awt/GraphicsEnvironment.html
GraphicsEnvironment();
m
GraphicsEnvironment
getLocalGraphicsEnvironment
java/awt/GraphicsEnvironment.html#getLocalGraphicsEnvironment()
GraphicsEnvironment getLocalGraphicsEnvironment();
m
GraphicsDevice
getScreenDevices
java/awt/GraphicsEnvironment.html#getScreenDevices()
GraphicsDevice[] getScreenDevices();
m
GraphicsDevice
getDefaultScreenDevice
java/awt/GraphicsEnvironment.html#getDefaultScreenDevice()
GraphicsDevice getDefaultScreenDevice();
m
Graphics2D
createGraphics
java/awt/GraphicsEnvironment.html#createGraphics(java.awt.image.BufferedImage)
Graphics2D createGraphics(BufferedImage img);
m
Font
getAllFonts
java/awt/GraphicsEnvironment.html#getAllFonts()
Font[] getAllFonts();
m
String
getAvailableFontFamilyNames
java/awt/GraphicsEnvironment.html#getAvailableFontFamilyNames()
String[] getAvailableFontFamilyNames();
String[] getAvailableFontFamilyNames(Locale l);
Scrollbar
class Scrollbar extends Component;
Component
java/awt/Scrollbar.html
java.awt.Scrollbar
c

Scrollbar
java/awt/Scrollbar.html
Scrollbar();
Scrollbar(int orientation);
Scrollbar(int orientation, int value, int visible, int minimum, int maximum);
l
Scrollbar.AccessibleAWTScrollBar
AccessibleAWTScrollBar
java/awt/Scrollbar.AccessibleAWTScrollBar.html
inner class Scrollbar.AccessibleAWTScrollBar;
f
int
HORIZONTAL
java/awt/Scrollbar.html#HORIZONTAL
int HORIZONTAL;
f
int
VERTICAL
java/awt/Scrollbar.html#VERTICAL
int VERTICAL;
m
void
addNotify
java/awt/Scrollbar.html#addNotify()
void addNotify();
m
int
getOrientation
java/awt/Scrollbar.html#getOrientation()
int getOrientation();
m
void
setOrientation
java/awt/Scrollbar.html#setOrientation(int)
void setOrientation(int orientation);
m
int
getValue
java/awt/Scrollbar.html#getValue()
int getValue();
m
void
setValue
java/awt/Scrollbar.html#setValue(int)
void setValue(int newValue);
m
int
getMinimum
java/awt/Scrollbar.html#getMinimum()
int getMinimum();
m
void
setMinimum
java/awt/Scrollbar.html#setMinimum(int)
void setMinimum(int newMinimum);
m
int
getMaximum
java/awt/Scrollbar.html#getMaximum()
int getMaximum();
m
void
setMaximum
java/awt/Scrollbar.html#setMaximum(int)
void setMaximum(int newMaximum);
m
int
getVisibleAmount
java/awt/Scrollbar.html#getVisibleAmount()
int getVisibleAmount();
m
int
getVisible
java/awt/Scrollbar.html#getVisible()
int getVisible();
m
void
setVisibleAmount
java/awt/Scrollbar.html#setVisibleAmount(int)
void setVisibleAmount(int newAmount);
m
void
setUnitIncrement
java/awt/Scrollbar.html#setUnitIncrement(int)
void setUnitIncrement(int v);
m
void
setLineIncrement
java/awt/Scrollbar.html#setLineIncrement(int)
void setLineIncrement(int v);
m
int
getUnitIncrement
java/awt/Scrollbar.html#getUnitIncrement()
int getUnitIncrement();
m
int
getLineIncrement
java/awt/Scrollbar.html#getLineIncrement()
int getLineIncrement();
m
void
setBlockIncrement
java/awt/Scrollbar.html#setBlockIncrement(int)
void setBlockIncrement(int v);
m
void
setPageIncrement
java/awt/Scrollbar.html#setPageIncrement(int)
void setPageIncrement(int v);
m
int
getBlockIncrement
java/awt/Scrollbar.html#getBlockIncrement()
int getBlockIncrement();
m
int
getPageIncrement
java/awt/Scrollbar.html#getPageIncrement()
int getPageIncrement();
m
void
setValues
java/awt/Scrollbar.html#setValues(int, int, int, int)
void setValues(int value, int visible, int minimum, int maximum);
m
void
addAdjustmentListener
java/awt/Scrollbar.html#addAdjustmentListener(java.awt.event.AdjustmentListener)
void addAdjustmentListener(AdjustmentListener l);
m
void
removeAdjustmentListener
java/awt/Scrollbar.html#removeAdjustmentListener(java.awt.event.AdjustmentListener)
void removeAdjustmentListener(AdjustmentListener l);
m
EventListener
getListeners
java/awt/Scrollbar.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Scrollbar.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processAdjustmentEvent
java/awt/Scrollbar.html#processAdjustmentEvent(java.awt.event.AdjustmentEvent)
void processAdjustmentEvent(AdjustmentEvent e);
m
String
paramString
java/awt/Scrollbar.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Scrollbar.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Scrollbar.AccessibleAWTScrollBar
class Scrollbar.AccessibleAWTScrollBar extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Scrollbar.AccessibleAWTScrollBar.html
java.awt.Scrollbar.AccessibleAWTScrollBar
c

Scrollbar.AccessibleAWTScrollBar
java/awt/Scrollbar.AccessibleAWTScrollBar.html
Scrollbar.AccessibleAWTScrollBar(Scrollbar this$0);
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
m
AccessibleRole
getAccessibleRole
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleValue
getAccessibleValue
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getAccessibleValue()
AccessibleValue getAccessibleValue();
m
Number
getCurrentAccessibleValue
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getCurrentAccessibleValue()
Number getCurrentAccessibleValue();
m
boolean
setCurrentAccessibleValue
java/awt/Scrollbar.AccessibleAWTScrollBar.html#setCurrentAccessibleValue(java.lang.Number)
boolean setCurrentAccessibleValue(Number n);
m
Number
getMinimumAccessibleValue
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getMinimumAccessibleValue()
Number getMinimumAccessibleValue();
m
Number
getMaximumAccessibleValue
java/awt/Scrollbar.AccessibleAWTScrollBar.html#getMaximumAccessibleValue()
Number getMaximumAccessibleValue();
Frame
class Frame extends Window;
Window
java/awt/Frame.html
java.awt.Frame
c

Frame
java/awt/Frame.html
Frame();
Frame(GraphicsConfiguration gc);
Frame(String title);
Frame(String title, GraphicsConfiguration gc);
l
Frame.AccessibleAWTFrame
AccessibleAWTFrame
java/awt/Frame.AccessibleAWTFrame.html
inner class Frame.AccessibleAWTFrame;
f
int
DEFAULT_CURSOR
java/awt/Frame.html#DEFAULT_CURSOR
int DEFAULT_CURSOR;
f
int
CROSSHAIR_CURSOR
java/awt/Frame.html#CROSSHAIR_CURSOR
int CROSSHAIR_CURSOR;
f
int
TEXT_CURSOR
java/awt/Frame.html#TEXT_CURSOR
int TEXT_CURSOR;
f
int
WAIT_CURSOR
java/awt/Frame.html#WAIT_CURSOR
int WAIT_CURSOR;
f
int
SW_RESIZE_CURSOR
java/awt/Frame.html#SW_RESIZE_CURSOR
int SW_RESIZE_CURSOR;
f
int
SE_RESIZE_CURSOR
java/awt/Frame.html#SE_RESIZE_CURSOR
int SE_RESIZE_CURSOR;
f
int
NW_RESIZE_CURSOR
java/awt/Frame.html#NW_RESIZE_CURSOR
int NW_RESIZE_CURSOR;
f
int
NE_RESIZE_CURSOR
java/awt/Frame.html#NE_RESIZE_CURSOR
int NE_RESIZE_CURSOR;
f
int
N_RESIZE_CURSOR
java/awt/Frame.html#N_RESIZE_CURSOR
int N_RESIZE_CURSOR;
f
int
S_RESIZE_CURSOR
java/awt/Frame.html#S_RESIZE_CURSOR
int S_RESIZE_CURSOR;
f
int
W_RESIZE_CURSOR
java/awt/Frame.html#W_RESIZE_CURSOR
int W_RESIZE_CURSOR;
f
int
E_RESIZE_CURSOR
java/awt/Frame.html#E_RESIZE_CURSOR
int E_RESIZE_CURSOR;
f
int
HAND_CURSOR
java/awt/Frame.html#HAND_CURSOR
int HAND_CURSOR;
f
int
MOVE_CURSOR
java/awt/Frame.html#MOVE_CURSOR
int MOVE_CURSOR;
f
int
NORMAL
java/awt/Frame.html#NORMAL
int NORMAL;
f
int
ICONIFIED
java/awt/Frame.html#ICONIFIED
int ICONIFIED;
m
void
finalize
java/awt/Frame.html#finalize()
void finalize() throws Throwable;
m
void
addNotify
java/awt/Frame.html#addNotify()
void addNotify();
m
String
getTitle
java/awt/Frame.html#getTitle()
String getTitle();
m
void
setTitle
java/awt/Frame.html#setTitle(java.lang.String)
void setTitle(String title);
m
Image
getIconImage
java/awt/Frame.html#getIconImage()
Image getIconImage();
m
void
setIconImage
java/awt/Frame.html#setIconImage(java.awt.Image)
void setIconImage(Image image);
m
MenuBar
getMenuBar
java/awt/Frame.html#getMenuBar()
MenuBar getMenuBar();
m
void
setMenuBar
java/awt/Frame.html#setMenuBar(java.awt.MenuBar)
void setMenuBar(MenuBar mb);
m
boolean
isResizable
java/awt/Frame.html#isResizable()
boolean isResizable();
m
void
setResizable
java/awt/Frame.html#setResizable(boolean)
void setResizable(boolean resizable);
m
void
setState
java/awt/Frame.html#setState(int)
void setState(int state);
m
int
getState
java/awt/Frame.html#getState()
int getState();
m
void
remove
java/awt/Frame.html#remove(java.awt.MenuComponent)
void remove(MenuComponent m);
m
void
removeNotify
java/awt/Frame.html#removeNotify()
void removeNotify();
m
String
paramString
java/awt/Frame.html#paramString()
String paramString();
m
void
setCursor
java/awt/Frame.html#setCursor(int)
void setCursor(int cursorType);
m
int
getCursorType
java/awt/Frame.html#getCursorType()
int getCursorType();
m
Frame
getFrames
java/awt/Frame.html#getFrames()
Frame[] getFrames();
m
AccessibleContext
getAccessibleContext
java/awt/Frame.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Frame.AccessibleAWTFrame
class Frame.AccessibleAWTFrame extends Window.AccessibleAWTWindow;
Window.AccessibleAWTWindow
java/awt/Frame.AccessibleAWTFrame.html
java.awt.Frame.AccessibleAWTFrame
c

Frame.AccessibleAWTFrame
java/awt/Frame.AccessibleAWTFrame.html
Frame.AccessibleAWTFrame(Frame this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Frame.AccessibleAWTFrame.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Frame.AccessibleAWTFrame.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
Dialog
class Dialog extends Window;
Window
java/awt/Dialog.html
java.awt.Dialog
c

Dialog
java/awt/Dialog.html
Dialog(Frame owner);
Dialog(Frame owner, boolean modal);
Dialog(Frame owner, String title);
Dialog(Frame owner, String title, boolean modal);
Dialog(Dialog owner);
Dialog(Dialog owner, String title);
Dialog(Dialog owner, String title, boolean modal);
l
Dialog.AccessibleAWTDialog
AccessibleAWTDialog
java/awt/Dialog.AccessibleAWTDialog.html
inner class Dialog.AccessibleAWTDialog;
m
void
addNotify
java/awt/Dialog.html#addNotify()
void addNotify();
m
boolean
isModal
java/awt/Dialog.html#isModal()
boolean isModal();
m
void
setModal
java/awt/Dialog.html#setModal(boolean)
void setModal(boolean b);
m
String
getTitle
java/awt/Dialog.html#getTitle()
String getTitle();
m
void
setTitle
java/awt/Dialog.html#setTitle(java.lang.String)
void setTitle(String title);
m
void
show
java/awt/Dialog.html#show()
void show();
m
void
hide
java/awt/Dialog.html#hide()
void hide();
m
void
dispose
java/awt/Dialog.html#dispose()
void dispose();
m
boolean
isResizable
java/awt/Dialog.html#isResizable()
boolean isResizable();
m
void
setResizable
java/awt/Dialog.html#setResizable(boolean)
void setResizable(boolean resizable);
m
String
paramString
java/awt/Dialog.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Dialog.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
FileDialog
class FileDialog extends Dialog;
Dialog
java/awt/FileDialog.html
java.awt.FileDialog
c

FileDialog
java/awt/FileDialog.html
FileDialog(Frame parent);
FileDialog(Frame parent, String title);
FileDialog(Frame parent, String title, int mode);
f
int
LOAD
java/awt/FileDialog.html#LOAD
int LOAD;
f
int
SAVE
java/awt/FileDialog.html#SAVE
int SAVE;
m
void
addNotify
java/awt/FileDialog.html#addNotify()
void addNotify();
m
int
getMode
java/awt/FileDialog.html#getMode()
int getMode();
m
void
setMode
java/awt/FileDialog.html#setMode(int)
void setMode(int mode);
m
String
getDirectory
java/awt/FileDialog.html#getDirectory()
String getDirectory();
m
void
setDirectory
java/awt/FileDialog.html#setDirectory(java.lang.String)
void setDirectory(String dir);
m
String
getFile
java/awt/FileDialog.html#getFile()
String getFile();
m
void
setFile
java/awt/FileDialog.html#setFile(java.lang.String)
void setFile(String file);
m
FilenameFilter
getFilenameFilter
java/awt/FileDialog.html#getFilenameFilter()
FilenameFilter getFilenameFilter();
m
void
setFilenameFilter
java/awt/FileDialog.html#setFilenameFilter(java.io.FilenameFilter)
void setFilenameFilter(FilenameFilter filter);
m
String
paramString
java/awt/FileDialog.html#paramString()
String paramString();
JobAttributes
class JobAttributes extends Object;
Object
java/awt/JobAttributes.html
java.awt.JobAttributes
c

JobAttributes
java/awt/JobAttributes.html
JobAttributes();
JobAttributes(JobAttributes obj);
JobAttributes(int copies, JobAttributes.DefaultSelectionType defaultSelection, JobAttributes.DestinationType destination, JobAttributes.DialogType dialog, String fileName, int maxPage, int minPage, JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling, int[][] pageRanges, String printer, JobAttributes.SidesType sides);
l
JobAttributes.DefaultSelectionType
DefaultSelectionType
java/awt/JobAttributes.DefaultSelectionType.html
inner class JobAttributes.DefaultSelectionType;
l
JobAttributes.DestinationType
DestinationType
java/awt/JobAttributes.DestinationType.html
inner class JobAttributes.DestinationType;
l
JobAttributes.DialogType
DialogType
java/awt/JobAttributes.DialogType.html
inner class JobAttributes.DialogType;
l
JobAttributes.MultipleDocumentHandlingType
MultipleDocumentHandlingType
java/awt/JobAttributes.MultipleDocumentHandlingType.html
inner class JobAttributes.MultipleDocumentHandlingType;
l
JobAttributes.SidesType
SidesType
java/awt/JobAttributes.SidesType.html
inner class JobAttributes.SidesType;
m
Object
clone
java/awt/JobAttributes.html#clone()
Object clone();
m
void
set
java/awt/JobAttributes.html#set(java.awt.JobAttributes)
void set(JobAttributes obj);
m
int
getCopies
java/awt/JobAttributes.html#getCopies()
int getCopies();
m
void
setCopies
java/awt/JobAttributes.html#setCopies(int)
void setCopies(int copies);
m
void
setCopiesToDefault
java/awt/JobAttributes.html#setCopiesToDefault()
void setCopiesToDefault();
m
JobAttributes.DefaultSelectionType
getDefaultSelection
java/awt/JobAttributes.html#getDefaultSelection()
JobAttributes.DefaultSelectionType getDefaultSelection();
m
void
setDefaultSelection
java/awt/JobAttributes.html#setDefaultSelection(java.awt.JobAttributes.DefaultSelectionType)
void setDefaultSelection(JobAttributes.DefaultSelectionType defaultSelection);
m
JobAttributes.DestinationType
getDestination
java/awt/JobAttributes.html#getDestination()
JobAttributes.DestinationType getDestination();
m
void
setDestination
java/awt/JobAttributes.html#setDestination(java.awt.JobAttributes.DestinationType)
void setDestination(JobAttributes.DestinationType destination);
m
JobAttributes.DialogType
getDialog
java/awt/JobAttributes.html#getDialog()
JobAttributes.DialogType getDialog();
m
void
setDialog
java/awt/JobAttributes.html#setDialog(java.awt.JobAttributes.DialogType)
void setDialog(JobAttributes.DialogType dialog);
m
String
getFileName
java/awt/JobAttributes.html#getFileName()
String getFileName();
m
void
setFileName
java/awt/JobAttributes.html#setFileName(java.lang.String)
void setFileName(String fileName);
m
int
getFromPage
java/awt/JobAttributes.html#getFromPage()
int getFromPage();
m
void
setFromPage
java/awt/JobAttributes.html#setFromPage(int)
void setFromPage(int fromPage);
m
int
getMaxPage
java/awt/JobAttributes.html#getMaxPage()
int getMaxPage();
m
void
setMaxPage
java/awt/JobAttributes.html#setMaxPage(int)
void setMaxPage(int maxPage);
m
int
getMinPage
java/awt/JobAttributes.html#getMinPage()
int getMinPage();
m
void
setMinPage
java/awt/JobAttributes.html#setMinPage(int)
void setMinPage(int minPage);
m
JobAttributes.MultipleDocumentHandlingType
getMultipleDocumentHandling
java/awt/JobAttributes.html#getMultipleDocumentHandling()
JobAttributes.MultipleDocumentHandlingType getMultipleDocumentHandling();
m
void
setMultipleDocumentHandling
java/awt/JobAttributes.html#setMultipleDocumentHandling(java.awt.JobAttributes.MultipleDocumentHandlingType)
void setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling);
m
void
setMultipleDocumentHandlingToDefault
java/awt/JobAttributes.html#setMultipleDocumentHandlingToDefault()
void setMultipleDocumentHandlingToDefault();
m
int
getPageRanges
java/awt/JobAttributes.html#getPageRanges()
int[][] getPageRanges();
m
void
setPageRanges
java/awt/JobAttributes.html#setPageRanges(int[][])
void setPageRanges(int[][] pageRanges);
m
String
getPrinter
java/awt/JobAttributes.html#getPrinter()
String getPrinter();
m
void
setPrinter
java/awt/JobAttributes.html#setPrinter(java.lang.String)
void setPrinter(String printer);
m
JobAttributes.SidesType
getSides
java/awt/JobAttributes.html#getSides()
JobAttributes.SidesType getSides();
m
void
setSides
java/awt/JobAttributes.html#setSides(java.awt.JobAttributes.SidesType)
void setSides(JobAttributes.SidesType sides);
m
void
setSidesToDefault
java/awt/JobAttributes.html#setSidesToDefault()
void setSidesToDefault();
m
int
getToPage
java/awt/JobAttributes.html#getToPage()
int getToPage();
m
void
setToPage
java/awt/JobAttributes.html#setToPage(int)
void setToPage(int toPage);
m
boolean
equals
java/awt/JobAttributes.html#equals(java.lang.Object)
boolean equals(Object obj);
m
int
hashCode
java/awt/JobAttributes.html#hashCode()
int hashCode();
m
String
toString
java/awt/JobAttributes.html#toString()
String toString();
JobAttributes.DefaultSelectionType
class JobAttributes.DefaultSelectionType extends AttributeValue;
AttributeValue
java/awt/JobAttributes.DefaultSelectionType.html
java.awt.JobAttributes.DefaultSelectionType
f
JobAttributes.DefaultSelectionType
ALL
java/awt/JobAttributes.DefaultSelectionType.html#ALL
JobAttributes.DefaultSelectionType ALL;
f
JobAttributes.DefaultSelectionType
RANGE
java/awt/JobAttributes.DefaultSelectionType.html#RANGE
JobAttributes.DefaultSelectionType RANGE;
f
JobAttributes.DefaultSelectionType
SELECTION
java/awt/JobAttributes.DefaultSelectionType.html#SELECTION
JobAttributes.DefaultSelectionType SELECTION;
JobAttributes.DestinationType
class JobAttributes.DestinationType extends AttributeValue;
AttributeValue
java/awt/JobAttributes.DestinationType.html
java.awt.JobAttributes.DestinationType
f
JobAttributes.DestinationType
FILE
java/awt/JobAttributes.DestinationType.html#FILE
JobAttributes.DestinationType FILE;
f
JobAttributes.DestinationType
PRINTER
java/awt/JobAttributes.DestinationType.html#PRINTER
JobAttributes.DestinationType PRINTER;
JobAttributes.DialogType
class JobAttributes.DialogType extends AttributeValue;
AttributeValue
java/awt/JobAttributes.DialogType.html
java.awt.JobAttributes.DialogType
f
JobAttributes.DialogType
COMMON
java/awt/JobAttributes.DialogType.html#COMMON
JobAttributes.DialogType COMMON;
f
JobAttributes.DialogType
NATIVE
java/awt/JobAttributes.DialogType.html#NATIVE
JobAttributes.DialogType NATIVE;
f
JobAttributes.DialogType
NONE
java/awt/JobAttributes.DialogType.html#NONE
JobAttributes.DialogType NONE;
JobAttributes.MultipleDocumentHandlingType
class JobAttributes.MultipleDocumentHandlingType extends AttributeValue;
AttributeValue
java/awt/JobAttributes.MultipleDocumentHandlingType.html
java.awt.JobAttributes.MultipleDocumentHandlingType
f
JobAttributes.MultipleDocumentHandlingType
SEPARATE_DOCUMENTS_COLLATED_COPIES
java/awt/JobAttributes.MultipleDocumentHandlingType.html#SEPARATE_DOCUMENTS_COLLATED_COPIES
JobAttributes.MultipleDocumentHandlingType SEPARATE_DOCUMENTS_COLLATED_COPIES;
f
JobAttributes.MultipleDocumentHandlingType
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES
java/awt/JobAttributes.MultipleDocumentHandlingType.html#SEPARATE_DOCUMENTS_UNCOLLATED_COPIES
JobAttributes.MultipleDocumentHandlingType SEPARATE_DOCUMENTS_UNCOLLATED_COPIES;
JobAttributes.SidesType
class JobAttributes.SidesType extends AttributeValue;
AttributeValue
java/awt/JobAttributes.SidesType.html
java.awt.JobAttributes.SidesType
f
JobAttributes.SidesType
ONE_SIDED
java/awt/JobAttributes.SidesType.html#ONE_SIDED
JobAttributes.SidesType ONE_SIDED;
f
JobAttributes.SidesType
TWO_SIDED_LONG_EDGE
java/awt/JobAttributes.SidesType.html#TWO_SIDED_LONG_EDGE
JobAttributes.SidesType TWO_SIDED_LONG_EDGE;
f
JobAttributes.SidesType
TWO_SIDED_SHORT_EDGE
java/awt/JobAttributes.SidesType.html#TWO_SIDED_SHORT_EDGE
JobAttributes.SidesType TWO_SIDED_SHORT_EDGE;
RenderingHints
class RenderingHints extends Object;
Object
java/awt/RenderingHints.html
java.awt.RenderingHints
c

RenderingHints
java/awt/RenderingHints.html
RenderingHints(Map init);
RenderingHints(RenderingHints.Key key, Object value);
l
RenderingHints.Key
Key
java/awt/RenderingHints.Key.html
inner class RenderingHints.Key;
f
RenderingHints.Key
KEY_ANTIALIASING
java/awt/RenderingHints.html#KEY_ANTIALIASING
RenderingHints.Key KEY_ANTIALIASING;
f
Object
VALUE_ANTIALIAS_ON
java/awt/RenderingHints.html#VALUE_ANTIALIAS_ON
Object VALUE_ANTIALIAS_ON;
f
Object
VALUE_ANTIALIAS_OFF
java/awt/RenderingHints.html#VALUE_ANTIALIAS_OFF
Object VALUE_ANTIALIAS_OFF;
f
Object
VALUE_ANTIALIAS_DEFAULT
java/awt/RenderingHints.html#VALUE_ANTIALIAS_DEFAULT
Object VALUE_ANTIALIAS_DEFAULT;
f
RenderingHints.Key
KEY_RENDERING
java/awt/RenderingHints.html#KEY_RENDERING
RenderingHints.Key KEY_RENDERING;
f
Object
VALUE_RENDER_SPEED
java/awt/RenderingHints.html#VALUE_RENDER_SPEED
Object VALUE_RENDER_SPEED;
f
Object
VALUE_RENDER_QUALITY
java/awt/RenderingHints.html#VALUE_RENDER_QUALITY
Object VALUE_RENDER_QUALITY;
f
Object
VALUE_RENDER_DEFAULT
java/awt/RenderingHints.html#VALUE_RENDER_DEFAULT
Object VALUE_RENDER_DEFAULT;
f
RenderingHints.Key
KEY_DITHERING
java/awt/RenderingHints.html#KEY_DITHERING
RenderingHints.Key KEY_DITHERING;
f
Object
VALUE_DITHER_DISABLE
java/awt/RenderingHints.html#VALUE_DITHER_DISABLE
Object VALUE_DITHER_DISABLE;
f
Object
VALUE_DITHER_ENABLE
java/awt/RenderingHints.html#VALUE_DITHER_ENABLE
Object VALUE_DITHER_ENABLE;
f
Object
VALUE_DITHER_DEFAULT
java/awt/RenderingHints.html#VALUE_DITHER_DEFAULT
Object VALUE_DITHER_DEFAULT;
f
RenderingHints.Key
KEY_TEXT_ANTIALIASING
java/awt/RenderingHints.html#KEY_TEXT_ANTIALIASING
RenderingHints.Key KEY_TEXT_ANTIALIASING;
f
Object
VALUE_TEXT_ANTIALIAS_ON
java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_ON
Object VALUE_TEXT_ANTIALIAS_ON;
f
Object
VALUE_TEXT_ANTIALIAS_OFF
java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_OFF
Object VALUE_TEXT_ANTIALIAS_OFF;
f
Object
VALUE_TEXT_ANTIALIAS_DEFAULT
java/awt/RenderingHints.html#VALUE_TEXT_ANTIALIAS_DEFAULT
Object VALUE_TEXT_ANTIALIAS_DEFAULT;
f
RenderingHints.Key
KEY_FRACTIONALMETRICS
java/awt/RenderingHints.html#KEY_FRACTIONALMETRICS
RenderingHints.Key KEY_FRACTIONALMETRICS;
f
Object
VALUE_FRACTIONALMETRICS_OFF
java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_OFF
Object VALUE_FRACTIONALMETRICS_OFF;
f
Object
VALUE_FRACTIONALMETRICS_ON
java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_ON
Object VALUE_FRACTIONALMETRICS_ON;
f
Object
VALUE_FRACTIONALMETRICS_DEFAULT
java/awt/RenderingHints.html#VALUE_FRACTIONALMETRICS_DEFAULT
Object VALUE_FRACTIONALMETRICS_DEFAULT;
f
RenderingHints.Key
KEY_INTERPOLATION
java/awt/RenderingHints.html#KEY_INTERPOLATION
RenderingHints.Key KEY_INTERPOLATION;
f
Object
VALUE_INTERPOLATION_NEAREST_NEIGHBOR
java/awt/RenderingHints.html#VALUE_INTERPOLATION_NEAREST_NEIGHBOR
Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR;
f
Object
VALUE_INTERPOLATION_BILINEAR
java/awt/RenderingHints.html#VALUE_INTERPOLATION_BILINEAR
Object VALUE_INTERPOLATION_BILINEAR;
f
Object
VALUE_INTERPOLATION_BICUBIC
java/awt/RenderingHints.html#VALUE_INTERPOLATION_BICUBIC
Object VALUE_INTERPOLATION_BICUBIC;
f
RenderingHints.Key
KEY_ALPHA_INTERPOLATION
java/awt/RenderingHints.html#KEY_ALPHA_INTERPOLATION
RenderingHints.Key KEY_ALPHA_INTERPOLATION;
f
Object
VALUE_ALPHA_INTERPOLATION_SPEED
java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_SPEED
Object VALUE_ALPHA_INTERPOLATION_SPEED;
f
Object
VALUE_ALPHA_INTERPOLATION_QUALITY
java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_QUALITY
Object VALUE_ALPHA_INTERPOLATION_QUALITY;
f
Object
VALUE_ALPHA_INTERPOLATION_DEFAULT
java/awt/RenderingHints.html#VALUE_ALPHA_INTERPOLATION_DEFAULT
Object VALUE_ALPHA_INTERPOLATION_DEFAULT;
f
RenderingHints.Key
KEY_COLOR_RENDERING
java/awt/RenderingHints.html#KEY_COLOR_RENDERING
RenderingHints.Key KEY_COLOR_RENDERING;
f
Object
VALUE_COLOR_RENDER_SPEED
java/awt/RenderingHints.html#VALUE_COLOR_RENDER_SPEED
Object VALUE_COLOR_RENDER_SPEED;
f
Object
VALUE_COLOR_RENDER_QUALITY
java/awt/RenderingHints.html#VALUE_COLOR_RENDER_QUALITY
Object VALUE_COLOR_RENDER_QUALITY;
f
Object
VALUE_COLOR_RENDER_DEFAULT
java/awt/RenderingHints.html#VALUE_COLOR_RENDER_DEFAULT
Object VALUE_COLOR_RENDER_DEFAULT;
f
RenderingHints.Key
KEY_STROKE_CONTROL
java/awt/RenderingHints.html#KEY_STROKE_CONTROL
RenderingHints.Key KEY_STROKE_CONTROL;
f
Object
VALUE_STROKE_DEFAULT
java/awt/RenderingHints.html#VALUE_STROKE_DEFAULT
Object VALUE_STROKE_DEFAULT;
f
Object
VALUE_STROKE_NORMALIZE
java/awt/RenderingHints.html#VALUE_STROKE_NORMALIZE
Object VALUE_STROKE_NORMALIZE;
f
Object
VALUE_STROKE_PURE
java/awt/RenderingHints.html#VALUE_STROKE_PURE
Object VALUE_STROKE_PURE;
m
int
size
java/awt/RenderingHints.html#size()
int size();
m
boolean
isEmpty
java/awt/RenderingHints.html#isEmpty()
boolean isEmpty();
m
boolean
containsKey
java/awt/RenderingHints.html#containsKey(java.lang.Object)
boolean containsKey(Object key);
m
boolean
containsValue
java/awt/RenderingHints.html#containsValue(java.lang.Object)
boolean containsValue(Object value);
m
Object
get
java/awt/RenderingHints.html#get(java.lang.Object)
Object get(Object key);
m
Object
put
java/awt/RenderingHints.html#put(java.lang.Object, java.lang.Object)
Object put(Object key, Object value);
m
void
add
java/awt/RenderingHints.html#add(java.awt.RenderingHints)
void add(RenderingHints hints);
m
void
clear
java/awt/RenderingHints.html#clear()
void clear();
m
Object
remove
java/awt/RenderingHints.html#remove(java.lang.Object)
Object remove(Object key);
m
void
putAll
java/awt/RenderingHints.html#putAll(java.util.Map)
void putAll(Map m);
m
Set
keySet
java/awt/RenderingHints.html#keySet()
Set keySet();
m
Collection
values
java/awt/RenderingHints.html#values()
Collection values();
m
Set
entrySet
java/awt/RenderingHints.html#entrySet()
Set entrySet();
m
boolean
equals
java/awt/RenderingHints.html#equals(java.lang.Object)
boolean equals(Object o);
m
int
hashCode
java/awt/RenderingHints.html#hashCode()
int hashCode();
m
Object
clone
java/awt/RenderingHints.html#clone()
Object clone();
m
String
toString
java/awt/RenderingHints.html#toString()
String toString();
RenderingHints.Key
class RenderingHints.Key extends Object;
Object
java/awt/RenderingHints.Key.html
java.awt.RenderingHints.Key
c

RenderingHints.Key
java/awt/RenderingHints.Key.html
RenderingHints.Key(int privatekey);
m
boolean
isCompatibleValue
java/awt/RenderingHints.Key.html#isCompatibleValue(java.lang.Object)
boolean isCompatibleValue(Object val);
m
int
intKey
java/awt/RenderingHints.Key.html#intKey()
int intKey();
m
int
hashCode
java/awt/RenderingHints.Key.html#hashCode()
int hashCode();
m
boolean
equals
java/awt/RenderingHints.Key.html#equals(java.lang.Object)
boolean equals(Object o);
MediaTracker
class MediaTracker extends Object;
Object
java/awt/MediaTracker.html
java.awt.MediaTracker
c

MediaTracker
java/awt/MediaTracker.html
MediaTracker(Component comp);
f
int
LOADING
java/awt/MediaTracker.html#LOADING
int LOADING;
f
int
ABORTED
java/awt/MediaTracker.html#ABORTED
int ABORTED;
f
int
ERRORED
java/awt/MediaTracker.html#ERRORED
int ERRORED;
f
int
COMPLETE
java/awt/MediaTracker.html#COMPLETE
int COMPLETE;
m
void
addImage
java/awt/MediaTracker.html#addImage(java.awt.Image, int)
void addImage(Image image, int id);
void addImage(Image image, int id, int w, int h);
m
boolean
checkAll
java/awt/MediaTracker.html#checkAll()
boolean checkAll();
boolean checkAll(boolean load);
m
boolean
isErrorAny
java/awt/MediaTracker.html#isErrorAny()
boolean isErrorAny();
m
Object
getErrorsAny
java/awt/MediaTracker.html#getErrorsAny()
Object[] getErrorsAny();
m
void
waitForAll
java/awt/MediaTracker.html#waitForAll()
void waitForAll() throws InterruptedException;
boolean waitForAll(long ms) throws InterruptedException;
m
int
statusAll
java/awt/MediaTracker.html#statusAll(boolean)
int statusAll(boolean load);
m
boolean
checkID
java/awt/MediaTracker.html#checkID(int)
boolean checkID(int id);
boolean checkID(int id, boolean load);
m
boolean
isErrorID
java/awt/MediaTracker.html#isErrorID(int)
boolean isErrorID(int id);
m
Object
getErrorsID
java/awt/MediaTracker.html#getErrorsID(int)
Object[] getErrorsID(int id);
m
void
waitForID
java/awt/MediaTracker.html#waitForID(int)
void waitForID(int id) throws InterruptedException;
boolean waitForID(int id, long ms) throws InterruptedException;
m
int
statusID
java/awt/MediaTracker.html#statusID(int, boolean)
int statusID(int id, boolean load);
m
void
removeImage
java/awt/MediaTracker.html#removeImage(java.awt.Image)
void removeImage(Image image);
void removeImage(Image image, int id);
void removeImage(Image image, int id, int width, int height);
AWTError
class AWTError extends Error;
Error
java/awt/AWTError.html
java.awt.AWTError
c

AWTError
java/awt/AWTError.html
AWTError(String msg);
CompositeContext
class CompositeContext;

java/awt/CompositeContext.html
java.awt.CompositeContext
m
void
dispose
java/awt/CompositeContext.html#dispose()
void dispose();
m
void
compose
java/awt/CompositeContext.html#compose(java.awt.image.Raster, java.awt.image.Raster, java.awt.image.WritableRaster)
void compose(Raster src, Raster dstIn, WritableRaster dstOut);
GridBagLayout
class GridBagLayout extends Object;
Object
java/awt/GridBagLayout.html
java.awt.GridBagLayout
c

GridBagLayout
java/awt/GridBagLayout.html
GridBagLayout();
f
int
MAXGRIDSIZE
java/awt/GridBagLayout.html#MAXGRIDSIZE
int MAXGRIDSIZE;
f
int
MINSIZE
java/awt/GridBagLayout.html#MINSIZE
int MINSIZE;
f
int
PREFERREDSIZE
java/awt/GridBagLayout.html#PREFERREDSIZE
int PREFERREDSIZE;
f
Hashtable
comptable
java/awt/GridBagLayout.html#comptable
Hashtable comptable;
f
GridBagConstraints
defaultConstraints
java/awt/GridBagLayout.html#defaultConstraints
GridBagConstraints defaultConstraints;
f
GridBagLayoutInfo
layoutInfo
java/awt/GridBagLayout.html#layoutInfo
GridBagLayoutInfo layoutInfo;
f
int
columnWidths
java/awt/GridBagLayout.html#columnWidths
int columnWidths;
f
int
rowHeights
java/awt/GridBagLayout.html#rowHeights
int rowHeights;
f
double
columnWeights
java/awt/GridBagLayout.html#columnWeights
double columnWeights;
f
double
rowWeights
java/awt/GridBagLayout.html#rowWeights
double rowWeights;
m
void
setConstraints
java/awt/GridBagLayout.html#setConstraints(java.awt.Component, java.awt.GridBagConstraints)
void setConstraints(Component comp, GridBagConstraints constraints);
m
GridBagConstraints
getConstraints
java/awt/GridBagLayout.html#getConstraints(java.awt.Component)
GridBagConstraints getConstraints(Component comp);
m
GridBagConstraints
lookupConstraints
java/awt/GridBagLayout.html#lookupConstraints(java.awt.Component)
GridBagConstraints lookupConstraints(Component comp);
m
Point
getLayoutOrigin
java/awt/GridBagLayout.html#getLayoutOrigin()
Point getLayoutOrigin();
m
int
getLayoutDimensions
java/awt/GridBagLayout.html#getLayoutDimensions()
int[][] getLayoutDimensions();
m
double
getLayoutWeights
java/awt/GridBagLayout.html#getLayoutWeights()
double[][] getLayoutWeights();
m
Point
location
java/awt/GridBagLayout.html#location(int, int)
Point location(int x, int y);
m
void
addLayoutComponent
java/awt/GridBagLayout.html#addLayoutComponent(java.lang.String, java.awt.Component)
void addLayoutComponent(String name, Component comp);
void addLayoutComponent(Component comp, Object constraints);
m
void
removeLayoutComponent
java/awt/GridBagLayout.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
preferredLayoutSize
java/awt/GridBagLayout.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container parent);
m
Dimension
minimumLayoutSize
java/awt/GridBagLayout.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container parent);
m
Dimension
maximumLayoutSize
java/awt/GridBagLayout.html#maximumLayoutSize(java.awt.Container)
Dimension maximumLayoutSize(Container target);
m
float
getLayoutAlignmentX
java/awt/GridBagLayout.html#getLayoutAlignmentX(java.awt.Container)
float getLayoutAlignmentX(Container parent);
m
float
getLayoutAlignmentY
java/awt/GridBagLayout.html#getLayoutAlignmentY(java.awt.Container)
float getLayoutAlignmentY(Container parent);
m
void
invalidateLayout
java/awt/GridBagLayout.html#invalidateLayout(java.awt.Container)
void invalidateLayout(Container target);
m
void
layoutContainer
java/awt/GridBagLayout.html#layoutContainer(java.awt.Container)
void layoutContainer(Container parent);
m
String
toString
java/awt/GridBagLayout.html#toString()
String toString();
m
GridBagLayoutInfo
GetLayoutInfo
java/awt/GridBagLayout.html#GetLayoutInfo(java.awt.Container, int)
GridBagLayoutInfo GetLayoutInfo(Container parent, int sizeflag);
m
void
AdjustForGravity
java/awt/GridBagLayout.html#AdjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle)
void AdjustForGravity(GridBagConstraints constraints, Rectangle r);
m
Dimension
GetMinSize
java/awt/GridBagLayout.html#GetMinSize(java.awt.Container, java.awt.GridBagLayoutInfo)
Dimension GetMinSize(Container parent, GridBagLayoutInfo info);
m
void
ArrangeGrid
java/awt/GridBagLayout.html#ArrangeGrid(java.awt.Container)
void ArrangeGrid(Container parent);
Label
class Label extends Component;
Component
java/awt/Label.html
java.awt.Label
c

Label
java/awt/Label.html
Label();
Label(String text);
Label(String text, int alignment);
l
Label.AccessibleAWTLabel
AccessibleAWTLabel
java/awt/Label.AccessibleAWTLabel.html
inner class Label.AccessibleAWTLabel;
f
int
LEFT
java/awt/Label.html#LEFT
int LEFT;
f
int
CENTER
java/awt/Label.html#CENTER
int CENTER;
f
int
RIGHT
java/awt/Label.html#RIGHT
int RIGHT;
m
void
addNotify
java/awt/Label.html#addNotify()
void addNotify();
m
int
getAlignment
java/awt/Label.html#getAlignment()
int getAlignment();
m
void
setAlignment
java/awt/Label.html#setAlignment(int)
void setAlignment(int alignment);
m
String
getText
java/awt/Label.html#getText()
String getText();
m
void
setText
java/awt/Label.html#setText(java.lang.String)
void setText(String text);
m
String
paramString
java/awt/Label.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Label.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Label.AccessibleAWTLabel
class Label.AccessibleAWTLabel extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Label.AccessibleAWTLabel.html
java.awt.Label.AccessibleAWTLabel
c

Label.AccessibleAWTLabel
java/awt/Label.AccessibleAWTLabel.html
Label.AccessibleAWTLabel(Label this$0);
m
String
getAccessibleName
java/awt/Label.AccessibleAWTLabel.html#getAccessibleName()
String getAccessibleName();
m
AccessibleRole
getAccessibleRole
java/awt/Label.AccessibleAWTLabel.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
PrintGraphics
class PrintGraphics;

java/awt/PrintGraphics.html
java.awt.PrintGraphics
m
PrintJob
getPrintJob
java/awt/PrintGraphics.html#getPrintJob()
PrintJob getPrintJob();
Paint
class Paint;

java/awt/Paint.html
java.awt.Paint
m
PaintContext
createContext
java/awt/Paint.html#createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints);
Polygon
class Polygon extends Object;
Object
java/awt/Polygon.html
java.awt.Polygon
c

Polygon
java/awt/Polygon.html
Polygon();
Polygon(int[] xpoints, int[] ypoints, int npoints);
f
int
npoints
java/awt/Polygon.html#npoints
int npoints;
f
int
xpoints
java/awt/Polygon.html#xpoints
int xpoints;
f
int
ypoints
java/awt/Polygon.html#ypoints
int ypoints;
f
Rectangle
bounds
java/awt/Polygon.html#bounds
Rectangle bounds;
m
void
translate
java/awt/Polygon.html#translate(int, int)
void translate(int deltaX, int deltaY);
m
void
addPoint
java/awt/Polygon.html#addPoint(int, int)
void addPoint(int x, int y);
m
Rectangle
getBounds
java/awt/Polygon.html#getBounds()
Rectangle getBounds();
m
Rectangle
getBoundingBox
java/awt/Polygon.html#getBoundingBox()
Rectangle getBoundingBox();
m
boolean
contains
java/awt/Polygon.html#contains(java.awt.Point)
boolean contains(Point p);
boolean contains(int x, int y);
m
boolean
inside
java/awt/Polygon.html#inside(int, int)
boolean inside(int x, int y);
m
Rectangle2D
getBounds2D
java/awt/Polygon.html#getBounds2D()
Rectangle2D getBounds2D();
m
boolean
contains
java/awt/Polygon.html#contains(double, double)
boolean contains(double x, double y);
boolean contains(Point2D p);
m
boolean
intersects
java/awt/Polygon.html#intersects(double, double, double, double)
boolean intersects(double x, double y, double w, double h);
boolean intersects(Rectangle2D r);
m
boolean
contains
java/awt/Polygon.html#contains(double, double, double, double)
boolean contains(double x, double y, double w, double h);
boolean contains(Rectangle2D r);
m
PathIterator
getPathIterator
java/awt/Polygon.html#getPathIterator(java.awt.geom.AffineTransform)
PathIterator getPathIterator(AffineTransform at);
PathIterator getPathIterator(AffineTransform at, double flatness);
SystemColor
class SystemColor extends Color;
Color
java/awt/SystemColor.html
java.awt.SystemColor
f
int
DESKTOP
java/awt/SystemColor.html#DESKTOP
int DESKTOP;
f
int
ACTIVE_CAPTION
java/awt/SystemColor.html#ACTIVE_CAPTION
int ACTIVE_CAPTION;
f
int
ACTIVE_CAPTION_TEXT
java/awt/SystemColor.html#ACTIVE_CAPTION_TEXT
int ACTIVE_CAPTION_TEXT;
f
int
ACTIVE_CAPTION_BORDER
java/awt/SystemColor.html#ACTIVE_CAPTION_BORDER
int ACTIVE_CAPTION_BORDER;
f
int
INACTIVE_CAPTION
java/awt/SystemColor.html#INACTIVE_CAPTION
int INACTIVE_CAPTION;
f
int
INACTIVE_CAPTION_TEXT
java/awt/SystemColor.html#INACTIVE_CAPTION_TEXT
int INACTIVE_CAPTION_TEXT;
f
int
INACTIVE_CAPTION_BORDER
java/awt/SystemColor.html#INACTIVE_CAPTION_BORDER
int INACTIVE_CAPTION_BORDER;
f
int
WINDOW
java/awt/SystemColor.html#WINDOW
int WINDOW;
f
int
WINDOW_BORDER
java/awt/SystemColor.html#WINDOW_BORDER
int WINDOW_BORDER;
f
int
WINDOW_TEXT
java/awt/SystemColor.html#WINDOW_TEXT
int WINDOW_TEXT;
f
int
MENU
java/awt/SystemColor.html#MENU
int MENU;
f
int
MENU_TEXT
java/awt/SystemColor.html#MENU_TEXT
int MENU_TEXT;
f
int
TEXT
java/awt/SystemColor.html#TEXT
int TEXT;
f
int
TEXT_TEXT
java/awt/SystemColor.html#TEXT_TEXT
int TEXT_TEXT;
f
int
TEXT_HIGHLIGHT
java/awt/SystemColor.html#TEXT_HIGHLIGHT
int TEXT_HIGHLIGHT;
f
int
TEXT_HIGHLIGHT_TEXT
java/awt/SystemColor.html#TEXT_HIGHLIGHT_TEXT
int TEXT_HIGHLIGHT_TEXT;
f
int
TEXT_INACTIVE_TEXT
java/awt/SystemColor.html#TEXT_INACTIVE_TEXT
int TEXT_INACTIVE_TEXT;
f
int
CONTROL
java/awt/SystemColor.html#CONTROL
int CONTROL;
f
int
CONTROL_TEXT
java/awt/SystemColor.html#CONTROL_TEXT
int CONTROL_TEXT;
f
int
CONTROL_HIGHLIGHT
java/awt/SystemColor.html#CONTROL_HIGHLIGHT
int CONTROL_HIGHLIGHT;
f
int
CONTROL_LT_HIGHLIGHT
java/awt/SystemColor.html#CONTROL_LT_HIGHLIGHT
int CONTROL_LT_HIGHLIGHT;
f
int
CONTROL_SHADOW
java/awt/SystemColor.html#CONTROL_SHADOW
int CONTROL_SHADOW;
f
int
CONTROL_DK_SHADOW
java/awt/SystemColor.html#CONTROL_DK_SHADOW
int CONTROL_DK_SHADOW;
f
int
SCROLLBAR
java/awt/SystemColor.html#SCROLLBAR
int SCROLLBAR;
f
int
INFO
java/awt/SystemColor.html#INFO
int INFO;
f
int
INFO_TEXT
java/awt/SystemColor.html#INFO_TEXT
int INFO_TEXT;
f
int
NUM_COLORS
java/awt/SystemColor.html#NUM_COLORS
int NUM_COLORS;
f
SystemColor
desktop
java/awt/SystemColor.html#desktop
SystemColor desktop;
f
SystemColor
activeCaption
java/awt/SystemColor.html#activeCaption
SystemColor activeCaption;
f
SystemColor
activeCaptionText
java/awt/SystemColor.html#activeCaptionText
SystemColor activeCaptionText;
f
SystemColor
activeCaptionBorder
java/awt/SystemColor.html#activeCaptionBorder
SystemColor activeCaptionBorder;
f
SystemColor
inactiveCaption
java/awt/SystemColor.html#inactiveCaption
SystemColor inactiveCaption;
f
SystemColor
inactiveCaptionText
java/awt/SystemColor.html#inactiveCaptionText
SystemColor inactiveCaptionText;
f
SystemColor
inactiveCaptionBorder
java/awt/SystemColor.html#inactiveCaptionBorder
SystemColor inactiveCaptionBorder;
f
SystemColor
window
java/awt/SystemColor.html#window
SystemColor window;
f
SystemColor
windowBorder
java/awt/SystemColor.html#windowBorder
SystemColor windowBorder;
f
SystemColor
windowText
java/awt/SystemColor.html#windowText
SystemColor windowText;
f
SystemColor
menu
java/awt/SystemColor.html#menu
SystemColor menu;
f
SystemColor
menuText
java/awt/SystemColor.html#menuText
SystemColor menuText;
f
SystemColor
text
java/awt/SystemColor.html#text
SystemColor text;
f
SystemColor
textText
java/awt/SystemColor.html#textText
SystemColor textText;
f
SystemColor
textHighlight
java/awt/SystemColor.html#textHighlight
SystemColor textHighlight;
f
SystemColor
textHighlightText
java/awt/SystemColor.html#textHighlightText
SystemColor textHighlightText;
f
SystemColor
textInactiveText
java/awt/SystemColor.html#textInactiveText
SystemColor textInactiveText;
f
SystemColor
control
java/awt/SystemColor.html#control
SystemColor control;
f
SystemColor
controlText
java/awt/SystemColor.html#controlText
SystemColor controlText;
f
SystemColor
controlHighlight
java/awt/SystemColor.html#controlHighlight
SystemColor controlHighlight;
f
SystemColor
controlLtHighlight
java/awt/SystemColor.html#controlLtHighlight
SystemColor controlLtHighlight;
f
SystemColor
controlShadow
java/awt/SystemColor.html#controlShadow
SystemColor controlShadow;
f
SystemColor
controlDkShadow
java/awt/SystemColor.html#controlDkShadow
SystemColor controlDkShadow;
f
SystemColor
scrollbar
java/awt/SystemColor.html#scrollbar
SystemColor scrollbar;
f
SystemColor
info
java/awt/SystemColor.html#info
SystemColor info;
f
SystemColor
infoText
java/awt/SystemColor.html#infoText
SystemColor infoText;
m
int
getRGB
java/awt/SystemColor.html#getRGB()
int getRGB();
m
PaintContext
createContext
java/awt/SystemColor.html#createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
PaintContext createContext(ColorModel cm, Rectangle r, Rectangle2D r2d, AffineTransform xform, RenderingHints hints);
m
String
toString
java/awt/SystemColor.html#toString()
String toString();
FontFormatException
class FontFormatException extends Exception;
Exception
java/awt/FontFormatException.html
java.awt.FontFormatException
c

FontFormatException
java/awt/FontFormatException.html
FontFormatException(String reason);
Insets
class Insets extends Object;
Object
java/awt/Insets.html
java.awt.Insets
c

Insets
java/awt/Insets.html
Insets(int top, int left, int bottom, int right);
f
int
top
java/awt/Insets.html#top
int top;
f
int
left
java/awt/Insets.html#left
int left;
f
int
bottom
java/awt/Insets.html#bottom
int bottom;
f
int
right
java/awt/Insets.html#right
int right;
m
boolean
equals
java/awt/Insets.html#equals(java.lang.Object)
boolean equals(Object obj);
m
int
hashCode
java/awt/Insets.html#hashCode()
int hashCode();
m
String
toString
java/awt/Insets.html#toString()
String toString();
m
Object
clone
java/awt/Insets.html#clone()
Object clone();
AWTEventMulticaster
class AWTEventMulticaster extends Object;
Object
java/awt/AWTEventMulticaster.html
java.awt.AWTEventMulticaster
c

AWTEventMulticaster
java/awt/AWTEventMulticaster.html
AWTEventMulticaster(EventListener a, EventListener b);
f
EventListener
a
java/awt/AWTEventMulticaster.html#a
EventListener a;
f
EventListener
b
java/awt/AWTEventMulticaster.html#b
EventListener b;
m
EventListener
remove
java/awt/AWTEventMulticaster.html#remove(java.util.EventListener)
EventListener remove(EventListener oldl);
m
void
componentResized
java/awt/AWTEventMulticaster.html#componentResized(java.awt.event.ComponentEvent)
void componentResized(ComponentEvent e);
m
void
componentMoved
java/awt/AWTEventMulticaster.html#componentMoved(java.awt.event.ComponentEvent)
void componentMoved(ComponentEvent e);
m
void
componentShown
java/awt/AWTEventMulticaster.html#componentShown(java.awt.event.ComponentEvent)
void componentShown(ComponentEvent e);
m
void
componentHidden
java/awt/AWTEventMulticaster.html#componentHidden(java.awt.event.ComponentEvent)
void componentHidden(ComponentEvent e);
m
void
componentAdded
java/awt/AWTEventMulticaster.html#componentAdded(java.awt.event.ContainerEvent)
void componentAdded(ContainerEvent e);
m
void
componentRemoved
java/awt/AWTEventMulticaster.html#componentRemoved(java.awt.event.ContainerEvent)
void componentRemoved(ContainerEvent e);
m
void
focusGained
java/awt/AWTEventMulticaster.html#focusGained(java.awt.event.FocusEvent)
void focusGained(FocusEvent e);
m
void
focusLost
java/awt/AWTEventMulticaster.html#focusLost(java.awt.event.FocusEvent)
void focusLost(FocusEvent e);
m
void
keyTyped
java/awt/AWTEventMulticaster.html#keyTyped(java.awt.event.KeyEvent)
void keyTyped(KeyEvent e);
m
void
keyPressed
java/awt/AWTEventMulticaster.html#keyPressed(java.awt.event.KeyEvent)
void keyPressed(KeyEvent e);
m
void
keyReleased
java/awt/AWTEventMulticaster.html#keyReleased(java.awt.event.KeyEvent)
void keyReleased(KeyEvent e);
m
void
mouseClicked
java/awt/AWTEventMulticaster.html#mouseClicked(java.awt.event.MouseEvent)
void mouseClicked(MouseEvent e);
m
void
mousePressed
java/awt/AWTEventMulticaster.html#mousePressed(java.awt.event.MouseEvent)
void mousePressed(MouseEvent e);
m
void
mouseReleased
java/awt/AWTEventMulticaster.html#mouseReleased(java.awt.event.MouseEvent)
void mouseReleased(MouseEvent e);
m
void
mouseEntered
java/awt/AWTEventMulticaster.html#mouseEntered(java.awt.event.MouseEvent)
void mouseEntered(MouseEvent e);
m
void
mouseExited
java/awt/AWTEventMulticaster.html#mouseExited(java.awt.event.MouseEvent)
void mouseExited(MouseEvent e);
m
void
mouseDragged
java/awt/AWTEventMulticaster.html#mouseDragged(java.awt.event.MouseEvent)
void mouseDragged(MouseEvent e);
m
void
mouseMoved
java/awt/AWTEventMulticaster.html#mouseMoved(java.awt.event.MouseEvent)
void mouseMoved(MouseEvent e);
m
void
windowOpened
java/awt/AWTEventMulticaster.html#windowOpened(java.awt.event.WindowEvent)
void windowOpened(WindowEvent e);
m
void
windowClosing
java/awt/AWTEventMulticaster.html#windowClosing(java.awt.event.WindowEvent)
void windowClosing(WindowEvent e);
m
void
windowClosed
java/awt/AWTEventMulticaster.html#windowClosed(java.awt.event.WindowEvent)
void windowClosed(WindowEvent e);
m
void
windowIconified
java/awt/AWTEventMulticaster.html#windowIconified(java.awt.event.WindowEvent)
void windowIconified(WindowEvent e);
m
void
windowDeiconified
java/awt/AWTEventMulticaster.html#windowDeiconified(java.awt.event.WindowEvent)
void windowDeiconified(WindowEvent e);
m
void
windowActivated
java/awt/AWTEventMulticaster.html#windowActivated(java.awt.event.WindowEvent)
void windowActivated(WindowEvent e);
m
void
windowDeactivated
java/awt/AWTEventMulticaster.html#windowDeactivated(java.awt.event.WindowEvent)
void windowDeactivated(WindowEvent e);
m
void
actionPerformed
java/awt/AWTEventMulticaster.html#actionPerformed(java.awt.event.ActionEvent)
void actionPerformed(ActionEvent e);
m
void
itemStateChanged
java/awt/AWTEventMulticaster.html#itemStateChanged(java.awt.event.ItemEvent)
void itemStateChanged(ItemEvent e);
m
void
adjustmentValueChanged
java/awt/AWTEventMulticaster.html#adjustmentValueChanged(java.awt.event.AdjustmentEvent)
void adjustmentValueChanged(AdjustmentEvent e);
m
void
textValueChanged
java/awt/AWTEventMulticaster.html#textValueChanged(java.awt.event.TextEvent)
void textValueChanged(TextEvent e);
m
void
inputMethodTextChanged
java/awt/AWTEventMulticaster.html#inputMethodTextChanged(java.awt.event.InputMethodEvent)
void inputMethodTextChanged(InputMethodEvent e);
m
void
caretPositionChanged
java/awt/AWTEventMulticaster.html#caretPositionChanged(java.awt.event.InputMethodEvent)
void caretPositionChanged(InputMethodEvent e);
m
void
hierarchyChanged
java/awt/AWTEventMulticaster.html#hierarchyChanged(java.awt.event.HierarchyEvent)
void hierarchyChanged(HierarchyEvent e);
m
void
ancestorMoved
java/awt/AWTEventMulticaster.html#ancestorMoved(java.awt.event.HierarchyEvent)
void ancestorMoved(HierarchyEvent e);
m
void
ancestorResized
java/awt/AWTEventMulticaster.html#ancestorResized(java.awt.event.HierarchyEvent)
void ancestorResized(HierarchyEvent e);
m
ComponentListener
add
java/awt/AWTEventMulticaster.html#add(java.awt.event.ComponentListener, java.awt.event.ComponentListener)
ComponentListener add(ComponentListener a, ComponentListener b);
ContainerListener add(ContainerListener a, ContainerListener b);
FocusListener add(FocusListener a, FocusListener b);
KeyListener add(KeyListener a, KeyListener b);
MouseListener add(MouseListener a, MouseListener b);
MouseMotionListener add(MouseMotionListener a, MouseMotionListener b);
WindowListener add(WindowListener a, WindowListener b);
ActionListener add(ActionListener a, ActionListener b);
ItemListener add(ItemListener a, ItemListener b);
AdjustmentListener add(AdjustmentListener a, AdjustmentListener b);
TextListener add(TextListener a, TextListener b);
InputMethodListener add(InputMethodListener a, InputMethodListener b);
HierarchyListener add(HierarchyListener a, HierarchyListener b);
HierarchyBoundsListener add(HierarchyBoundsListener a, HierarchyBoundsListener b);
m
ComponentListener
remove
java/awt/AWTEventMulticaster.html#remove(java.awt.event.ComponentListener, java.awt.event.ComponentListener)
ComponentListener remove(ComponentListener l, ComponentListener oldl);
ContainerListener remove(ContainerListener l, ContainerListener oldl);
FocusListener remove(FocusListener l, FocusListener oldl);
KeyListener remove(KeyListener l, KeyListener oldl);
MouseListener remove(MouseListener l, MouseListener oldl);
MouseMotionListener remove(MouseMotionListener l, MouseMotionListener oldl);
WindowListener remove(WindowListener l, WindowListener oldl);
ActionListener remove(ActionListener l, ActionListener oldl);
ItemListener remove(ItemListener l, ItemListener oldl);
AdjustmentListener remove(AdjustmentListener l, AdjustmentListener oldl);
TextListener remove(TextListener l, TextListener oldl);
InputMethodListener remove(InputMethodListener l, InputMethodListener oldl);
HierarchyListener remove(HierarchyListener l, HierarchyListener oldl);
HierarchyBoundsListener remove(HierarchyBoundsListener l, HierarchyBoundsListener oldl);
m
EventListener
addInternal
java/awt/AWTEventMulticaster.html#addInternal(java.util.EventListener, java.util.EventListener)
EventListener addInternal(EventListener a, EventListener b);
m
EventListener
removeInternal
java/awt/AWTEventMulticaster.html#removeInternal(java.util.EventListener, java.util.EventListener)
EventListener removeInternal(EventListener l, EventListener oldl);
m
void
saveInternal
java/awt/AWTEventMulticaster.html#saveInternal(java.io.ObjectOutputStream, java.lang.String)
void saveInternal(ObjectOutputStream s, String k) throws IOException;
m
void
save
java/awt/AWTEventMulticaster.html#save(java.io.ObjectOutputStream, java.lang.String, java.util.EventListener)
void save(ObjectOutputStream s, String k, EventListener l) throws IOException;
Image
class Image extends Object;
Object
java/awt/Image.html
java.awt.Image
c

Image
java/awt/Image.html
Image();
f
Object
UndefinedProperty
java/awt/Image.html#UndefinedProperty
Object UndefinedProperty;
f
int
SCALE_DEFAULT
java/awt/Image.html#SCALE_DEFAULT
int SCALE_DEFAULT;
f
int
SCALE_FAST
java/awt/Image.html#SCALE_FAST
int SCALE_FAST;
f
int
SCALE_SMOOTH
java/awt/Image.html#SCALE_SMOOTH
int SCALE_SMOOTH;
f
int
SCALE_REPLICATE
java/awt/Image.html#SCALE_REPLICATE
int SCALE_REPLICATE;
f
int
SCALE_AREA_AVERAGING
java/awt/Image.html#SCALE_AREA_AVERAGING
int SCALE_AREA_AVERAGING;
m
int
getWidth
java/awt/Image.html#getWidth(java.awt.image.ImageObserver)
int getWidth(ImageObserver observer);
m
int
getHeight
java/awt/Image.html#getHeight(java.awt.image.ImageObserver)
int getHeight(ImageObserver observer);
m
ImageProducer
getSource
java/awt/Image.html#getSource()
ImageProducer getSource();
m
Graphics
getGraphics
java/awt/Image.html#getGraphics()
Graphics getGraphics();
m
Object
getProperty
java/awt/Image.html#getProperty(java.lang.String, java.awt.image.ImageObserver)
Object getProperty(String name, ImageObserver observer);
m
Image
getScaledInstance
java/awt/Image.html#getScaledInstance(int, int, int)
Image getScaledInstance(int width, int height, int hints);
m
void
flush
java/awt/Image.html#flush()
void flush();
Adjustable
class Adjustable;

java/awt/Adjustable.html
java.awt.Adjustable
f
int
HORIZONTAL
java/awt/Adjustable.html#HORIZONTAL
int HORIZONTAL;
f
int
VERTICAL
java/awt/Adjustable.html#VERTICAL
int VERTICAL;
m
int
getOrientation
java/awt/Adjustable.html#getOrientation()
int getOrientation();
m
void
setMinimum
java/awt/Adjustable.html#setMinimum(int)
void setMinimum(int min);
m
int
getMinimum
java/awt/Adjustable.html#getMinimum()
int getMinimum();
m
void
setMaximum
java/awt/Adjustable.html#setMaximum(int)
void setMaximum(int max);
m
int
getMaximum
java/awt/Adjustable.html#getMaximum()
int getMaximum();
m
void
setUnitIncrement
java/awt/Adjustable.html#setUnitIncrement(int)
void setUnitIncrement(int u);
m
int
getUnitIncrement
java/awt/Adjustable.html#getUnitIncrement()
int getUnitIncrement();
m
void
setBlockIncrement
java/awt/Adjustable.html#setBlockIncrement(int)
void setBlockIncrement(int b);
m
int
getBlockIncrement
java/awt/Adjustable.html#getBlockIncrement()
int getBlockIncrement();
m
void
setVisibleAmount
java/awt/Adjustable.html#setVisibleAmount(int)
void setVisibleAmount(int v);
m
int
getVisibleAmount
java/awt/Adjustable.html#getVisibleAmount()
int getVisibleAmount();
m
void
setValue
java/awt/Adjustable.html#setValue(int)
void setValue(int v);
m
int
getValue
java/awt/Adjustable.html#getValue()
int getValue();
m
void
addAdjustmentListener
java/awt/Adjustable.html#addAdjustmentListener(java.awt.event.AdjustmentListener)
void addAdjustmentListener(AdjustmentListener l);
m
void
removeAdjustmentListener
java/awt/Adjustable.html#removeAdjustmentListener(java.awt.event.AdjustmentListener)
void removeAdjustmentListener(AdjustmentListener l);
Robot
class Robot extends Object;
Object
java/awt/Robot.html
java.awt.Robot
c

Robot
java/awt/Robot.html
Robot() throws AWTException;
Robot(GraphicsDevice screen) throws AWTException;
m
void
mouseMove
java/awt/Robot.html#mouseMove(int, int)
void mouseMove(int x, int y);
m
void
mousePress
java/awt/Robot.html#mousePress(int)
void mousePress(int buttons);
m
void
mouseRelease
java/awt/Robot.html#mouseRelease(int)
void mouseRelease(int buttons);
m
void
keyPress
java/awt/Robot.html#keyPress(int)
void keyPress(int keycode);
m
void
keyRelease
java/awt/Robot.html#keyRelease(int)
void keyRelease(int keycode);
m
Color
getPixelColor
java/awt/Robot.html#getPixelColor(int, int)
Color getPixelColor(int x, int y);
m
BufferedImage
createScreenCapture
java/awt/Robot.html#createScreenCapture(java.awt.Rectangle)
BufferedImage createScreenCapture(Rectangle screenRect);
m
boolean
isAutoWaitForIdle
java/awt/Robot.html#isAutoWaitForIdle()
boolean isAutoWaitForIdle();
m
void
setAutoWaitForIdle
java/awt/Robot.html#setAutoWaitForIdle(boolean)
void setAutoWaitForIdle(boolean isOn);
m
int
getAutoDelay
java/awt/Robot.html#getAutoDelay()
int getAutoDelay();
m
void
setAutoDelay
java/awt/Robot.html#setAutoDelay(int)
void setAutoDelay(int ms);
m
void
delay
java/awt/Robot.html#delay(int)
void delay(int ms);
m
void
waitForIdle
java/awt/Robot.html#waitForIdle()
void waitForIdle();
m
String
toString
java/awt/Robot.html#toString()
String toString();
Event
class Event extends Object;
Object
java/awt/Event.html
java.awt.Event
c

Event
java/awt/Event.html
Event(Object target, long when, int id, int x, int y, int key, int modifiers, Object arg);
Event(Object target, long when, int id, int x, int y, int key, int modifiers);
Event(Object target, int id, Object arg);
f
int
SHIFT_MASK
java/awt/Event.html#SHIFT_MASK
int SHIFT_MASK;
f
int
CTRL_MASK
java/awt/Event.html#CTRL_MASK
int CTRL_MASK;
f
int
META_MASK
java/awt/Event.html#META_MASK
int META_MASK;
f
int
ALT_MASK
java/awt/Event.html#ALT_MASK
int ALT_MASK;
f
int
HOME
java/awt/Event.html#HOME
int HOME;
f
int
END
java/awt/Event.html#END
int END;
f
int
PGUP
java/awt/Event.html#PGUP
int PGUP;
f
int
PGDN
java/awt/Event.html#PGDN
int PGDN;
f
int
UP
java/awt/Event.html#UP
int UP;
f
int
DOWN
java/awt/Event.html#DOWN
int DOWN;
f
int
LEFT
java/awt/Event.html#LEFT
int LEFT;
f
int
RIGHT
java/awt/Event.html#RIGHT
int RIGHT;
f
int
F1
java/awt/Event.html#F1
int F1;
f
int
F2
java/awt/Event.html#F2
int F2;
f
int
F3
java/awt/Event.html#F3
int F3;
f
int
F4
java/awt/Event.html#F4
int F4;
f
int
F5
java/awt/Event.html#F5
int F5;
f
int
F6
java/awt/Event.html#F6
int F6;
f
int
F7
java/awt/Event.html#F7
int F7;
f
int
F8
java/awt/Event.html#F8
int F8;
f
int
F9
java/awt/Event.html#F9
int F9;
f
int
F10
java/awt/Event.html#F10
int F10;
f
int
F11
java/awt/Event.html#F11
int F11;
f
int
F12
java/awt/Event.html#F12
int F12;
f
int
PRINT_SCREEN
java/awt/Event.html#PRINT_SCREEN
int PRINT_SCREEN;
f
int
SCROLL_LOCK
java/awt/Event.html#SCROLL_LOCK
int SCROLL_LOCK;
f
int
CAPS_LOCK
java/awt/Event.html#CAPS_LOCK
int CAPS_LOCK;
f
int
NUM_LOCK
java/awt/Event.html#NUM_LOCK
int NUM_LOCK;
f
int
PAUSE
java/awt/Event.html#PAUSE
int PAUSE;
f
int
INSERT
java/awt/Event.html#INSERT
int INSERT;
f
int
ENTER
java/awt/Event.html#ENTER
int ENTER;
f
int
BACK_SPACE
java/awt/Event.html#BACK_SPACE
int BACK_SPACE;
f
int
TAB
java/awt/Event.html#TAB
int TAB;
f
int
ESCAPE
java/awt/Event.html#ESCAPE
int ESCAPE;
f
int
DELETE
java/awt/Event.html#DELETE
int DELETE;
f
int
WINDOW_DESTROY
java/awt/Event.html#WINDOW_DESTROY
int WINDOW_DESTROY;
f
int
WINDOW_EXPOSE
java/awt/Event.html#WINDOW_EXPOSE
int WINDOW_EXPOSE;
f
int
WINDOW_ICONIFY
java/awt/Event.html#WINDOW_ICONIFY
int WINDOW_ICONIFY;
f
int
WINDOW_DEICONIFY
java/awt/Event.html#WINDOW_DEICONIFY
int WINDOW_DEICONIFY;
f
int
WINDOW_MOVED
java/awt/Event.html#WINDOW_MOVED
int WINDOW_MOVED;
f
int
KEY_PRESS
java/awt/Event.html#KEY_PRESS
int KEY_PRESS;
f
int
KEY_RELEASE
java/awt/Event.html#KEY_RELEASE
int KEY_RELEASE;
f
int
KEY_ACTION
java/awt/Event.html#KEY_ACTION
int KEY_ACTION;
f
int
KEY_ACTION_RELEASE
java/awt/Event.html#KEY_ACTION_RELEASE
int KEY_ACTION_RELEASE;
f
int
MOUSE_DOWN
java/awt/Event.html#MOUSE_DOWN
int MOUSE_DOWN;
f
int
MOUSE_UP
java/awt/Event.html#MOUSE_UP
int MOUSE_UP;
f
int
MOUSE_MOVE
java/awt/Event.html#MOUSE_MOVE
int MOUSE_MOVE;
f
int
MOUSE_ENTER
java/awt/Event.html#MOUSE_ENTER
int MOUSE_ENTER;
f
int
MOUSE_EXIT
java/awt/Event.html#MOUSE_EXIT
int MOUSE_EXIT;
f
int
MOUSE_DRAG
java/awt/Event.html#MOUSE_DRAG
int MOUSE_DRAG;
f
int
SCROLL_LINE_UP
java/awt/Event.html#SCROLL_LINE_UP
int SCROLL_LINE_UP;
f
int
SCROLL_LINE_DOWN
java/awt/Event.html#SCROLL_LINE_DOWN
int SCROLL_LINE_DOWN;
f
int
SCROLL_PAGE_UP
java/awt/Event.html#SCROLL_PAGE_UP
int SCROLL_PAGE_UP;
f
int
SCROLL_PAGE_DOWN
java/awt/Event.html#SCROLL_PAGE_DOWN
int SCROLL_PAGE_DOWN;
f
int
SCROLL_ABSOLUTE
java/awt/Event.html#SCROLL_ABSOLUTE
int SCROLL_ABSOLUTE;
f
int
SCROLL_BEGIN
java/awt/Event.html#SCROLL_BEGIN
int SCROLL_BEGIN;
f
int
SCROLL_END
java/awt/Event.html#SCROLL_END
int SCROLL_END;
f
int
LIST_SELECT
java/awt/Event.html#LIST_SELECT
int LIST_SELECT;
f
int
LIST_DESELECT
java/awt/Event.html#LIST_DESELECT
int LIST_DESELECT;
f
int
ACTION_EVENT
java/awt/Event.html#ACTION_EVENT
int ACTION_EVENT;
f
int
LOAD_FILE
java/awt/Event.html#LOAD_FILE
int LOAD_FILE;
f
int
SAVE_FILE
java/awt/Event.html#SAVE_FILE
int SAVE_FILE;
f
int
GOT_FOCUS
java/awt/Event.html#GOT_FOCUS
int GOT_FOCUS;
f
int
LOST_FOCUS
java/awt/Event.html#LOST_FOCUS
int LOST_FOCUS;
f
Object
target
java/awt/Event.html#target
Object target;
f
long
when
java/awt/Event.html#when
long when;
f
int
id
java/awt/Event.html#id
int id;
f
int
x
java/awt/Event.html#x
int x;
f
int
y
java/awt/Event.html#y
int y;
f
int
key
java/awt/Event.html#key
int key;
f
int
modifiers
java/awt/Event.html#modifiers
int modifiers;
f
int
clickCount
java/awt/Event.html#clickCount
int clickCount;
f
Object
arg
java/awt/Event.html#arg
Object arg;
f
Event
evt
java/awt/Event.html#evt
Event evt;
m
void
translate
java/awt/Event.html#translate(int, int)
void translate(int x, int y);
m
boolean
shiftDown
java/awt/Event.html#shiftDown()
boolean shiftDown();
m
boolean
controlDown
java/awt/Event.html#controlDown()
boolean controlDown();
m
boolean
metaDown
java/awt/Event.html#metaDown()
boolean metaDown();
m
String
paramString
java/awt/Event.html#paramString()
String paramString();
m
String
toString
java/awt/Event.html#toString()
String toString();
AWTEvent
class AWTEvent extends EventObject;
EventObject
java/awt/AWTEvent.html
java.awt.AWTEvent
c

AWTEvent
java/awt/AWTEvent.html
AWTEvent(Event event);
AWTEvent(Object source, int id);
f
int
id
java/awt/AWTEvent.html#id
int id;
f
boolean
consumed
java/awt/AWTEvent.html#consumed
boolean consumed;
f
long
COMPONENT_EVENT_MASK
java/awt/AWTEvent.html#COMPONENT_EVENT_MASK
long COMPONENT_EVENT_MASK;
f
long
CONTAINER_EVENT_MASK
java/awt/AWTEvent.html#CONTAINER_EVENT_MASK
long CONTAINER_EVENT_MASK;
f
long
FOCUS_EVENT_MASK
java/awt/AWTEvent.html#FOCUS_EVENT_MASK
long FOCUS_EVENT_MASK;
f
long
KEY_EVENT_MASK
java/awt/AWTEvent.html#KEY_EVENT_MASK
long KEY_EVENT_MASK;
f
long
MOUSE_EVENT_MASK
java/awt/AWTEvent.html#MOUSE_EVENT_MASK
long MOUSE_EVENT_MASK;
f
long
MOUSE_MOTION_EVENT_MASK
java/awt/AWTEvent.html#MOUSE_MOTION_EVENT_MASK
long MOUSE_MOTION_EVENT_MASK;
f
long
WINDOW_EVENT_MASK
java/awt/AWTEvent.html#WINDOW_EVENT_MASK
long WINDOW_EVENT_MASK;
f
long
ACTION_EVENT_MASK
java/awt/AWTEvent.html#ACTION_EVENT_MASK
long ACTION_EVENT_MASK;
f
long
ADJUSTMENT_EVENT_MASK
java/awt/AWTEvent.html#ADJUSTMENT_EVENT_MASK
long ADJUSTMENT_EVENT_MASK;
f
long
ITEM_EVENT_MASK
java/awt/AWTEvent.html#ITEM_EVENT_MASK
long ITEM_EVENT_MASK;
f
long
TEXT_EVENT_MASK
java/awt/AWTEvent.html#TEXT_EVENT_MASK
long TEXT_EVENT_MASK;
f
long
INPUT_METHOD_EVENT_MASK
java/awt/AWTEvent.html#INPUT_METHOD_EVENT_MASK
long INPUT_METHOD_EVENT_MASK;
f
long
PAINT_EVENT_MASK
java/awt/AWTEvent.html#PAINT_EVENT_MASK
long PAINT_EVENT_MASK;
f
long
INVOCATION_EVENT_MASK
java/awt/AWTEvent.html#INVOCATION_EVENT_MASK
long INVOCATION_EVENT_MASK;
f
long
HIERARCHY_EVENT_MASK
java/awt/AWTEvent.html#HIERARCHY_EVENT_MASK
long HIERARCHY_EVENT_MASK;
f
long
HIERARCHY_BOUNDS_EVENT_MASK
java/awt/AWTEvent.html#HIERARCHY_BOUNDS_EVENT_MASK
long HIERARCHY_BOUNDS_EVENT_MASK;
f
int
RESERVED_ID_MAX
java/awt/AWTEvent.html#RESERVED_ID_MAX
int RESERVED_ID_MAX;
m
int
getID
java/awt/AWTEvent.html#getID()
int getID();
m
String
toString
java/awt/AWTEvent.html#toString()
String toString();
m
String
paramString
java/awt/AWTEvent.html#paramString()
String paramString();
m
void
consume
java/awt/AWTEvent.html#consume()
void consume();
m
boolean
isConsumed
java/awt/AWTEvent.html#isConsumed()
boolean isConsumed();
m
void
finalize
java/awt/AWTEvent.html#finalize()
void finalize() throws Throwable;
PageAttributes
class PageAttributes extends Object;
Object
java/awt/PageAttributes.html
java.awt.PageAttributes
c

PageAttributes
java/awt/PageAttributes.html
PageAttributes();
PageAttributes(PageAttributes obj);
PageAttributes(PageAttributes.ColorType color, PageAttributes.MediaType media, PageAttributes.OrientationRequestedType orientationRequested, PageAttributes.OriginType origin, PageAttributes.PrintQualityType printQuality, int[] printerResolution);
l
PageAttributes.ColorType
ColorType
java/awt/PageAttributes.ColorType.html
inner class PageAttributes.ColorType;
l
PageAttributes.MediaType
MediaType
java/awt/PageAttributes.MediaType.html
inner class PageAttributes.MediaType;
l
PageAttributes.OrientationRequestedType
OrientationRequestedType
java/awt/PageAttributes.OrientationRequestedType.html
inner class PageAttributes.OrientationRequestedType;
l
PageAttributes.OriginType
OriginType
java/awt/PageAttributes.OriginType.html
inner class PageAttributes.OriginType;
l
PageAttributes.PrintQualityType
PrintQualityType
java/awt/PageAttributes.PrintQualityType.html
inner class PageAttributes.PrintQualityType;
m
Object
clone
java/awt/PageAttributes.html#clone()
Object clone();
m
void
set
java/awt/PageAttributes.html#set(java.awt.PageAttributes)
void set(PageAttributes obj);
m
PageAttributes.ColorType
getColor
java/awt/PageAttributes.html#getColor()
PageAttributes.ColorType getColor();
m
void
setColor
java/awt/PageAttributes.html#setColor(java.awt.PageAttributes.ColorType)
void setColor(PageAttributes.ColorType color);
m
PageAttributes.MediaType
getMedia
java/awt/PageAttributes.html#getMedia()
PageAttributes.MediaType getMedia();
m
void
setMedia
java/awt/PageAttributes.html#setMedia(java.awt.PageAttributes.MediaType)
void setMedia(PageAttributes.MediaType media);
m
void
setMediaToDefault
java/awt/PageAttributes.html#setMediaToDefault()
void setMediaToDefault();
m
PageAttributes.OrientationRequestedType
getOrientationRequested
java/awt/PageAttributes.html#getOrientationRequested()
PageAttributes.OrientationRequestedType getOrientationRequested();
m
void
setOrientationRequested
java/awt/PageAttributes.html#setOrientationRequested(java.awt.PageAttributes.OrientationRequestedType)
void setOrientationRequested(PageAttributes.OrientationRequestedType orientationRequested);
void setOrientationRequested(int orientationRequested);
m
void
setOrientationRequestedToDefault
java/awt/PageAttributes.html#setOrientationRequestedToDefault()
void setOrientationRequestedToDefault();
m
PageAttributes.OriginType
getOrigin
java/awt/PageAttributes.html#getOrigin()
PageAttributes.OriginType getOrigin();
m
void
setOrigin
java/awt/PageAttributes.html#setOrigin(java.awt.PageAttributes.OriginType)
void setOrigin(PageAttributes.OriginType origin);
m
PageAttributes.PrintQualityType
getPrintQuality
java/awt/PageAttributes.html#getPrintQuality()
PageAttributes.PrintQualityType getPrintQuality();
m
void
setPrintQuality
java/awt/PageAttributes.html#setPrintQuality(java.awt.PageAttributes.PrintQualityType)
void setPrintQuality(PageAttributes.PrintQualityType printQuality);
void setPrintQuality(int printQuality);
m
void
setPrintQualityToDefault
java/awt/PageAttributes.html#setPrintQualityToDefault()
void setPrintQualityToDefault();
m
int
getPrinterResolution
java/awt/PageAttributes.html#getPrinterResolution()
int[] getPrinterResolution();
m
void
setPrinterResolution
java/awt/PageAttributes.html#setPrinterResolution(int[])
void setPrinterResolution(int[] printerResolution);
void setPrinterResolution(int printerResolution);
m
void
setPrinterResolutionToDefault
java/awt/PageAttributes.html#setPrinterResolutionToDefault()
void setPrinterResolutionToDefault();
m
boolean
equals
java/awt/PageAttributes.html#equals(java.lang.Object)
boolean equals(Object obj);
m
int
hashCode
java/awt/PageAttributes.html#hashCode()
int hashCode();
m
String
toString
java/awt/PageAttributes.html#toString()
String toString();
PageAttributes.ColorType
class PageAttributes.ColorType extends AttributeValue;
AttributeValue
java/awt/PageAttributes.ColorType.html
java.awt.PageAttributes.ColorType
f
PageAttributes.ColorType
COLOR
java/awt/PageAttributes.ColorType.html#COLOR
PageAttributes.ColorType COLOR;
f
PageAttributes.ColorType
MONOCHROME
java/awt/PageAttributes.ColorType.html#MONOCHROME
PageAttributes.ColorType MONOCHROME;
PageAttributes.MediaType
class PageAttributes.MediaType extends AttributeValue;
AttributeValue
java/awt/PageAttributes.MediaType.html
java.awt.PageAttributes.MediaType
f
PageAttributes.MediaType
ISO_4A0
java/awt/PageAttributes.MediaType.html#ISO_4A0
PageAttributes.MediaType ISO_4A0;
f
PageAttributes.MediaType
ISO_2A0
java/awt/PageAttributes.MediaType.html#ISO_2A0
PageAttributes.MediaType ISO_2A0;
f
PageAttributes.MediaType
ISO_A0
java/awt/PageAttributes.MediaType.html#ISO_A0
PageAttributes.MediaType ISO_A0;
f
PageAttributes.MediaType
ISO_A1
java/awt/PageAttributes.MediaType.html#ISO_A1
PageAttributes.MediaType ISO_A1;
f
PageAttributes.MediaType
ISO_A2
java/awt/PageAttributes.MediaType.html#ISO_A2
PageAttributes.MediaType ISO_A2;
f
PageAttributes.MediaType
ISO_A3
java/awt/PageAttributes.MediaType.html#ISO_A3
PageAttributes.MediaType ISO_A3;
f
PageAttributes.MediaType
ISO_A4
java/awt/PageAttributes.MediaType.html#ISO_A4
PageAttributes.MediaType ISO_A4;
f
PageAttributes.MediaType
ISO_A5
java/awt/PageAttributes.MediaType.html#ISO_A5
PageAttributes.MediaType ISO_A5;
f
PageAttributes.MediaType
ISO_A6
java/awt/PageAttributes.MediaType.html#ISO_A6
PageAttributes.MediaType ISO_A6;
f
PageAttributes.MediaType
ISO_A7
java/awt/PageAttributes.MediaType.html#ISO_A7
PageAttributes.MediaType ISO_A7;
f
PageAttributes.MediaType
ISO_A8
java/awt/PageAttributes.MediaType.html#ISO_A8
PageAttributes.MediaType ISO_A8;
f
PageAttributes.MediaType
ISO_A9
java/awt/PageAttributes.MediaType.html#ISO_A9
PageAttributes.MediaType ISO_A9;
f
PageAttributes.MediaType
ISO_A10
java/awt/PageAttributes.MediaType.html#ISO_A10
PageAttributes.MediaType ISO_A10;
f
PageAttributes.MediaType
ISO_B0
java/awt/PageAttributes.MediaType.html#ISO_B0
PageAttributes.MediaType ISO_B0;
f
PageAttributes.MediaType
ISO_B1
java/awt/PageAttributes.MediaType.html#ISO_B1
PageAttributes.MediaType ISO_B1;
f
PageAttributes.MediaType
ISO_B2
java/awt/PageAttributes.MediaType.html#ISO_B2
PageAttributes.MediaType ISO_B2;
f
PageAttributes.MediaType
ISO_B3
java/awt/PageAttributes.MediaType.html#ISO_B3
PageAttributes.MediaType ISO_B3;
f
PageAttributes.MediaType
ISO_B4
java/awt/PageAttributes.MediaType.html#ISO_B4
PageAttributes.MediaType ISO_B4;
f
PageAttributes.MediaType
ISO_B5
java/awt/PageAttributes.MediaType.html#ISO_B5
PageAttributes.MediaType ISO_B5;
f
PageAttributes.MediaType
ISO_B6
java/awt/PageAttributes.MediaType.html#ISO_B6
PageAttributes.MediaType ISO_B6;
f
PageAttributes.MediaType
ISO_B7
java/awt/PageAttributes.MediaType.html#ISO_B7
PageAttributes.MediaType ISO_B7;
f
PageAttributes.MediaType
ISO_B8
java/awt/PageAttributes.MediaType.html#ISO_B8
PageAttributes.MediaType ISO_B8;
f
PageAttributes.MediaType
ISO_B9
java/awt/PageAttributes.MediaType.html#ISO_B9
PageAttributes.MediaType ISO_B9;
f
PageAttributes.MediaType
ISO_B10
java/awt/PageAttributes.MediaType.html#ISO_B10
PageAttributes.MediaType ISO_B10;
f
PageAttributes.MediaType
JIS_B0
java/awt/PageAttributes.MediaType.html#JIS_B0
PageAttributes.MediaType JIS_B0;
f
PageAttributes.MediaType
JIS_B1
java/awt/PageAttributes.MediaType.html#JIS_B1
PageAttributes.MediaType JIS_B1;
f
PageAttributes.MediaType
JIS_B2
java/awt/PageAttributes.MediaType.html#JIS_B2
PageAttributes.MediaType JIS_B2;
f
PageAttributes.MediaType
JIS_B3
java/awt/PageAttributes.MediaType.html#JIS_B3
PageAttributes.MediaType JIS_B3;
f
PageAttributes.MediaType
JIS_B4
java/awt/PageAttributes.MediaType.html#JIS_B4
PageAttributes.MediaType JIS_B4;
f
PageAttributes.MediaType
JIS_B5
java/awt/PageAttributes.MediaType.html#JIS_B5
PageAttributes.MediaType JIS_B5;
f
PageAttributes.MediaType
JIS_B6
java/awt/PageAttributes.MediaType.html#JIS_B6
PageAttributes.MediaType JIS_B6;
f
PageAttributes.MediaType
JIS_B7
java/awt/PageAttributes.MediaType.html#JIS_B7
PageAttributes.MediaType JIS_B7;
f
PageAttributes.MediaType
JIS_B8
java/awt/PageAttributes.MediaType.html#JIS_B8
PageAttributes.MediaType JIS_B8;
f
PageAttributes.MediaType
JIS_B9
java/awt/PageAttributes.MediaType.html#JIS_B9
PageAttributes.MediaType JIS_B9;
f
PageAttributes.MediaType
JIS_B10
java/awt/PageAttributes.MediaType.html#JIS_B10
PageAttributes.MediaType JIS_B10;
f
PageAttributes.MediaType
ISO_C0
java/awt/PageAttributes.MediaType.html#ISO_C0
PageAttributes.MediaType ISO_C0;
f
PageAttributes.MediaType
ISO_C1
java/awt/PageAttributes.MediaType.html#ISO_C1
PageAttributes.MediaType ISO_C1;
f
PageAttributes.MediaType
ISO_C2
java/awt/PageAttributes.MediaType.html#ISO_C2
PageAttributes.MediaType ISO_C2;
f
PageAttributes.MediaType
ISO_C3
java/awt/PageAttributes.MediaType.html#ISO_C3
PageAttributes.MediaType ISO_C3;
f
PageAttributes.MediaType
ISO_C4
java/awt/PageAttributes.MediaType.html#ISO_C4
PageAttributes.MediaType ISO_C4;
f
PageAttributes.MediaType
ISO_C5
java/awt/PageAttributes.MediaType.html#ISO_C5
PageAttributes.MediaType ISO_C5;
f
PageAttributes.MediaType
ISO_C6
java/awt/PageAttributes.MediaType.html#ISO_C6
PageAttributes.MediaType ISO_C6;
f
PageAttributes.MediaType
ISO_C7
java/awt/PageAttributes.MediaType.html#ISO_C7
PageAttributes.MediaType ISO_C7;
f
PageAttributes.MediaType
ISO_C8
java/awt/PageAttributes.MediaType.html#ISO_C8
PageAttributes.MediaType ISO_C8;
f
PageAttributes.MediaType
ISO_C9
java/awt/PageAttributes.MediaType.html#ISO_C9
PageAttributes.MediaType ISO_C9;
f
PageAttributes.MediaType
ISO_C10
java/awt/PageAttributes.MediaType.html#ISO_C10
PageAttributes.MediaType ISO_C10;
f
PageAttributes.MediaType
ISO_DESIGNATED_LONG
java/awt/PageAttributes.MediaType.html#ISO_DESIGNATED_LONG
PageAttributes.MediaType ISO_DESIGNATED_LONG;
f
PageAttributes.MediaType
EXECUTIVE
java/awt/PageAttributes.MediaType.html#EXECUTIVE
PageAttributes.MediaType EXECUTIVE;
f
PageAttributes.MediaType
FOLIO
java/awt/PageAttributes.MediaType.html#FOLIO
PageAttributes.MediaType FOLIO;
f
PageAttributes.MediaType
INVOICE
java/awt/PageAttributes.MediaType.html#INVOICE
PageAttributes.MediaType INVOICE;
f
PageAttributes.MediaType
LEDGER
java/awt/PageAttributes.MediaType.html#LEDGER
PageAttributes.MediaType LEDGER;
f
PageAttributes.MediaType
NA_LETTER
java/awt/PageAttributes.MediaType.html#NA_LETTER
PageAttributes.MediaType NA_LETTER;
f
PageAttributes.MediaType
NA_LEGAL
java/awt/PageAttributes.MediaType.html#NA_LEGAL
PageAttributes.MediaType NA_LEGAL;
f
PageAttributes.MediaType
QUARTO
java/awt/PageAttributes.MediaType.html#QUARTO
PageAttributes.MediaType QUARTO;
f
PageAttributes.MediaType
A
java/awt/PageAttributes.MediaType.html#A
PageAttributes.MediaType A;
f
PageAttributes.MediaType
B
java/awt/PageAttributes.MediaType.html#B
PageAttributes.MediaType B;
f
PageAttributes.MediaType
C
java/awt/PageAttributes.MediaType.html#C
PageAttributes.MediaType C;
f
PageAttributes.MediaType
D
java/awt/PageAttributes.MediaType.html#D
PageAttributes.MediaType D;
f
PageAttributes.MediaType
E
java/awt/PageAttributes.MediaType.html#E
PageAttributes.MediaType E;
f
PageAttributes.MediaType
NA_10X15_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_10X15_ENVELOPE
PageAttributes.MediaType NA_10X15_ENVELOPE;
f
PageAttributes.MediaType
NA_10X14_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_10X14_ENVELOPE
PageAttributes.MediaType NA_10X14_ENVELOPE;
f
PageAttributes.MediaType
NA_10X13_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_10X13_ENVELOPE
PageAttributes.MediaType NA_10X13_ENVELOPE;
f
PageAttributes.MediaType
NA_9X12_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_9X12_ENVELOPE
PageAttributes.MediaType NA_9X12_ENVELOPE;
f
PageAttributes.MediaType
NA_9X11_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_9X11_ENVELOPE
PageAttributes.MediaType NA_9X11_ENVELOPE;
f
PageAttributes.MediaType
NA_7X9_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_7X9_ENVELOPE
PageAttributes.MediaType NA_7X9_ENVELOPE;
f
PageAttributes.MediaType
NA_6X9_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_6X9_ENVELOPE
PageAttributes.MediaType NA_6X9_ENVELOPE;
f
PageAttributes.MediaType
NA_NUMBER_9_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_NUMBER_9_ENVELOPE
PageAttributes.MediaType NA_NUMBER_9_ENVELOPE;
f
PageAttributes.MediaType
NA_NUMBER_10_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_NUMBER_10_ENVELOPE
PageAttributes.MediaType NA_NUMBER_10_ENVELOPE;
f
PageAttributes.MediaType
NA_NUMBER_11_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_NUMBER_11_ENVELOPE
PageAttributes.MediaType NA_NUMBER_11_ENVELOPE;
f
PageAttributes.MediaType
NA_NUMBER_12_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_NUMBER_12_ENVELOPE
PageAttributes.MediaType NA_NUMBER_12_ENVELOPE;
f
PageAttributes.MediaType
NA_NUMBER_14_ENVELOPE
java/awt/PageAttributes.MediaType.html#NA_NUMBER_14_ENVELOPE
PageAttributes.MediaType NA_NUMBER_14_ENVELOPE;
f
PageAttributes.MediaType
INVITE_ENVELOPE
java/awt/PageAttributes.MediaType.html#INVITE_ENVELOPE
PageAttributes.MediaType INVITE_ENVELOPE;
f
PageAttributes.MediaType
ITALY_ENVELOPE
java/awt/PageAttributes.MediaType.html#ITALY_ENVELOPE
PageAttributes.MediaType ITALY_ENVELOPE;
f
PageAttributes.MediaType
MONARCH_ENVELOPE
java/awt/PageAttributes.MediaType.html#MONARCH_ENVELOPE
PageAttributes.MediaType MONARCH_ENVELOPE;
f
PageAttributes.MediaType
PERSONAL_ENVELOPE
java/awt/PageAttributes.MediaType.html#PERSONAL_ENVELOPE
PageAttributes.MediaType PERSONAL_ENVELOPE;
f
PageAttributes.MediaType
A0
java/awt/PageAttributes.MediaType.html#A0
PageAttributes.MediaType A0;
f
PageAttributes.MediaType
A1
java/awt/PageAttributes.MediaType.html#A1
PageAttributes.MediaType A1;
f
PageAttributes.MediaType
A2
java/awt/PageAttributes.MediaType.html#A2
PageAttributes.MediaType A2;
f
PageAttributes.MediaType
A3
java/awt/PageAttributes.MediaType.html#A3
PageAttributes.MediaType A3;
f
PageAttributes.MediaType
A4
java/awt/PageAttributes.MediaType.html#A4
PageAttributes.MediaType A4;
f
PageAttributes.MediaType
A5
java/awt/PageAttributes.MediaType.html#A5
PageAttributes.MediaType A5;
f
PageAttributes.MediaType
A6
java/awt/PageAttributes.MediaType.html#A6
PageAttributes.MediaType A6;
f
PageAttributes.MediaType
A7
java/awt/PageAttributes.MediaType.html#A7
PageAttributes.MediaType A7;
f
PageAttributes.MediaType
A8
java/awt/PageAttributes.MediaType.html#A8
PageAttributes.MediaType A8;
f
PageAttributes.MediaType
A9
java/awt/PageAttributes.MediaType.html#A9
PageAttributes.MediaType A9;
f
PageAttributes.MediaType
A10
java/awt/PageAttributes.MediaType.html#A10
PageAttributes.MediaType A10;
f
PageAttributes.MediaType
B0
java/awt/PageAttributes.MediaType.html#B0
PageAttributes.MediaType B0;
f
PageAttributes.MediaType
B1
java/awt/PageAttributes.MediaType.html#B1
PageAttributes.MediaType B1;
f
PageAttributes.MediaType
B2
java/awt/PageAttributes.MediaType.html#B2
PageAttributes.MediaType B2;
f
PageAttributes.MediaType
B3
java/awt/PageAttributes.MediaType.html#B3
PageAttributes.MediaType B3;
f
PageAttributes.MediaType
B4
java/awt/PageAttributes.MediaType.html#B4
PageAttributes.MediaType B4;
f
PageAttributes.MediaType
ISO_B4_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_B4_ENVELOPE
PageAttributes.MediaType ISO_B4_ENVELOPE;
f
PageAttributes.MediaType
B5
java/awt/PageAttributes.MediaType.html#B5
PageAttributes.MediaType B5;
f
PageAttributes.MediaType
ISO_B5_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_B5_ENVELOPE
PageAttributes.MediaType ISO_B5_ENVELOPE;
f
PageAttributes.MediaType
B6
java/awt/PageAttributes.MediaType.html#B6
PageAttributes.MediaType B6;
f
PageAttributes.MediaType
B7
java/awt/PageAttributes.MediaType.html#B7
PageAttributes.MediaType B7;
f
PageAttributes.MediaType
B8
java/awt/PageAttributes.MediaType.html#B8
PageAttributes.MediaType B8;
f
PageAttributes.MediaType
B9
java/awt/PageAttributes.MediaType.html#B9
PageAttributes.MediaType B9;
f
PageAttributes.MediaType
B10
java/awt/PageAttributes.MediaType.html#B10
PageAttributes.MediaType B10;
f
PageAttributes.MediaType
C0
java/awt/PageAttributes.MediaType.html#C0
PageAttributes.MediaType C0;
f
PageAttributes.MediaType
ISO_C0_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C0_ENVELOPE
PageAttributes.MediaType ISO_C0_ENVELOPE;
f
PageAttributes.MediaType
C1
java/awt/PageAttributes.MediaType.html#C1
PageAttributes.MediaType C1;
f
PageAttributes.MediaType
ISO_C1_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C1_ENVELOPE
PageAttributes.MediaType ISO_C1_ENVELOPE;
f
PageAttributes.MediaType
C2
java/awt/PageAttributes.MediaType.html#C2
PageAttributes.MediaType C2;
f
PageAttributes.MediaType
ISO_C2_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C2_ENVELOPE
PageAttributes.MediaType ISO_C2_ENVELOPE;
f
PageAttributes.MediaType
C3
java/awt/PageAttributes.MediaType.html#C3
PageAttributes.MediaType C3;
f
PageAttributes.MediaType
ISO_C3_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C3_ENVELOPE
PageAttributes.MediaType ISO_C3_ENVELOPE;
f
PageAttributes.MediaType
C4
java/awt/PageAttributes.MediaType.html#C4
PageAttributes.MediaType C4;
f
PageAttributes.MediaType
ISO_C4_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C4_ENVELOPE
PageAttributes.MediaType ISO_C4_ENVELOPE;
f
PageAttributes.MediaType
C5
java/awt/PageAttributes.MediaType.html#C5
PageAttributes.MediaType C5;
f
PageAttributes.MediaType
ISO_C5_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C5_ENVELOPE
PageAttributes.MediaType ISO_C5_ENVELOPE;
f
PageAttributes.MediaType
C6
java/awt/PageAttributes.MediaType.html#C6
PageAttributes.MediaType C6;
f
PageAttributes.MediaType
ISO_C6_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C6_ENVELOPE
PageAttributes.MediaType ISO_C6_ENVELOPE;
f
PageAttributes.MediaType
C7
java/awt/PageAttributes.MediaType.html#C7
PageAttributes.MediaType C7;
f
PageAttributes.MediaType
ISO_C7_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C7_ENVELOPE
PageAttributes.MediaType ISO_C7_ENVELOPE;
f
PageAttributes.MediaType
C8
java/awt/PageAttributes.MediaType.html#C8
PageAttributes.MediaType C8;
f
PageAttributes.MediaType
ISO_C8_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C8_ENVELOPE
PageAttributes.MediaType ISO_C8_ENVELOPE;
f
PageAttributes.MediaType
C9
java/awt/PageAttributes.MediaType.html#C9
PageAttributes.MediaType C9;
f
PageAttributes.MediaType
ISO_C9_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C9_ENVELOPE
PageAttributes.MediaType ISO_C9_ENVELOPE;
f
PageAttributes.MediaType
C10
java/awt/PageAttributes.MediaType.html#C10
PageAttributes.MediaType C10;
f
PageAttributes.MediaType
ISO_C10_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_C10_ENVELOPE
PageAttributes.MediaType ISO_C10_ENVELOPE;
f
PageAttributes.MediaType
ISO_DESIGNATED_LONG_ENVELOPE
java/awt/PageAttributes.MediaType.html#ISO_DESIGNATED_LONG_ENVELOPE
PageAttributes.MediaType ISO_DESIGNATED_LONG_ENVELOPE;
f
PageAttributes.MediaType
STATEMENT
java/awt/PageAttributes.MediaType.html#STATEMENT
PageAttributes.MediaType STATEMENT;
f
PageAttributes.MediaType
TABLOID
java/awt/PageAttributes.MediaType.html#TABLOID
PageAttributes.MediaType TABLOID;
f
PageAttributes.MediaType
LETTER
java/awt/PageAttributes.MediaType.html#LETTER
PageAttributes.MediaType LETTER;
f
PageAttributes.MediaType
NOTE
java/awt/PageAttributes.MediaType.html#NOTE
PageAttributes.MediaType NOTE;
f
PageAttributes.MediaType
LEGAL
java/awt/PageAttributes.MediaType.html#LEGAL
PageAttributes.MediaType LEGAL;
f
PageAttributes.MediaType
ENV_10X15
java/awt/PageAttributes.MediaType.html#ENV_10X15
PageAttributes.MediaType ENV_10X15;
f
PageAttributes.MediaType
ENV_10X14
java/awt/PageAttributes.MediaType.html#ENV_10X14
PageAttributes.MediaType ENV_10X14;
f
PageAttributes.MediaType
ENV_10X13
java/awt/PageAttributes.MediaType.html#ENV_10X13
PageAttributes.MediaType ENV_10X13;
f
PageAttributes.MediaType
ENV_9X12
java/awt/PageAttributes.MediaType.html#ENV_9X12
PageAttributes.MediaType ENV_9X12;
f
PageAttributes.MediaType
ENV_9X11
java/awt/PageAttributes.MediaType.html#ENV_9X11
PageAttributes.MediaType ENV_9X11;
f
PageAttributes.MediaType
ENV_7X9
java/awt/PageAttributes.MediaType.html#ENV_7X9
PageAttributes.MediaType ENV_7X9;
f
PageAttributes.MediaType
ENV_6X9
java/awt/PageAttributes.MediaType.html#ENV_6X9
PageAttributes.MediaType ENV_6X9;
f
PageAttributes.MediaType
ENV_9
java/awt/PageAttributes.MediaType.html#ENV_9
PageAttributes.MediaType ENV_9;
f
PageAttributes.MediaType
ENV_10
java/awt/PageAttributes.MediaType.html#ENV_10
PageAttributes.MediaType ENV_10;
f
PageAttributes.MediaType
ENV_11
java/awt/PageAttributes.MediaType.html#ENV_11
PageAttributes.MediaType ENV_11;
f
PageAttributes.MediaType
ENV_12
java/awt/PageAttributes.MediaType.html#ENV_12
PageAttributes.MediaType ENV_12;
f
PageAttributes.MediaType
ENV_14
java/awt/PageAttributes.MediaType.html#ENV_14
PageAttributes.MediaType ENV_14;
f
PageAttributes.MediaType
ENV_INVITE
java/awt/PageAttributes.MediaType.html#ENV_INVITE
PageAttributes.MediaType ENV_INVITE;
f
PageAttributes.MediaType
ENV_ITALY
java/awt/PageAttributes.MediaType.html#ENV_ITALY
PageAttributes.MediaType ENV_ITALY;
f
PageAttributes.MediaType
ENV_MONARCH
java/awt/PageAttributes.MediaType.html#ENV_MONARCH
PageAttributes.MediaType ENV_MONARCH;
f
PageAttributes.MediaType
ENV_PERSONAL
java/awt/PageAttributes.MediaType.html#ENV_PERSONAL
PageAttributes.MediaType ENV_PERSONAL;
f
PageAttributes.MediaType
INVITE
java/awt/PageAttributes.MediaType.html#INVITE
PageAttributes.MediaType INVITE;
f
PageAttributes.MediaType
ITALY
java/awt/PageAttributes.MediaType.html#ITALY
PageAttributes.MediaType ITALY;
f
PageAttributes.MediaType
MONARCH
java/awt/PageAttributes.MediaType.html#MONARCH
PageAttributes.MediaType MONARCH;
f
PageAttributes.MediaType
PERSONAL
java/awt/PageAttributes.MediaType.html#PERSONAL
PageAttributes.MediaType PERSONAL;
PageAttributes.OrientationRequestedType
class PageAttributes.OrientationRequestedType extends AttributeValue;
AttributeValue
java/awt/PageAttributes.OrientationRequestedType.html
java.awt.PageAttributes.OrientationRequestedType
f
PageAttributes.OrientationRequestedType
PORTRAIT
java/awt/PageAttributes.OrientationRequestedType.html#PORTRAIT
PageAttributes.OrientationRequestedType PORTRAIT;
f
PageAttributes.OrientationRequestedType
LANDSCAPE
java/awt/PageAttributes.OrientationRequestedType.html#LANDSCAPE
PageAttributes.OrientationRequestedType LANDSCAPE;
PageAttributes.OriginType
class PageAttributes.OriginType extends AttributeValue;
AttributeValue
java/awt/PageAttributes.OriginType.html
java.awt.PageAttributes.OriginType
f
PageAttributes.OriginType
PHYSICAL
java/awt/PageAttributes.OriginType.html#PHYSICAL
PageAttributes.OriginType PHYSICAL;
f
PageAttributes.OriginType
PRINTABLE
java/awt/PageAttributes.OriginType.html#PRINTABLE
PageAttributes.OriginType PRINTABLE;
PageAttributes.PrintQualityType
class PageAttributes.PrintQualityType extends AttributeValue;
AttributeValue
java/awt/PageAttributes.PrintQualityType.html
java.awt.PageAttributes.PrintQualityType
f
PageAttributes.PrintQualityType
HIGH
java/awt/PageAttributes.PrintQualityType.html#HIGH
PageAttributes.PrintQualityType HIGH;
f
PageAttributes.PrintQualityType
NORMAL
java/awt/PageAttributes.PrintQualityType.html#NORMAL
PageAttributes.PrintQualityType NORMAL;
f
PageAttributes.PrintQualityType
DRAFT
java/awt/PageAttributes.PrintQualityType.html#DRAFT
PageAttributes.PrintQualityType DRAFT;
ItemSelectable
class ItemSelectable;

java/awt/ItemSelectable.html
java.awt.ItemSelectable
m
Object
getSelectedObjects
java/awt/ItemSelectable.html#getSelectedObjects()
Object[] getSelectedObjects();
m
void
addItemListener
java/awt/ItemSelectable.html#addItemListener(java.awt.event.ItemListener)
void addItemListener(ItemListener l);
m
void
removeItemListener
java/awt/ItemSelectable.html#removeItemListener(java.awt.event.ItemListener)
void removeItemListener(ItemListener l);
GraphicsConfigTemplate
class GraphicsConfigTemplate extends Object;
Object
java/awt/GraphicsConfigTemplate.html
java.awt.GraphicsConfigTemplate
c

GraphicsConfigTemplate
java/awt/GraphicsConfigTemplate.html
GraphicsConfigTemplate();
f
int
REQUIRED
java/awt/GraphicsConfigTemplate.html#REQUIRED
int REQUIRED;
f
int
PREFERRED
java/awt/GraphicsConfigTemplate.html#PREFERRED
int PREFERRED;
f
int
UNNECESSARY
java/awt/GraphicsConfigTemplate.html#UNNECESSARY
int UNNECESSARY;
m
GraphicsConfiguration
getBestConfiguration
java/awt/GraphicsConfigTemplate.html#getBestConfiguration(java.awt.GraphicsConfiguration[])
GraphicsConfiguration getBestConfiguration(GraphicsConfiguration[] gc);
m
boolean
isGraphicsConfigSupported
java/awt/GraphicsConfigTemplate.html#isGraphicsConfigSupported(java.awt.GraphicsConfiguration)
boolean isGraphicsConfigSupported(GraphicsConfiguration gc);
Cursor
class Cursor extends Object;
Object
java/awt/Cursor.html
java.awt.Cursor
c

Cursor
java/awt/Cursor.html
Cursor(int type);
Cursor(String name);
f
int
DEFAULT_CURSOR
java/awt/Cursor.html#DEFAULT_CURSOR
int DEFAULT_CURSOR;
f
int
CROSSHAIR_CURSOR
java/awt/Cursor.html#CROSSHAIR_CURSOR
int CROSSHAIR_CURSOR;
f
int
TEXT_CURSOR
java/awt/Cursor.html#TEXT_CURSOR
int TEXT_CURSOR;
f
int
WAIT_CURSOR
java/awt/Cursor.html#WAIT_CURSOR
int WAIT_CURSOR;
f
int
SW_RESIZE_CURSOR
java/awt/Cursor.html#SW_RESIZE_CURSOR
int SW_RESIZE_CURSOR;
f
int
SE_RESIZE_CURSOR
java/awt/Cursor.html#SE_RESIZE_CURSOR
int SE_RESIZE_CURSOR;
f
int
NW_RESIZE_CURSOR
java/awt/Cursor.html#NW_RESIZE_CURSOR
int NW_RESIZE_CURSOR;
f
int
NE_RESIZE_CURSOR
java/awt/Cursor.html#NE_RESIZE_CURSOR
int NE_RESIZE_CURSOR;
f
int
N_RESIZE_CURSOR
java/awt/Cursor.html#N_RESIZE_CURSOR
int N_RESIZE_CURSOR;
f
int
S_RESIZE_CURSOR
java/awt/Cursor.html#S_RESIZE_CURSOR
int S_RESIZE_CURSOR;
f
int
W_RESIZE_CURSOR
java/awt/Cursor.html#W_RESIZE_CURSOR
int W_RESIZE_CURSOR;
f
int
E_RESIZE_CURSOR
java/awt/Cursor.html#E_RESIZE_CURSOR
int E_RESIZE_CURSOR;
f
int
HAND_CURSOR
java/awt/Cursor.html#HAND_CURSOR
int HAND_CURSOR;
f
int
MOVE_CURSOR
java/awt/Cursor.html#MOVE_CURSOR
int MOVE_CURSOR;
f
Cursor
predefined
java/awt/Cursor.html#predefined
Cursor predefined;
f
int
CUSTOM_CURSOR
java/awt/Cursor.html#CUSTOM_CURSOR
int CUSTOM_CURSOR;
f
String
name
java/awt/Cursor.html#name
String name;
m
Cursor
getPredefinedCursor
java/awt/Cursor.html#getPredefinedCursor(int)
Cursor getPredefinedCursor(int type);
m
Cursor
getSystemCustomCursor
java/awt/Cursor.html#getSystemCustomCursor(java.lang.String)
Cursor getSystemCustomCursor(String name) throws AWTException;
m
Cursor
getDefaultCursor
java/awt/Cursor.html#getDefaultCursor()
Cursor getDefaultCursor();
m
int
getType
java/awt/Cursor.html#getType()
int getType();
m
String
getName
java/awt/Cursor.html#getName()
String getName();
m
String
toString
java/awt/Cursor.html#toString()
String toString();
m
void
finalize
java/awt/Cursor.html#finalize()
void finalize() throws Throwable;
TexturePaint
class TexturePaint extends Object;
Object
java/awt/TexturePaint.html
java.awt.TexturePaint
c

TexturePaint
java/awt/TexturePaint.html
TexturePaint(BufferedImage txtr, Rectangle2D anchor);
m
BufferedImage
getImage
java/awt/TexturePaint.html#getImage()
BufferedImage getImage();
m
Rectangle2D
getAnchorRect
java/awt/TexturePaint.html#getAnchorRect()
Rectangle2D getAnchorRect();
m
PaintContext
createContext
java/awt/TexturePaint.html#createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)
PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints);
m
int
getTransparency
java/awt/TexturePaint.html#getTransparency()
int getTransparency();
EventQueue
class EventQueue extends Object;
Object
java/awt/EventQueue.html
java.awt.EventQueue
c

EventQueue
java/awt/EventQueue.html
EventQueue();
m
void
postEvent
java/awt/EventQueue.html#postEvent(java.awt.AWTEvent)
void postEvent(AWTEvent theEvent);
m
AWTEvent
getNextEvent
java/awt/EventQueue.html#getNextEvent()
AWTEvent getNextEvent() throws InterruptedException;
m
AWTEvent
peekEvent
java/awt/EventQueue.html#peekEvent()
AWTEvent peekEvent();
AWTEvent peekEvent(int id);
m
void
dispatchEvent
java/awt/EventQueue.html#dispatchEvent(java.awt.AWTEvent)
void dispatchEvent(AWTEvent event);
m
void
push
java/awt/EventQueue.html#push(java.awt.EventQueue)
void push(EventQueue newEventQueue);
m
void
pop
java/awt/EventQueue.html#pop()
void pop() throws EmptyStackException;
m
boolean
isDispatchThread
java/awt/EventQueue.html#isDispatchThread()
boolean isDispatchThread();
m
void
invokeLater
java/awt/EventQueue.html#invokeLater(java.lang.Runnable)
void invokeLater(Runnable runnable);
m
void
invokeAndWait
java/awt/EventQueue.html#invokeAndWait(java.lang.Runnable)
void invokeAndWait(Runnable runnable) throws InterruptedException, InvocationTargetException;
Container.AccessibleAWTContainer.AccessibleContainerHandler
class Container.AccessibleAWTContainer.AccessibleContainerHandler extends Object;
Object
java/awt/Container.AccessibleAWTContainer.AccessibleContainerHandler.html
java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler
c

Container.AccessibleAWTContainer.AccessibleContainerHandler
java/awt/Container.AccessibleAWTContainer.AccessibleContainerHandler.html
Container.AccessibleAWTContainer.AccessibleContainerHandler(Container.AccessibleAWTContainer this$1);
m
void
componentAdded
java/awt/Container.AccessibleAWTContainer.AccessibleContainerHandler.html#componentAdded(java.awt.event.ContainerEvent)
void componentAdded(ContainerEvent e);
m
void
componentRemoved
java/awt/Container.AccessibleAWTContainer.AccessibleContainerHandler.html#componentRemoved(java.awt.event.ContainerEvent)
void componentRemoved(ContainerEvent e);
PaintContext
class PaintContext;

java/awt/PaintContext.html
java.awt.PaintContext
m
void
dispose
java/awt/PaintContext.html#dispose()
void dispose();
m
ColorModel
getColorModel
java/awt/PaintContext.html#getColorModel()
ColorModel getColorModel();
m
Raster
getRaster
java/awt/PaintContext.html#getRaster(int, int, int, int)
Raster getRaster(int x, int y, int w, int h);
GraphicsConfiguration
class GraphicsConfiguration extends Object;
Object
java/awt/GraphicsConfiguration.html
java.awt.GraphicsConfiguration
c

GraphicsConfiguration
java/awt/GraphicsConfiguration.html
GraphicsConfiguration();
m
GraphicsDevice
getDevice
java/awt/GraphicsConfiguration.html#getDevice()
GraphicsDevice getDevice();
m
BufferedImage
createCompatibleImage
java/awt/GraphicsConfiguration.html#createCompatibleImage(int, int)
BufferedImage createCompatibleImage(int width, int height);
BufferedImage createCompatibleImage(int width, int height, int transparency);
m
ColorModel
getColorModel
java/awt/GraphicsConfiguration.html#getColorModel()
ColorModel getColorModel();
ColorModel getColorModel(int transparency);
m
AffineTransform
getDefaultTransform
java/awt/GraphicsConfiguration.html#getDefaultTransform()
AffineTransform getDefaultTransform();
m
AffineTransform
getNormalizingTransform
java/awt/GraphicsConfiguration.html#getNormalizingTransform()
AffineTransform getNormalizingTransform();
m
Rectangle
getBounds
java/awt/GraphicsConfiguration.html#getBounds()
Rectangle getBounds();
Menu
class Menu extends MenuItem;
MenuItem
java/awt/Menu.html
java.awt.Menu
c

Menu
java/awt/Menu.html
Menu();
Menu(String label);
Menu(String label, boolean tearOff);
l
Menu.AccessibleAWTMenu
AccessibleAWTMenu
java/awt/Menu.AccessibleAWTMenu.html
inner class Menu.AccessibleAWTMenu;
m
void
addNotify
java/awt/Menu.html#addNotify()
void addNotify();
m
void
removeNotify
java/awt/Menu.html#removeNotify()
void removeNotify();
m
boolean
isTearOff
java/awt/Menu.html#isTearOff()
boolean isTearOff();
m
int
getItemCount
java/awt/Menu.html#getItemCount()
int getItemCount();
m
int
countItems
java/awt/Menu.html#countItems()
int countItems();
m
MenuItem
getItem
java/awt/Menu.html#getItem(int)
MenuItem getItem(int index);
m
MenuItem
add
java/awt/Menu.html#add(java.awt.MenuItem)
MenuItem add(MenuItem mi);
void add(String label);
m
void
insert
java/awt/Menu.html#insert(java.awt.MenuItem, int)
void insert(MenuItem menuitem, int index);
void insert(String label, int index);
m
void
addSeparator
java/awt/Menu.html#addSeparator()
void addSeparator();
m
void
insertSeparator
java/awt/Menu.html#insertSeparator(int)
void insertSeparator(int index);
m
void
remove
java/awt/Menu.html#remove(int)
void remove(int index);
void remove(MenuComponent item);
m
void
removeAll
java/awt/Menu.html#removeAll()
void removeAll();
m
String
paramString
java/awt/Menu.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Menu.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
PopupMenu
class PopupMenu extends Menu;
Menu
java/awt/PopupMenu.html
java.awt.PopupMenu
c

PopupMenu
java/awt/PopupMenu.html
PopupMenu();
PopupMenu(String label);
l
PopupMenu.AccessibleAWTPopupMenu
AccessibleAWTPopupMenu
java/awt/PopupMenu.AccessibleAWTPopupMenu.html
inner class PopupMenu.AccessibleAWTPopupMenu;
m
void
addNotify
java/awt/PopupMenu.html#addNotify()
void addNotify();
m
void
show
java/awt/PopupMenu.html#show(java.awt.Component, int, int)
void show(Component origin, int x, int y);
m
AccessibleContext
getAccessibleContext
java/awt/PopupMenu.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Menu.AccessibleAWTMenu
class Menu.AccessibleAWTMenu extends MenuItem.AccessibleAWTMenuItem;
MenuItem.AccessibleAWTMenuItem
java/awt/Menu.AccessibleAWTMenu.html
java.awt.Menu.AccessibleAWTMenu
c

Menu.AccessibleAWTMenu
java/awt/Menu.AccessibleAWTMenu.html
Menu.AccessibleAWTMenu(Menu this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Menu.AccessibleAWTMenu.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
PopupMenu.AccessibleAWTPopupMenu
class PopupMenu.AccessibleAWTPopupMenu extends Menu.AccessibleAWTMenu;
Menu.AccessibleAWTMenu
java/awt/PopupMenu.AccessibleAWTPopupMenu.html
java.awt.PopupMenu.AccessibleAWTPopupMenu
c

PopupMenu.AccessibleAWTPopupMenu
java/awt/PopupMenu.AccessibleAWTPopupMenu.html
PopupMenu.AccessibleAWTPopupMenu(PopupMenu this$0);
m
AccessibleRole
getAccessibleRole
java/awt/PopupMenu.AccessibleAWTPopupMenu.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
AlphaComposite
class AlphaComposite extends Object;
Object
java/awt/AlphaComposite.html
java.awt.AlphaComposite
f
int
CLEAR
java/awt/AlphaComposite.html#CLEAR
int CLEAR;
f
int
SRC
java/awt/AlphaComposite.html#SRC
int SRC;
f
int
SRC_OVER
java/awt/AlphaComposite.html#SRC_OVER
int SRC_OVER;
f
int
DST_OVER
java/awt/AlphaComposite.html#DST_OVER
int DST_OVER;
f
int
SRC_IN
java/awt/AlphaComposite.html#SRC_IN
int SRC_IN;
f
int
DST_IN
java/awt/AlphaComposite.html#DST_IN
int DST_IN;
f
int
SRC_OUT
java/awt/AlphaComposite.html#SRC_OUT
int SRC_OUT;
f
int
DST_OUT
java/awt/AlphaComposite.html#DST_OUT
int DST_OUT;
f
AlphaComposite
Clear
java/awt/AlphaComposite.html#Clear
AlphaComposite Clear;
f
AlphaComposite
Src
java/awt/AlphaComposite.html#Src
AlphaComposite Src;
f
AlphaComposite
SrcOver
java/awt/AlphaComposite.html#SrcOver
AlphaComposite SrcOver;
f
AlphaComposite
DstOver
java/awt/AlphaComposite.html#DstOver
AlphaComposite DstOver;
f
AlphaComposite
SrcIn
java/awt/AlphaComposite.html#SrcIn
AlphaComposite SrcIn;
f
AlphaComposite
DstIn
java/awt/AlphaComposite.html#DstIn
AlphaComposite DstIn;
f
AlphaComposite
SrcOut
java/awt/AlphaComposite.html#SrcOut
AlphaComposite SrcOut;
f
AlphaComposite
DstOut
java/awt/AlphaComposite.html#DstOut
AlphaComposite DstOut;
m
AlphaComposite
getInstance
java/awt/AlphaComposite.html#getInstance(int)
AlphaComposite getInstance(int rule);
AlphaComposite getInstance(int rule, float alpha);
m
CompositeContext
createContext
java/awt/AlphaComposite.html#createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints)
CompositeContext createContext(ColorModel srcColorModel, ColorModel dstColorModel, RenderingHints hints);
m
float
getAlpha
java/awt/AlphaComposite.html#getAlpha()
float getAlpha();
m
int
getRule
java/awt/AlphaComposite.html#getRule()
int getRule();
m
int
hashCode
java/awt/AlphaComposite.html#hashCode()
int hashCode();
m
boolean
equals
java/awt/AlphaComposite.html#equals(java.lang.Object)
boolean equals(Object obj);
AWTPermission
class AWTPermission extends BasicPermission;
BasicPermission
java/awt/AWTPermission.html
java.awt.AWTPermission
c

AWTPermission
java/awt/AWTPermission.html
AWTPermission(String name);
AWTPermission(String name, String actions);
Dialog.AccessibleAWTDialog
class Dialog.AccessibleAWTDialog extends Window.AccessibleAWTWindow;
Window.AccessibleAWTWindow
java/awt/Dialog.AccessibleAWTDialog.html
java.awt.Dialog.AccessibleAWTDialog
c

Dialog.AccessibleAWTDialog
java/awt/Dialog.AccessibleAWTDialog.html
Dialog.AccessibleAWTDialog(Dialog this$0);
m
AccessibleRole
getAccessibleRole
java/awt/Dialog.AccessibleAWTDialog.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
AccessibleStateSet
getAccessibleStateSet
java/awt/Dialog.AccessibleAWTDialog.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
PrintJob
class PrintJob extends Object;
Object
java/awt/PrintJob.html
java.awt.PrintJob
c

PrintJob
java/awt/PrintJob.html
PrintJob();
m
Graphics
getGraphics
java/awt/PrintJob.html#getGraphics()
Graphics getGraphics();
m
Dimension
getPageDimension
java/awt/PrintJob.html#getPageDimension()
Dimension getPageDimension();
m
int
getPageResolution
java/awt/PrintJob.html#getPageResolution()
int getPageResolution();
m
boolean
lastPageFirst
java/awt/PrintJob.html#lastPageFirst()
boolean lastPageFirst();
m
void
end
java/awt/PrintJob.html#end()
void end();
m
void
finalize
java/awt/PrintJob.html#finalize()
void finalize();
FontMetrics
class FontMetrics extends Object;
Object
java/awt/FontMetrics.html
java.awt.FontMetrics
c

FontMetrics
java/awt/FontMetrics.html
FontMetrics(Font font);
f
Font
font
java/awt/FontMetrics.html#font
Font font;
m
Font
getFont
java/awt/FontMetrics.html#getFont()
Font getFont();
m
int
getLeading
java/awt/FontMetrics.html#getLeading()
int getLeading();
m
int
getAscent
java/awt/FontMetrics.html#getAscent()
int getAscent();
m
int
getDescent
java/awt/FontMetrics.html#getDescent()
int getDescent();
m
int
getHeight
java/awt/FontMetrics.html#getHeight()
int getHeight();
m
int
getMaxAscent
java/awt/FontMetrics.html#getMaxAscent()
int getMaxAscent();
m
int
getMaxDescent
java/awt/FontMetrics.html#getMaxDescent()
int getMaxDescent();
m
int
getMaxDecent
java/awt/FontMetrics.html#getMaxDecent()
int getMaxDecent();
m
int
getMaxAdvance
java/awt/FontMetrics.html#getMaxAdvance()
int getMaxAdvance();
m
int
charWidth
java/awt/FontMetrics.html#charWidth(int)
int charWidth(int ch);
int charWidth(char ch);
m
int
stringWidth
java/awt/FontMetrics.html#stringWidth(java.lang.String)
int stringWidth(String str);
m
int
charsWidth
java/awt/FontMetrics.html#charsWidth(char[], int, int)
int charsWidth(char[] data, int off, int len);
m
int
bytesWidth
java/awt/FontMetrics.html#bytesWidth(byte[], int, int)
int bytesWidth(byte[] data, int off, int len);
m
int
getWidths
java/awt/FontMetrics.html#getWidths()
int[] getWidths();
m
boolean
hasUniformLineMetrics
java/awt/FontMetrics.html#hasUniformLineMetrics()
boolean hasUniformLineMetrics();
m
LineMetrics
getLineMetrics
java/awt/FontMetrics.html#getLineMetrics(java.lang.String, java.awt.Graphics)
LineMetrics getLineMetrics(String str, Graphics context);
LineMetrics getLineMetrics(String str, int beginIndex, int limit, Graphics context);
LineMetrics getLineMetrics(char[] chars, int beginIndex, int limit, Graphics context);
LineMetrics getLineMetrics(CharacterIterator ci, int beginIndex, int limit, Graphics context);
m
Rectangle2D
getStringBounds
java/awt/FontMetrics.html#getStringBounds(java.lang.String, java.awt.Graphics)
Rectangle2D getStringBounds(String str, Graphics context);
Rectangle2D getStringBounds(String str, int beginIndex, int limit, Graphics context);
Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit, Graphics context);
Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex, int limit, Graphics context);
m
Rectangle2D
getMaxCharBounds
java/awt/FontMetrics.html#getMaxCharBounds(java.awt.Graphics)
Rectangle2D getMaxCharBounds(Graphics context);
m
String
toString
java/awt/FontMetrics.html#toString()
String toString();
Toolkit
class Toolkit extends Object;
Object
java/awt/Toolkit.html
java.awt.Toolkit
c

Toolkit
java/awt/Toolkit.html
Toolkit();
f
Map
desktopProperties
java/awt/Toolkit.html#desktopProperties
Map desktopProperties;
f
PropertyChangeSupport
desktopPropsSupport
java/awt/Toolkit.html#desktopPropsSupport
PropertyChangeSupport desktopPropsSupport;
m
ButtonPeer
createButton
java/awt/Toolkit.html#createButton(java.awt.Button)
ButtonPeer createButton(Button target);
m
TextFieldPeer
createTextField
java/awt/Toolkit.html#createTextField(java.awt.TextField)
TextFieldPeer createTextField(TextField target);
m
LabelPeer
createLabel
java/awt/Toolkit.html#createLabel(java.awt.Label)
LabelPeer createLabel(Label target);
m
ListPeer
createList
java/awt/Toolkit.html#createList(java.awt.List)
ListPeer createList(List target);
m
CheckboxPeer
createCheckbox
java/awt/Toolkit.html#createCheckbox(java.awt.Checkbox)
CheckboxPeer createCheckbox(Checkbox target);
m
ScrollbarPeer
createScrollbar
java/awt/Toolkit.html#createScrollbar(java.awt.Scrollbar)
ScrollbarPeer createScrollbar(Scrollbar target);
m
ScrollPanePeer
createScrollPane
java/awt/Toolkit.html#createScrollPane(java.awt.ScrollPane)
ScrollPanePeer createScrollPane(ScrollPane target);
m
TextAreaPeer
createTextArea
java/awt/Toolkit.html#createTextArea(java.awt.TextArea)
TextAreaPeer createTextArea(TextArea target);
m
ChoicePeer
createChoice
java/awt/Toolkit.html#createChoice(java.awt.Choice)
ChoicePeer createChoice(Choice target);
m
FramePeer
createFrame
java/awt/Toolkit.html#createFrame(java.awt.Frame)
FramePeer createFrame(Frame target);
m
CanvasPeer
createCanvas
java/awt/Toolkit.html#createCanvas(java.awt.Canvas)
CanvasPeer createCanvas(Canvas target);
m
PanelPeer
createPanel
java/awt/Toolkit.html#createPanel(java.awt.Panel)
PanelPeer createPanel(Panel target);
m
WindowPeer
createWindow
java/awt/Toolkit.html#createWindow(java.awt.Window)
WindowPeer createWindow(Window target);
m
DialogPeer
createDialog
java/awt/Toolkit.html#createDialog(java.awt.Dialog)
DialogPeer createDialog(Dialog target);
m
MenuBarPeer
createMenuBar
java/awt/Toolkit.html#createMenuBar(java.awt.MenuBar)
MenuBarPeer createMenuBar(MenuBar target);
m
MenuPeer
createMenu
java/awt/Toolkit.html#createMenu(java.awt.Menu)
MenuPeer createMenu(Menu target);
m
PopupMenuPeer
createPopupMenu
java/awt/Toolkit.html#createPopupMenu(java.awt.PopupMenu)
PopupMenuPeer createPopupMenu(PopupMenu target);
m
MenuItemPeer
createMenuItem
java/awt/Toolkit.html#createMenuItem(java.awt.MenuItem)
MenuItemPeer createMenuItem(MenuItem target);
m
FileDialogPeer
createFileDialog
java/awt/Toolkit.html#createFileDialog(java.awt.FileDialog)
FileDialogPeer createFileDialog(FileDialog target);
m
CheckboxMenuItemPeer
createCheckboxMenuItem
java/awt/Toolkit.html#createCheckboxMenuItem(java.awt.CheckboxMenuItem)
CheckboxMenuItemPeer createCheckboxMenuItem(CheckboxMenuItem target);
m
LightweightPeer
createComponent
java/awt/Toolkit.html#createComponent(java.awt.Component)
LightweightPeer createComponent(Component target);
m
FontPeer
getFontPeer
java/awt/Toolkit.html#getFontPeer(java.lang.String, int)
FontPeer getFontPeer(String name, int style);
m
void
loadSystemColors
java/awt/Toolkit.html#loadSystemColors(int[])
void loadSystemColors(int[] systemColors);
m
Dimension
getScreenSize
java/awt/Toolkit.html#getScreenSize()
Dimension getScreenSize();
m
int
getScreenResolution
java/awt/Toolkit.html#getScreenResolution()
int getScreenResolution();
m
ColorModel
getColorModel
java/awt/Toolkit.html#getColorModel()
ColorModel getColorModel();
m
String
getFontList
java/awt/Toolkit.html#getFontList()
String[] getFontList();
m
FontMetrics
getFontMetrics
java/awt/Toolkit.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font font);
m
void
sync
java/awt/Toolkit.html#sync()
void sync();
m
Toolkit
getDefaultToolkit
java/awt/Toolkit.html#getDefaultToolkit()
Toolkit getDefaultToolkit();
m
Image
getImage
java/awt/Toolkit.html#getImage(java.lang.String)
Image getImage(String filename);
Image getImage(URL url);
m
Image
createImage
java/awt/Toolkit.html#createImage(java.lang.String)
Image createImage(String filename);
Image createImage(URL url);
m
boolean
prepareImage
java/awt/Toolkit.html#prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
boolean prepareImage(Image image, int width, int height, ImageObserver observer);
m
int
checkImage
java/awt/Toolkit.html#checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
int checkImage(Image image, int width, int height, ImageObserver observer);
m
Image
createImage
java/awt/Toolkit.html#createImage(java.awt.image.ImageProducer)
Image createImage(ImageProducer producer);
Image createImage(byte[] imagedata);
Image createImage(byte[] imagedata, int imageoffset, int imagelength);
m
PrintJob
getPrintJob
java/awt/Toolkit.html#getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties)
PrintJob getPrintJob(Frame frame, String jobtitle, Properties props);
PrintJob getPrintJob(Frame frame, String jobtitle, JobAttributes jobAttributes, PageAttributes pageAttributes);
m
void
beep
java/awt/Toolkit.html#beep()
void beep();
m
Clipboard
getSystemClipboard
java/awt/Toolkit.html#getSystemClipboard()
Clipboard getSystemClipboard();
m
int
getMenuShortcutKeyMask
java/awt/Toolkit.html#getMenuShortcutKeyMask()
int getMenuShortcutKeyMask();
m
boolean
getLockingKeyState
java/awt/Toolkit.html#getLockingKeyState(int)
boolean getLockingKeyState(int keyCode);
m
void
setLockingKeyState
java/awt/Toolkit.html#setLockingKeyState(int, boolean)
void setLockingKeyState(int keyCode, boolean on);
m
Container
getNativeContainer
java/awt/Toolkit.html#getNativeContainer(java.awt.Component)
Container getNativeContainer(Component c);
m
Cursor
createCustomCursor
java/awt/Toolkit.html#createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String)
Cursor createCustomCursor(Image cursor, Point hotSpot, String name) throws IndexOutOfBoundsException;
m
Dimension
getBestCursorSize
java/awt/Toolkit.html#getBestCursorSize(int, int)
Dimension getBestCursorSize(int preferredWidth, int preferredHeight);
m
int
getMaximumCursorColors
java/awt/Toolkit.html#getMaximumCursorColors()
int getMaximumCursorColors();
m
String
getProperty
java/awt/Toolkit.html#getProperty(java.lang.String, java.lang.String)
String getProperty(String key, String defaultValue);
m
EventQueue
getSystemEventQueue
java/awt/Toolkit.html#getSystemEventQueue()
EventQueue getSystemEventQueue();
m
EventQueue
getSystemEventQueueImpl
java/awt/Toolkit.html#getSystemEventQueueImpl()
EventQueue getSystemEventQueueImpl();
m
DragSourceContextPeer
createDragSourceContextPeer
java/awt/Toolkit.html#createDragSourceContextPeer(java.awt.dnd.DragGestureEvent)
DragSourceContextPeer createDragSourceContextPeer(DragGestureEvent dge) throws InvalidDnDOperationException;
m
DragGestureRecognizer
createDragGestureRecognizer
java/awt/Toolkit.html#createDragGestureRecognizer(java.lang.Class, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener)
DragGestureRecognizer createDragGestureRecognizer(Class abstractRecognizerClass, DragSource ds, Component c, int srcActions, DragGestureListener dgl);
m
Object
getDesktopProperty
java/awt/Toolkit.html#getDesktopProperty(java.lang.String)
Object getDesktopProperty(String propertyName);
m
void
setDesktopProperty
java/awt/Toolkit.html#setDesktopProperty(java.lang.String, java.lang.Object)
void setDesktopProperty(String name, Object newValue);
m
Object
lazilyLoadDesktopProperty
java/awt/Toolkit.html#lazilyLoadDesktopProperty(java.lang.String)
Object lazilyLoadDesktopProperty(String name);
m
void
initializeDesktopProperties
java/awt/Toolkit.html#initializeDesktopProperties()
void initializeDesktopProperties();
m
void
addPropertyChangeListener
java/awt/Toolkit.html#addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
void addPropertyChangeListener(String name, PropertyChangeListener pcl);
m
void
removePropertyChangeListener
java/awt/Toolkit.html#removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)
void removePropertyChangeListener(String name, PropertyChangeListener pcl);
m
void
addAWTEventListener
java/awt/Toolkit.html#addAWTEventListener(java.awt.event.AWTEventListener, long)
void addAWTEventListener(AWTEventListener listener, long eventMask);
m
void
removeAWTEventListener
java/awt/Toolkit.html#removeAWTEventListener(java.awt.event.AWTEventListener)
void removeAWTEventListener(AWTEventListener listener);
m
Map
mapInputMethodHighlight
java/awt/Toolkit.html#mapInputMethodHighlight(java.awt.im.InputMethodHighlight)
Map mapInputMethodHighlight(InputMethodHighlight highlight);
TextArea
class TextArea extends TextComponent;
TextComponent
java/awt/TextArea.html
java.awt.TextArea
c

TextArea
java/awt/TextArea.html
TextArea();
TextArea(String text);
TextArea(int rows, int columns);
TextArea(String text, int rows, int columns);
TextArea(String text, int rows, int columns, int scrollbars);
l
TextArea.AccessibleAWTTextArea
AccessibleAWTTextArea
java/awt/TextArea.AccessibleAWTTextArea.html
inner class TextArea.AccessibleAWTTextArea;
f
int
SCROLLBARS_BOTH
java/awt/TextArea.html#SCROLLBARS_BOTH
int SCROLLBARS_BOTH;
f
int
SCROLLBARS_VERTICAL_ONLY
java/awt/TextArea.html#SCROLLBARS_VERTICAL_ONLY
int SCROLLBARS_VERTICAL_ONLY;
f
int
SCROLLBARS_HORIZONTAL_ONLY
java/awt/TextArea.html#SCROLLBARS_HORIZONTAL_ONLY
int SCROLLBARS_HORIZONTAL_ONLY;
f
int
SCROLLBARS_NONE
java/awt/TextArea.html#SCROLLBARS_NONE
int SCROLLBARS_NONE;
m
void
addNotify
java/awt/TextArea.html#addNotify()
void addNotify();
m
void
insert
java/awt/TextArea.html#insert(java.lang.String, int)
void insert(String str, int pos);
m
void
insertText
java/awt/TextArea.html#insertText(java.lang.String, int)
void insertText(String str, int pos);
m
void
append
java/awt/TextArea.html#append(java.lang.String)
void append(String str);
m
void
appendText
java/awt/TextArea.html#appendText(java.lang.String)
void appendText(String str);
m
void
replaceRange
java/awt/TextArea.html#replaceRange(java.lang.String, int, int)
void replaceRange(String str, int start, int end);
m
void
replaceText
java/awt/TextArea.html#replaceText(java.lang.String, int, int)
void replaceText(String str, int start, int end);
m
int
getRows
java/awt/TextArea.html#getRows()
int getRows();
m
void
setRows
java/awt/TextArea.html#setRows(int)
void setRows(int rows);
m
int
getColumns
java/awt/TextArea.html#getColumns()
int getColumns();
m
void
setColumns
java/awt/TextArea.html#setColumns(int)
void setColumns(int columns);
m
int
getScrollbarVisibility
java/awt/TextArea.html#getScrollbarVisibility()
int getScrollbarVisibility();
m
Dimension
getPreferredSize
java/awt/TextArea.html#getPreferredSize(int, int)
Dimension getPreferredSize(int rows, int columns);
m
Dimension
preferredSize
java/awt/TextArea.html#preferredSize(int, int)
Dimension preferredSize(int rows, int columns);
m
Dimension
getPreferredSize
java/awt/TextArea.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
preferredSize
java/awt/TextArea.html#preferredSize()
Dimension preferredSize();
m
Dimension
getMinimumSize
java/awt/TextArea.html#getMinimumSize(int, int)
Dimension getMinimumSize(int rows, int columns);
m
Dimension
minimumSize
java/awt/TextArea.html#minimumSize(int, int)
Dimension minimumSize(int rows, int columns);
m
Dimension
getMinimumSize
java/awt/TextArea.html#getMinimumSize()
Dimension getMinimumSize();
m
Dimension
minimumSize
java/awt/TextArea.html#minimumSize()
Dimension minimumSize();
m
String
paramString
java/awt/TextArea.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/TextArea.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
TextArea.AccessibleAWTTextArea
class TextArea.AccessibleAWTTextArea extends TextComponent.AccessibleAWTTextComponent;
TextComponent.AccessibleAWTTextComponent
java/awt/TextArea.AccessibleAWTTextArea.html
java.awt.TextArea.AccessibleAWTTextArea
c

TextArea.AccessibleAWTTextArea
java/awt/TextArea.AccessibleAWTTextArea.html
TextArea.AccessibleAWTTextArea(TextArea this$0);
m
AccessibleStateSet
getAccessibleStateSet
java/awt/TextArea.AccessibleAWTTextArea.html#getAccessibleStateSet()
AccessibleStateSet getAccessibleStateSet();
Dimension
class Dimension extends Dimension2D;
Dimension2D
java/awt/Dimension.html
java.awt.Dimension
c

Dimension
java/awt/Dimension.html
Dimension();
Dimension(Dimension d);
Dimension(int width, int height);
f
int
width
java/awt/Dimension.html#width
int width;
f
int
height
java/awt/Dimension.html#height
int height;
m
double
getWidth
java/awt/Dimension.html#getWidth()
double getWidth();
m
double
getHeight
java/awt/Dimension.html#getHeight()
double getHeight();
m
void
setSize
java/awt/Dimension.html#setSize(double, double)
void setSize(double width, double height);
m
Dimension
getSize
java/awt/Dimension.html#getSize()
Dimension getSize();
m
void
setSize
java/awt/Dimension.html#setSize(java.awt.Dimension)
void setSize(Dimension d);
void setSize(int width, int height);
m
boolean
equals
java/awt/Dimension.html#equals(java.lang.Object)
boolean equals(Object obj);
m
int
hashCode
java/awt/Dimension.html#hashCode()
int hashCode();
m
String
toString
java/awt/Dimension.html#toString()
String toString();
IllegalComponentStateException
class IllegalComponentStateException extends IllegalStateException;
IllegalStateException
java/awt/IllegalComponentStateException.html
java.awt.IllegalComponentStateException
c

IllegalComponentStateException
java/awt/IllegalComponentStateException.html
IllegalComponentStateException();
IllegalComponentStateException(String s);
Choice
class Choice extends Component;
Component
java/awt/Choice.html
java.awt.Choice
c

Choice
java/awt/Choice.html
Choice();
l
Choice.AccessibleAWTChoice
AccessibleAWTChoice
java/awt/Choice.AccessibleAWTChoice.html
inner class Choice.AccessibleAWTChoice;
m
void
addNotify
java/awt/Choice.html#addNotify()
void addNotify();
m
int
getItemCount
java/awt/Choice.html#getItemCount()
int getItemCount();
m
int
countItems
java/awt/Choice.html#countItems()
int countItems();
m
String
getItem
java/awt/Choice.html#getItem(int)
String getItem(int index);
m
void
add
java/awt/Choice.html#add(java.lang.String)
void add(String item);
m
void
addItem
java/awt/Choice.html#addItem(java.lang.String)
void addItem(String item);
m
void
insert
java/awt/Choice.html#insert(java.lang.String, int)
void insert(String item, int index);
m
void
remove
java/awt/Choice.html#remove(java.lang.String)
void remove(String item);
void remove(int position);
m
void
removeAll
java/awt/Choice.html#removeAll()
void removeAll();
m
String
getSelectedItem
java/awt/Choice.html#getSelectedItem()
String getSelectedItem();
m
Object
getSelectedObjects
java/awt/Choice.html#getSelectedObjects()
Object[] getSelectedObjects();
m
int
getSelectedIndex
java/awt/Choice.html#getSelectedIndex()
int getSelectedIndex();
m
void
select
java/awt/Choice.html#select(int)
void select(int pos);
void select(String str);
m
void
addItemListener
java/awt/Choice.html#addItemListener(java.awt.event.ItemListener)
void addItemListener(ItemListener l);
m
void
removeItemListener
java/awt/Choice.html#removeItemListener(java.awt.event.ItemListener)
void removeItemListener(ItemListener l);
m
EventListener
getListeners
java/awt/Choice.html#getListeners(java.lang.Class)
EventListener[] getListeners(Class listenerType);
m
void
processEvent
java/awt/Choice.html#processEvent(java.awt.AWTEvent)
void processEvent(AWTEvent e);
m
void
processItemEvent
java/awt/Choice.html#processItemEvent(java.awt.event.ItemEvent)
void processItemEvent(ItemEvent e);
m
String
paramString
java/awt/Choice.html#paramString()
String paramString();
m
AccessibleContext
getAccessibleContext
java/awt/Choice.html#getAccessibleContext()
AccessibleContext getAccessibleContext();
Choice.AccessibleAWTChoice
class Choice.AccessibleAWTChoice extends Component.AccessibleAWTComponent;
Component.AccessibleAWTComponent
java/awt/Choice.AccessibleAWTChoice.html
java.awt.Choice.AccessibleAWTChoice
c

Choice.AccessibleAWTChoice
java/awt/Choice.AccessibleAWTChoice.html
Choice.AccessibleAWTChoice(Choice this$0);
m
AccessibleAction
getAccessibleAction
java/awt/Choice.AccessibleAWTChoice.html#getAccessibleAction()
AccessibleAction getAccessibleAction();
m
AccessibleRole
getAccessibleRole
java/awt/Choice.AccessibleAWTChoice.html#getAccessibleRole()
AccessibleRole getAccessibleRole();
m
int
getAccessibleActionCount
java/awt/Choice.AccessibleAWTChoice.html#getAccessibleActionCount()
int getAccessibleActionCount();
m
String
getAccessibleActionDescription
java/awt/Choice.AccessibleAWTChoice.html#getAccessibleActionDescription(int)
String getAccessibleActionDescription(int i);
m
boolean
doAccessibleAction
java/awt/Choice.AccessibleAWTChoice.html#doAccessibleAction(int)
boolean doAccessibleAction(int i);
MenuContainer
class MenuContainer;

java/awt/MenuContainer.html
java.awt.MenuContainer
m
Font
getFont
java/awt/MenuContainer.html#getFont()
Font getFont();
m
void
remove
java/awt/MenuContainer.html#remove(java.awt.MenuComponent)
void remove(MenuComponent comp);
m
boolean
postEvent
java/awt/MenuContainer.html#postEvent(java.awt.Event)
boolean postEvent(Event evt);
MenuShortcut
class MenuShortcut extends Object;
Object
java/awt/MenuShortcut.html
java.awt.MenuShortcut
c

MenuShortcut
java/awt/MenuShortcut.html
MenuShortcut(int key);
MenuShortcut(int key, boolean useShiftModifier);
m
int
getKey
java/awt/MenuShortcut.html#getKey()
int getKey();
m
boolean
usesShiftModifier
java/awt/MenuShortcut.html#usesShiftModifier()
boolean usesShiftModifier();
m
boolean
equals
java/awt/MenuShortcut.html#equals(java.awt.MenuShortcut)
boolean equals(MenuShortcut s);
boolean equals(Object obj);
m
int
hashCode
java/awt/MenuShortcut.html#hashCode()
int hashCode();
m
String
toString
java/awt/MenuShortcut.html#toString()
String toString();
m
String
paramString
java/awt/MenuShortcut.html#paramString()
String paramString();
FlowLayout
class FlowLayout extends Object;
Object
java/awt/FlowLayout.html
java.awt.FlowLayout
c

FlowLayout
java/awt/FlowLayout.html
FlowLayout();
FlowLayout(int align);
FlowLayout(int align, int hgap, int vgap);
f
int
LEFT
java/awt/FlowLayout.html#LEFT
int LEFT;
f
int
CENTER
java/awt/FlowLayout.html#CENTER
int CENTER;
f
int
RIGHT
java/awt/FlowLayout.html#RIGHT
int RIGHT;
f
int
LEADING
java/awt/FlowLayout.html#LEADING
int LEADING;
f
int
TRAILING
java/awt/FlowLayout.html#TRAILING
int TRAILING;
m
int
getAlignment
java/awt/FlowLayout.html#getAlignment()
int getAlignment();
m
void
setAlignment
java/awt/FlowLayout.html#setAlignment(int)
void setAlignment(int align);
m
int
getHgap
java/awt/FlowLayout.html#getHgap()
int getHgap();
m
void
setHgap
java/awt/FlowLayout.html#setHgap(int)
void setHgap(int hgap);
m
int
getVgap
java/awt/FlowLayout.html#getVgap()
int getVgap();
m
void
setVgap
java/awt/FlowLayout.html#setVgap(int)
void setVgap(int vgap);
m
void
addLayoutComponent
java/awt/FlowLayout.html#addLayoutComponent(java.lang.String, java.awt.Component)
void addLayoutComponent(String name, Component comp);
m
void
removeLayoutComponent
java/awt/FlowLayout.html#removeLayoutComponent(java.awt.Component)
void removeLayoutComponent(Component comp);
m
Dimension
preferredLayoutSize
java/awt/FlowLayout.html#preferredLayoutSize(java.awt.Container)
Dimension preferredLayoutSize(Container target);
m
Dimension
minimumLayoutSize
java/awt/FlowLayout.html#minimumLayoutSize(java.awt.Container)
Dimension minimumLayoutSize(Container target);
m
void
layoutContainer
java/awt/FlowLayout.html#layoutContainer(java.awt.Container)
void layoutContainer(Container target);
m
String
toString
java/awt/FlowLayout.html#toString()
String toString();
ImageConsumer
class ImageConsumer;

java/awt/image/ImageConsumer.html
java.awt.image.ImageConsumer
f
int
RANDOMPIXELORDER
java/awt/image/ImageConsumer.html#RANDOMPIXELORDER
int RANDOMPIXELORDER;
f
int
TOPDOWNLEFTRIGHT
java/awt/image/ImageConsumer.html#TOPDOWNLEFTRIGHT
int TOPDOWNLEFTRIGHT;
f
int
COMPLETESCANLINES
java/awt/image/ImageConsumer.html#COMPLETESCANLINES
int COMPLETESCANLINES;
f
int
SINGLEPASS
java/awt/image/ImageConsumer.html#SINGLEPASS
int SINGLEPASS;
f
int
SINGLEFRAME
java/awt/image/ImageConsumer.html#SINGLEFRAME
int SINGLEFRAME;
f
int
IMAGEERROR
java/awt/image/ImageConsumer.html#IMAGEERROR
int IMAGEERROR;
f
int
SINGLEFRAMEDONE
java/awt/image/ImageConsumer.html#SINGLEFRAMEDONE
int SINGLEFRAMEDONE;
f
int
STATICIMAGEDONE
java/awt/image/ImageConsumer.html#STATICIMAGEDONE
int STATICIMAGEDONE;
f
int
IMAGEABORTED
java/awt/image/ImageConsumer.html#IMAGEABORTED
int IMAGEABORTED;
m
void
setDimensions
java/awt/image/ImageConsumer.html#setDimensions(int, int)
void setDimensions(int width, int height);
m
void
setProperties
java/awt/image/ImageConsumer.html#setProperties(java.util.Hashtable)
void setProperties(Hashtable props);
m
void
setColorModel
java/awt/image/ImageConsumer.html#setColorModel(java.awt.image.ColorModel)
void setColorModel(ColorModel model);
m
void
setHints
java/awt/image/ImageConsumer.html#setHints(int)
void setHints(int hintflags);
m
void
setPixels
java/awt/image/ImageConsumer.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
m
void
imageComplete
java/awt/image/ImageConsumer.html#imageComplete(int)
void imageComplete(int status);
ImageFilter
class ImageFilter extends Object;
Object
java/awt/image/ImageFilter.html
java.awt.image.ImageFilter
c

ImageFilter
java/awt/image/ImageFilter.html
ImageFilter();
f
ImageConsumer
consumer
java/awt/image/ImageFilter.html#consumer
ImageConsumer consumer;
m
ImageFilter
getFilterInstance
java/awt/image/ImageFilter.html#getFilterInstance(java.awt.image.ImageConsumer)
ImageFilter getFilterInstance(ImageConsumer ic);
m
void
setDimensions
java/awt/image/ImageFilter.html#setDimensions(int, int)
void setDimensions(int width, int height);
m
void
setProperties
java/awt/image/ImageFilter.html#setProperties(java.util.Hashtable)
void setProperties(Hashtable props);
m
void
setColorModel
java/awt/image/ImageFilter.html#setColorModel(java.awt.image.ColorModel)
void setColorModel(ColorModel model);
m
void
setHints
java/awt/image/ImageFilter.html#setHints(int)
void setHints(int hints);
m
void
setPixels
java/awt/image/ImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
m
void
imageComplete
java/awt/image/ImageFilter.html#imageComplete(int)
void imageComplete(int status);
m
void
resendTopDownLeftRight
java/awt/image/ImageFilter.html#resendTopDownLeftRight(java.awt.image.ImageProducer)
void resendTopDownLeftRight(ImageProducer ip);
m
Object
clone
java/awt/image/ImageFilter.html#clone()
Object clone();
ReplicateScaleFilter
class ReplicateScaleFilter extends ImageFilter;
ImageFilter
java/awt/image/ReplicateScaleFilter.html
java.awt.image.ReplicateScaleFilter
c

ReplicateScaleFilter
java/awt/image/ReplicateScaleFilter.html
ReplicateScaleFilter(int width, int height);
f
int
srcWidth
java/awt/image/ReplicateScaleFilter.html#srcWidth
int srcWidth;
f
int
srcHeight
java/awt/image/ReplicateScaleFilter.html#srcHeight
int srcHeight;
f
int
destWidth
java/awt/image/ReplicateScaleFilter.html#destWidth
int destWidth;
f
int
destHeight
java/awt/image/ReplicateScaleFilter.html#destHeight
int destHeight;
f
int
srcrows
java/awt/image/ReplicateScaleFilter.html#srcrows
int srcrows;
f
int
srccols
java/awt/image/ReplicateScaleFilter.html#srccols
int srccols;
f
Object
outpixbuf
java/awt/image/ReplicateScaleFilter.html#outpixbuf
Object outpixbuf;
m
void
setProperties
java/awt/image/ReplicateScaleFilter.html#setProperties(java.util.Hashtable)
void setProperties(Hashtable props);
m
void
setDimensions
java/awt/image/ReplicateScaleFilter.html#setDimensions(int, int)
void setDimensions(int w, int h);
m
void
setPixels
java/awt/image/ReplicateScaleFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
AreaAveragingScaleFilter
class AreaAveragingScaleFilter extends ReplicateScaleFilter;
ReplicateScaleFilter
java/awt/image/AreaAveragingScaleFilter.html
java.awt.image.AreaAveragingScaleFilter
c

AreaAveragingScaleFilter
java/awt/image/AreaAveragingScaleFilter.html
AreaAveragingScaleFilter(int width, int height);
m
void
setHints
java/awt/image/AreaAveragingScaleFilter.html#setHints(int)
void setHints(int hints);
m
void
setPixels
java/awt/image/AreaAveragingScaleFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
SampleModel
class SampleModel extends Object;
Object
java/awt/image/SampleModel.html
java.awt.image.SampleModel
c

SampleModel
java/awt/image/SampleModel.html
SampleModel(int dataType, int w, int h, int numBands);
f
int
width
java/awt/image/SampleModel.html#width
int width;
f
int
height
java/awt/image/SampleModel.html#height
int height;
f
int
numBands
java/awt/image/SampleModel.html#numBands
int numBands;
f
int
dataType
java/awt/image/SampleModel.html#dataType
int dataType;
m
int
getWidth
java/awt/image/SampleModel.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/SampleModel.html#getHeight()
int getHeight();
m
int
getNumBands
java/awt/image/SampleModel.html#getNumBands()
int getNumBands();
m
int
getNumDataElements
java/awt/image/SampleModel.html#getNumDataElements()
int getNumDataElements();
m
int
getDataType
java/awt/image/SampleModel.html#getDataType()
int getDataType();
m
int
getTransferType
java/awt/image/SampleModel.html#getTransferType()
int getTransferType();
m
int
getPixel
java/awt/image/SampleModel.html#getPixel(int, int, int[], java.awt.image.DataBuffer)
int[] getPixel(int x, int y, int[] iArray, DataBuffer data);
m
Object
getDataElements
java/awt/image/SampleModel.html#getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
Object getDataElements(int x, int y, Object obj, DataBuffer data);
Object getDataElements(int x, int y, int w, int h, Object obj, DataBuffer data);
m
void
setDataElements
java/awt/image/SampleModel.html#setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
void setDataElements(int x, int y, Object obj, DataBuffer data);
void setDataElements(int x, int y, int w, int h, Object obj, DataBuffer data);
m
float
getPixel
java/awt/image/SampleModel.html#getPixel(int, int, float[], java.awt.image.DataBuffer)
float[] getPixel(int x, int y, float[] fArray, DataBuffer data);
double[] getPixel(int x, int y, double[] dArray, DataBuffer data);
m
int
getPixels
java/awt/image/SampleModel.html#getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
float[] getPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data);
double[] getPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data);
m
int
getSample
java/awt/image/SampleModel.html#getSample(int, int, int, java.awt.image.DataBuffer)
int getSample(int x, int y, int b, DataBuffer data);
m
float
getSampleFloat
java/awt/image/SampleModel.html#getSampleFloat(int, int, int, java.awt.image.DataBuffer)
float getSampleFloat(int x, int y, int b, DataBuffer data);
m
double
getSampleDouble
java/awt/image/SampleModel.html#getSampleDouble(int, int, int, java.awt.image.DataBuffer)
double getSampleDouble(int x, int y, int b, DataBuffer data);
m
int
getSamples
java/awt/image/SampleModel.html#getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
float[] getSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data);
double[] getSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data);
m
void
setPixel
java/awt/image/SampleModel.html#setPixel(int, int, int[], java.awt.image.DataBuffer)
void setPixel(int x, int y, int[] iArray, DataBuffer data);
void setPixel(int x, int y, float[] fArray, DataBuffer data);
void setPixel(int x, int y, double[] dArray, DataBuffer data);
m
void
setPixels
java/awt/image/SampleModel.html#setPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
void setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
void setPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data);
void setPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data);
m
void
setSample
java/awt/image/SampleModel.html#setSample(int, int, int, int, java.awt.image.DataBuffer)
void setSample(int x, int y, int b, int s, DataBuffer data);
void setSample(int x, int y, int b, float s, DataBuffer data);
void setSample(int x, int y, int b, double s, DataBuffer data);
m
void
setSamples
java/awt/image/SampleModel.html#setSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
void setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
void setSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data);
void setSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data);
m
SampleModel
createCompatibleSampleModel
java/awt/image/SampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
SampleModel
createSubsetSampleModel
java/awt/image/SampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
m
DataBuffer
createDataBuffer
java/awt/image/SampleModel.html#createDataBuffer()
DataBuffer createDataBuffer();
m
int
getSampleSize
java/awt/image/SampleModel.html#getSampleSize()
int[] getSampleSize();
int getSampleSize(int band);
SinglePixelPackedSampleModel
class SinglePixelPackedSampleModel extends SampleModel;
SampleModel
java/awt/image/SinglePixelPackedSampleModel.html
java.awt.image.SinglePixelPackedSampleModel
c

SinglePixelPackedSampleModel
java/awt/image/SinglePixelPackedSampleModel.html
SinglePixelPackedSampleModel(int dataType, int w, int h, int[] bitMasks);
SinglePixelPackedSampleModel(int dataType, int w, int h, int scanlineStride, int[] bitMasks);
m
int
getNumDataElements
java/awt/image/SinglePixelPackedSampleModel.html#getNumDataElements()
int getNumDataElements();
m
SampleModel
createCompatibleSampleModel
java/awt/image/SinglePixelPackedSampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
DataBuffer
createDataBuffer
java/awt/image/SinglePixelPackedSampleModel.html#createDataBuffer()
DataBuffer createDataBuffer();
m
int
getSampleSize
java/awt/image/SinglePixelPackedSampleModel.html#getSampleSize()
int[] getSampleSize();
int getSampleSize(int band);
m
int
getOffset
java/awt/image/SinglePixelPackedSampleModel.html#getOffset(int, int)
int getOffset(int x, int y);
m
int
getBitOffsets
java/awt/image/SinglePixelPackedSampleModel.html#getBitOffsets()
int[] getBitOffsets();
m
int
getBitMasks
java/awt/image/SinglePixelPackedSampleModel.html#getBitMasks()
int[] getBitMasks();
m
int
getScanlineStride
java/awt/image/SinglePixelPackedSampleModel.html#getScanlineStride()
int getScanlineStride();
m
SampleModel
createSubsetSampleModel
java/awt/image/SinglePixelPackedSampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
m
Object
getDataElements
java/awt/image/SinglePixelPackedSampleModel.html#getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
Object getDataElements(int x, int y, Object obj, DataBuffer data);
m
int
getPixel
java/awt/image/SinglePixelPackedSampleModel.html#getPixel(int, int, int[], java.awt.image.DataBuffer)
int[] getPixel(int x, int y, int[] iArray, DataBuffer data);
m
int
getPixels
java/awt/image/SinglePixelPackedSampleModel.html#getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
int
getSample
java/awt/image/SinglePixelPackedSampleModel.html#getSample(int, int, int, java.awt.image.DataBuffer)
int getSample(int x, int y, int b, DataBuffer data);
m
int
getSamples
java/awt/image/SinglePixelPackedSampleModel.html#getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
m
void
setDataElements
java/awt/image/SinglePixelPackedSampleModel.html#setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
void setDataElements(int x, int y, Object obj, DataBuffer data);
m
void
setPixel
java/awt/image/SinglePixelPackedSampleModel.html#setPixel(int, int, int[], java.awt.image.DataBuffer)
void setPixel(int x, int y, int[] iArray, DataBuffer data);
m
void
setPixels
java/awt/image/SinglePixelPackedSampleModel.html#setPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
void setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
void
setSample
java/awt/image/SinglePixelPackedSampleModel.html#setSample(int, int, int, int, java.awt.image.DataBuffer)
void setSample(int x, int y, int b, int s, DataBuffer data);
m
void
setSamples
java/awt/image/SinglePixelPackedSampleModel.html#setSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
void setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
BandCombineOp
class BandCombineOp extends Object;
Object
java/awt/image/BandCombineOp.html
java.awt.image.BandCombineOp
c

BandCombineOp
java/awt/image/BandCombineOp.html
BandCombineOp(float[][] matrix, RenderingHints hints);
m
float
getMatrix
java/awt/image/BandCombineOp.html#getMatrix()
float[][] getMatrix();
m
WritableRaster
filter
java/awt/image/BandCombineOp.html#filter(java.awt.image.Raster, java.awt.image.WritableRaster)
WritableRaster filter(Raster src, WritableRaster dst);
m
Rectangle2D
getBounds2D
java/awt/image/BandCombineOp.html#getBounds2D(java.awt.image.Raster)
Rectangle2D getBounds2D(Raster src);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/BandCombineOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/BandCombineOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/BandCombineOp.html#getRenderingHints()
RenderingHints getRenderingHints();
ImageObserver
class ImageObserver;

java/awt/image/ImageObserver.html
java.awt.image.ImageObserver
f
int
WIDTH
java/awt/image/ImageObserver.html#WIDTH
int WIDTH;
f
int
HEIGHT
java/awt/image/ImageObserver.html#HEIGHT
int HEIGHT;
f
int
PROPERTIES
java/awt/image/ImageObserver.html#PROPERTIES
int PROPERTIES;
f
int
SOMEBITS
java/awt/image/ImageObserver.html#SOMEBITS
int SOMEBITS;
f
int
FRAMEBITS
java/awt/image/ImageObserver.html#FRAMEBITS
int FRAMEBITS;
f
int
ALLBITS
java/awt/image/ImageObserver.html#ALLBITS
int ALLBITS;
f
int
ERROR
java/awt/image/ImageObserver.html#ERROR
int ERROR;
f
int
ABORT
java/awt/image/ImageObserver.html#ABORT
int ABORT;
m
boolean
imageUpdate
java/awt/image/ImageObserver.html#imageUpdate(java.awt.Image, int, int, int, int, int)
boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height);
AffineTransformOp
class AffineTransformOp extends Object;
Object
java/awt/image/AffineTransformOp.html
java.awt.image.AffineTransformOp
c

AffineTransformOp
java/awt/image/AffineTransformOp.html
AffineTransformOp(AffineTransform xform, RenderingHints hints);
AffineTransformOp(AffineTransform xform, int interpolationType);
f
int
TYPE_NEAREST_NEIGHBOR
java/awt/image/AffineTransformOp.html#TYPE_NEAREST_NEIGHBOR
int TYPE_NEAREST_NEIGHBOR;
f
int
TYPE_BILINEAR
java/awt/image/AffineTransformOp.html#TYPE_BILINEAR
int TYPE_BILINEAR;
m
int
getInterpolationType
java/awt/image/AffineTransformOp.html#getInterpolationType()
int getInterpolationType();
m
BufferedImage
filter
java/awt/image/AffineTransformOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dst);
WritableRaster filter(Raster src, WritableRaster dst);
m
Rectangle2D
getBounds2D
java/awt/image/AffineTransformOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
Rectangle2D getBounds2D(Raster src);
m
BufferedImage
createCompatibleDestImage
java/awt/image/AffineTransformOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/AffineTransformOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/AffineTransformOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
AffineTransform
getTransform
java/awt/image/AffineTransformOp.html#getTransform()
AffineTransform getTransform();
m
RenderingHints
getRenderingHints
java/awt/image/AffineTransformOp.html#getRenderingHints()
RenderingHints getRenderingHints();
LookupTable
class LookupTable extends Object;
Object
java/awt/image/LookupTable.html
java.awt.image.LookupTable
c

LookupTable
java/awt/image/LookupTable.html
LookupTable(int offset, int numComponents);
m
int
getNumComponents
java/awt/image/LookupTable.html#getNumComponents()
int getNumComponents();
m
int
getOffset
java/awt/image/LookupTable.html#getOffset()
int getOffset();
m
int
lookupPixel
java/awt/image/LookupTable.html#lookupPixel(int[], int[])
int[] lookupPixel(int[] src, int[] dest);
ByteLookupTable
class ByteLookupTable extends LookupTable;
LookupTable
java/awt/image/ByteLookupTable.html
java.awt.image.ByteLookupTable
c

ByteLookupTable
java/awt/image/ByteLookupTable.html
ByteLookupTable(int offset, byte[][] data);
ByteLookupTable(int offset, byte[] data);
m
byte
getTable
java/awt/image/ByteLookupTable.html#getTable()
byte[][] getTable();
m
int
lookupPixel
java/awt/image/ByteLookupTable.html#lookupPixel(int[], int[])
int[] lookupPixel(int[] src, int[] dst);
byte[] lookupPixel(byte[] src, byte[] dst);
Raster
class Raster extends Object;
Object
java/awt/image/Raster.html
java.awt.image.Raster
c

Raster
java/awt/image/Raster.html
Raster(SampleModel sampleModel, Point origin);
Raster(SampleModel sampleModel, DataBuffer dataBuffer, Point origin);
Raster(SampleModel sampleModel, DataBuffer dataBuffer, Rectangle aRegion, Point sampleModelTranslate, Raster parent);
f
SampleModel
sampleModel
java/awt/image/Raster.html#sampleModel
SampleModel sampleModel;
f
DataBuffer
dataBuffer
java/awt/image/Raster.html#dataBuffer
DataBuffer dataBuffer;
f
int
minX
java/awt/image/Raster.html#minX
int minX;
f
int
minY
java/awt/image/Raster.html#minY
int minY;
f
int
width
java/awt/image/Raster.html#width
int width;
f
int
height
java/awt/image/Raster.html#height
int height;
f
int
sampleModelTranslateX
java/awt/image/Raster.html#sampleModelTranslateX
int sampleModelTranslateX;
f
int
sampleModelTranslateY
java/awt/image/Raster.html#sampleModelTranslateY
int sampleModelTranslateY;
f
int
numBands
java/awt/image/Raster.html#numBands
int numBands;
f
int
numDataElements
java/awt/image/Raster.html#numDataElements
int numDataElements;
f
Raster
parent
java/awt/image/Raster.html#parent
Raster parent;
m
WritableRaster
createInterleavedRaster
java/awt/image/Raster.html#createInterleavedRaster(int, int, int, int, java.awt.Point)
WritableRaster createInterleavedRaster(int dataType, int w, int h, int bands, Point location);
WritableRaster createInterleavedRaster(int dataType, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location);
m
WritableRaster
createBandedRaster
java/awt/image/Raster.html#createBandedRaster(int, int, int, int, java.awt.Point)
WritableRaster createBandedRaster(int dataType, int w, int h, int bands, Point location);
WritableRaster createBandedRaster(int dataType, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location);
m
WritableRaster
createPackedRaster
java/awt/image/Raster.html#createPackedRaster(int, int, int, int[], java.awt.Point)
WritableRaster createPackedRaster(int dataType, int w, int h, int[] bandMasks, Point location);
WritableRaster createPackedRaster(int dataType, int w, int h, int bands, int bitsPerBand, Point location);
m
WritableRaster
createInterleavedRaster
java/awt/image/Raster.html#createInterleavedRaster(java.awt.image.DataBuffer, int, int, int, int, int[], java.awt.Point)
WritableRaster createInterleavedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location);
m
WritableRaster
createBandedRaster
java/awt/image/Raster.html#createBandedRaster(java.awt.image.DataBuffer, int, int, int, int[], int[], java.awt.Point)
WritableRaster createBandedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location);
m
WritableRaster
createPackedRaster
java/awt/image/Raster.html#createPackedRaster(java.awt.image.DataBuffer, int, int, int, int[], java.awt.Point)
WritableRaster createPackedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bandMasks, Point location);
WritableRaster createPackedRaster(DataBuffer dataBuffer, int w, int h, int bitsPerPixel, Point location);
m
Raster
createRaster
java/awt/image/Raster.html#createRaster(java.awt.image.SampleModel, java.awt.image.DataBuffer, java.awt.Point)
Raster createRaster(SampleModel sm, DataBuffer db, Point location);
m
WritableRaster
createWritableRaster
java/awt/image/Raster.html#createWritableRaster(java.awt.image.SampleModel, java.awt.Point)
WritableRaster createWritableRaster(SampleModel sm, Point location);
WritableRaster createWritableRaster(SampleModel sm, DataBuffer db, Point location);
m
Raster
getParent
java/awt/image/Raster.html#getParent()
Raster getParent();
m
int
getSampleModelTranslateX
java/awt/image/Raster.html#getSampleModelTranslateX()
int getSampleModelTranslateX();
m
int
getSampleModelTranslateY
java/awt/image/Raster.html#getSampleModelTranslateY()
int getSampleModelTranslateY();
m
WritableRaster
createCompatibleWritableRaster
java/awt/image/Raster.html#createCompatibleWritableRaster()
WritableRaster createCompatibleWritableRaster();
WritableRaster createCompatibleWritableRaster(int w, int h);
WritableRaster createCompatibleWritableRaster(Rectangle rect);
WritableRaster createCompatibleWritableRaster(int x, int y, int w, int h);
m
Raster
createTranslatedChild
java/awt/image/Raster.html#createTranslatedChild(int, int)
Raster createTranslatedChild(int childMinX, int childMinY);
m
Raster
createChild
java/awt/image/Raster.html#createChild(int, int, int, int, int, int, int[])
Raster createChild(int parentX, int parentY, int width, int height, int childMinX, int childMinY, int[] bandList);
m
Rectangle
getBounds
java/awt/image/Raster.html#getBounds()
Rectangle getBounds();
m
int
getMinX
java/awt/image/Raster.html#getMinX()
int getMinX();
m
int
getMinY
java/awt/image/Raster.html#getMinY()
int getMinY();
m
int
getWidth
java/awt/image/Raster.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/Raster.html#getHeight()
int getHeight();
m
int
getNumBands
java/awt/image/Raster.html#getNumBands()
int getNumBands();
m
int
getNumDataElements
java/awt/image/Raster.html#getNumDataElements()
int getNumDataElements();
m
int
getTransferType
java/awt/image/Raster.html#getTransferType()
int getTransferType();
m
DataBuffer
getDataBuffer
java/awt/image/Raster.html#getDataBuffer()
DataBuffer getDataBuffer();
m
SampleModel
getSampleModel
java/awt/image/Raster.html#getSampleModel()
SampleModel getSampleModel();
m
Object
getDataElements
java/awt/image/Raster.html#getDataElements(int, int, java.lang.Object)
Object getDataElements(int x, int y, Object outData);
Object getDataElements(int x, int y, int w, int h, Object outData);
m
int
getPixel
java/awt/image/Raster.html#getPixel(int, int, int[])
int[] getPixel(int x, int y, int[] iArray);
float[] getPixel(int x, int y, float[] fArray);
double[] getPixel(int x, int y, double[] dArray);
m
int
getPixels
java/awt/image/Raster.html#getPixels(int, int, int, int, int[])
int[] getPixels(int x, int y, int w, int h, int[] iArray);
float[] getPixels(int x, int y, int w, int h, float[] fArray);
double[] getPixels(int x, int y, int w, int h, double[] dArray);
m
int
getSample
java/awt/image/Raster.html#getSample(int, int, int)
int getSample(int x, int y, int b);
m
float
getSampleFloat
java/awt/image/Raster.html#getSampleFloat(int, int, int)
float getSampleFloat(int x, int y, int b);
m
double
getSampleDouble
java/awt/image/Raster.html#getSampleDouble(int, int, int)
double getSampleDouble(int x, int y, int b);
m
int
getSamples
java/awt/image/Raster.html#getSamples(int, int, int, int, int, int[])
int[] getSamples(int x, int y, int w, int h, int b, int[] iArray);
float[] getSamples(int x, int y, int w, int h, int b, float[] fArray);
double[] getSamples(int x, int y, int w, int h, int b, double[] dArray);
DataBuffer
class DataBuffer extends Object;
Object
java/awt/image/DataBuffer.html
java.awt.image.DataBuffer
c

DataBuffer
java/awt/image/DataBuffer.html
DataBuffer(int dataType, int size);
DataBuffer(int dataType, int size, int numBanks);
DataBuffer(int dataType, int size, int numBanks, int offset);
DataBuffer(int dataType, int size, int numBanks, int[] offsets);
f
int
TYPE_BYTE
java/awt/image/DataBuffer.html#TYPE_BYTE
int TYPE_BYTE;
f
int
TYPE_USHORT
java/awt/image/DataBuffer.html#TYPE_USHORT
int TYPE_USHORT;
f
int
TYPE_SHORT
java/awt/image/DataBuffer.html#TYPE_SHORT
int TYPE_SHORT;
f
int
TYPE_INT
java/awt/image/DataBuffer.html#TYPE_INT
int TYPE_INT;
f
int
TYPE_FLOAT
java/awt/image/DataBuffer.html#TYPE_FLOAT
int TYPE_FLOAT;
f
int
TYPE_DOUBLE
java/awt/image/DataBuffer.html#TYPE_DOUBLE
int TYPE_DOUBLE;
f
int
TYPE_UNDEFINED
java/awt/image/DataBuffer.html#TYPE_UNDEFINED
int TYPE_UNDEFINED;
f
int
dataType
java/awt/image/DataBuffer.html#dataType
int dataType;
f
int
banks
java/awt/image/DataBuffer.html#banks
int banks;
f
int
offset
java/awt/image/DataBuffer.html#offset
int offset;
f
int
size
java/awt/image/DataBuffer.html#size
int size;
f
int
offsets
java/awt/image/DataBuffer.html#offsets
int offsets;
m
int
getDataTypeSize
java/awt/image/DataBuffer.html#getDataTypeSize(int)
int getDataTypeSize(int type);
m
int
getDataType
java/awt/image/DataBuffer.html#getDataType()
int getDataType();
m
int
getSize
java/awt/image/DataBuffer.html#getSize()
int getSize();
m
int
getOffset
java/awt/image/DataBuffer.html#getOffset()
int getOffset();
m
int
getOffsets
java/awt/image/DataBuffer.html#getOffsets()
int[] getOffsets();
m
int
getNumBanks
java/awt/image/DataBuffer.html#getNumBanks()
int getNumBanks();
m
int
getElem
java/awt/image/DataBuffer.html#getElem(int)
int getElem(int i);
int getElem(int bank, int i);
m
void
setElem
java/awt/image/DataBuffer.html#setElem(int, int)
void setElem(int i, int val);
void setElem(int bank, int i, int val);
m
float
getElemFloat
java/awt/image/DataBuffer.html#getElemFloat(int)
float getElemFloat(int i);
float getElemFloat(int bank, int i);
m
void
setElemFloat
java/awt/image/DataBuffer.html#setElemFloat(int, float)
void setElemFloat(int i, float val);
void setElemFloat(int bank, int i, float val);
m
double
getElemDouble
java/awt/image/DataBuffer.html#getElemDouble(int)
double getElemDouble(int i);
double getElemDouble(int bank, int i);
m
void
setElemDouble
java/awt/image/DataBuffer.html#setElemDouble(int, double)
void setElemDouble(int i, double val);
void setElemDouble(int bank, int i, double val);
DataBufferInt
class DataBufferInt extends DataBuffer;
DataBuffer
java/awt/image/DataBufferInt.html
java.awt.image.DataBufferInt
c

DataBufferInt
java/awt/image/DataBufferInt.html
DataBufferInt(int size);
DataBufferInt(int size, int numBanks);
DataBufferInt(int[] dataArray, int size);
DataBufferInt(int[] dataArray, int size, int offset);
DataBufferInt(int[][] dataArray, int size);
DataBufferInt(int[][] dataArray, int size, int[] offsets);
m
int
getData
java/awt/image/DataBufferInt.html#getData()
int[] getData();
int[] getData(int bank);
m
int
getBankData
java/awt/image/DataBufferInt.html#getBankData()
int[][] getBankData();
m
int
getElem
java/awt/image/DataBufferInt.html#getElem(int)
int getElem(int i);
int getElem(int bank, int i);
m
void
setElem
java/awt/image/DataBufferInt.html#setElem(int, int)
void setElem(int i, int val);
void setElem(int bank, int i, int val);
BufferedImageOp
class BufferedImageOp;

java/awt/image/BufferedImageOp.html
java.awt.image.BufferedImageOp
m
BufferedImage
filter
java/awt/image/BufferedImageOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dest);
m
Rectangle2D
getBounds2D
java/awt/image/BufferedImageOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
m
BufferedImage
createCompatibleDestImage
java/awt/image/BufferedImageOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
Point2D
getPoint2D
java/awt/image/BufferedImageOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/BufferedImageOp.html#getRenderingHints()
RenderingHints getRenderingHints();
MemoryImageSource
class MemoryImageSource extends Object;
Object
java/awt/image/MemoryImageSource.html
java.awt.image.MemoryImageSource
c

MemoryImageSource
java/awt/image/MemoryImageSource.html
MemoryImageSource(int w, int h, ColorModel cm, byte[] pix, int off, int scan);
MemoryImageSource(int w, int h, ColorModel cm, byte[] pix, int off, int scan, Hashtable props);
MemoryImageSource(int w, int h, ColorModel cm, int[] pix, int off, int scan);
MemoryImageSource(int w, int h, ColorModel cm, int[] pix, int off, int scan, Hashtable props);
MemoryImageSource(int w, int h, int[] pix, int off, int scan);
MemoryImageSource(int w, int h, int[] pix, int off, int scan, Hashtable props);
m
void
addConsumer
java/awt/image/MemoryImageSource.html#addConsumer(java.awt.image.ImageConsumer)
void addConsumer(ImageConsumer ic);
m
boolean
isConsumer
java/awt/image/MemoryImageSource.html#isConsumer(java.awt.image.ImageConsumer)
boolean isConsumer(ImageConsumer ic);
m
void
removeConsumer
java/awt/image/MemoryImageSource.html#removeConsumer(java.awt.image.ImageConsumer)
void removeConsumer(ImageConsumer ic);
m
void
startProduction
java/awt/image/MemoryImageSource.html#startProduction(java.awt.image.ImageConsumer)
void startProduction(ImageConsumer ic);
m
void
requestTopDownLeftRightResend
java/awt/image/MemoryImageSource.html#requestTopDownLeftRightResend(java.awt.image.ImageConsumer)
void requestTopDownLeftRightResend(ImageConsumer ic);
m
void
setAnimated
java/awt/image/MemoryImageSource.html#setAnimated(boolean)
void setAnimated(boolean animated);
m
void
setFullBufferUpdates
java/awt/image/MemoryImageSource.html#setFullBufferUpdates(boolean)
void setFullBufferUpdates(boolean fullbuffers);
m
void
newPixels
java/awt/image/MemoryImageSource.html#newPixels()
void newPixels();
void newPixels(int x, int y, int w, int h);
void newPixels(int x, int y, int w, int h, boolean framenotify);
void newPixels(byte[] newpix, ColorModel newmodel, int offset, int scansize);
void newPixels(int[] newpix, ColorModel newmodel, int offset, int scansize);
ColorModel
class ColorModel extends Object;
Object
java/awt/image/ColorModel.html
java.awt.image.ColorModel
c

ColorModel
java/awt/image/ColorModel.html
ColorModel(int bits);
ColorModel(int pixel_bits, int[] bits, ColorSpace cspace, boolean hasAlpha, boolean isAlphaPremultiplied, int transparency, int transferType);
f
int
pixel_bits
java/awt/image/ColorModel.html#pixel_bits
int pixel_bits;
f
int
transferType
java/awt/image/ColorModel.html#transferType
int transferType;
m
ColorModel
getRGBdefault
java/awt/image/ColorModel.html#getRGBdefault()
ColorModel getRGBdefault();
m
boolean
hasAlpha
java/awt/image/ColorModel.html#hasAlpha()
boolean hasAlpha();
m
boolean
isAlphaPremultiplied
java/awt/image/ColorModel.html#isAlphaPremultiplied()
boolean isAlphaPremultiplied();
m
int
getTransferType
java/awt/image/ColorModel.html#getTransferType()
int getTransferType();
m
int
getPixelSize
java/awt/image/ColorModel.html#getPixelSize()
int getPixelSize();
m
int
getComponentSize
java/awt/image/ColorModel.html#getComponentSize(int)
int getComponentSize(int componentIdx);
int[] getComponentSize();
m
int
getTransparency
java/awt/image/ColorModel.html#getTransparency()
int getTransparency();
m
int
getNumComponents
java/awt/image/ColorModel.html#getNumComponents()
int getNumComponents();
m
int
getNumColorComponents
java/awt/image/ColorModel.html#getNumColorComponents()
int getNumColorComponents();
m
int
getRed
java/awt/image/ColorModel.html#getRed(int)
int getRed(int pixel);
m
int
getGreen
java/awt/image/ColorModel.html#getGreen(int)
int getGreen(int pixel);
m
int
getBlue
java/awt/image/ColorModel.html#getBlue(int)
int getBlue(int pixel);
m
int
getAlpha
java/awt/image/ColorModel.html#getAlpha(int)
int getAlpha(int pixel);
m
int
getRGB
java/awt/image/ColorModel.html#getRGB(int)
int getRGB(int pixel);
m
int
getRed
java/awt/image/ColorModel.html#getRed(java.lang.Object)
int getRed(Object inData);
m
int
getGreen
java/awt/image/ColorModel.html#getGreen(java.lang.Object)
int getGreen(Object inData);
m
int
getBlue
java/awt/image/ColorModel.html#getBlue(java.lang.Object)
int getBlue(Object inData);
m
int
getAlpha
java/awt/image/ColorModel.html#getAlpha(java.lang.Object)
int getAlpha(Object inData);
m
int
getRGB
java/awt/image/ColorModel.html#getRGB(java.lang.Object)
int getRGB(Object inData);
m
Object
getDataElements
java/awt/image/ColorModel.html#getDataElements(int, java.lang.Object)
Object getDataElements(int rgb, Object pixel);
m
int
getComponents
java/awt/image/ColorModel.html#getComponents(int, int[], int)
int[] getComponents(int pixel, int[] components, int offset);
int[] getComponents(Object pixel, int[] components, int offset);
m
int
getUnnormalizedComponents
java/awt/image/ColorModel.html#getUnnormalizedComponents(float[], int, int[], int)
int[] getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset);
m
float
getNormalizedComponents
java/awt/image/ColorModel.html#getNormalizedComponents(int[], int, float[], int)
float[] getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset);
m
int
getDataElement
java/awt/image/ColorModel.html#getDataElement(int[], int)
int getDataElement(int[] components, int offset);
m
Object
getDataElements
java/awt/image/ColorModel.html#getDataElements(int[], int, java.lang.Object)
Object getDataElements(int[] components, int offset, Object obj);
m
boolean
equals
java/awt/image/ColorModel.html#equals(java.lang.Object)
boolean equals(Object obj);
m
int
hashCode
java/awt/image/ColorModel.html#hashCode()
int hashCode();
m
ColorSpace
getColorSpace
java/awt/image/ColorModel.html#getColorSpace()
ColorSpace getColorSpace();
m
ColorModel
coerceData
java/awt/image/ColorModel.html#coerceData(java.awt.image.WritableRaster, boolean)
ColorModel coerceData(WritableRaster raster, boolean isAlphaPremultiplied);
m
boolean
isCompatibleRaster
java/awt/image/ColorModel.html#isCompatibleRaster(java.awt.image.Raster)
boolean isCompatibleRaster(Raster raster);
m
WritableRaster
createCompatibleWritableRaster
java/awt/image/ColorModel.html#createCompatibleWritableRaster(int, int)
WritableRaster createCompatibleWritableRaster(int w, int h);
m
SampleModel
createCompatibleSampleModel
java/awt/image/ColorModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
boolean
isCompatibleSampleModel
java/awt/image/ColorModel.html#isCompatibleSampleModel(java.awt.image.SampleModel)
boolean isCompatibleSampleModel(SampleModel sm);
m
void
finalize
java/awt/image/ColorModel.html#finalize()
void finalize();
m
WritableRaster
getAlphaRaster
java/awt/image/ColorModel.html#getAlphaRaster(java.awt.image.WritableRaster)
WritableRaster getAlphaRaster(WritableRaster raster);
m
String
toString
java/awt/image/ColorModel.html#toString()
String toString();
PackedColorModel
class PackedColorModel extends ColorModel;
ColorModel
java/awt/image/PackedColorModel.html
java.awt.image.PackedColorModel
c

PackedColorModel
java/awt/image/PackedColorModel.html
PackedColorModel(ColorSpace space, int bits, int[] colorMaskArray, int alphaMask, boolean isAlphaPremultiplied, int trans, int transferType);
PackedColorModel(ColorSpace space, int bits, int rmask, int gmask, int bmask, int amask, boolean isAlphaPremultiplied, int trans, int transferType);
m
int
getMask
java/awt/image/PackedColorModel.html#getMask(int)
int getMask(int index);
m
int
getMasks
java/awt/image/PackedColorModel.html#getMasks()
int[] getMasks();
m
SampleModel
createCompatibleSampleModel
java/awt/image/PackedColorModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
boolean
isCompatibleSampleModel
java/awt/image/PackedColorModel.html#isCompatibleSampleModel(java.awt.image.SampleModel)
boolean isCompatibleSampleModel(SampleModel sm);
m
WritableRaster
getAlphaRaster
java/awt/image/PackedColorModel.html#getAlphaRaster(java.awt.image.WritableRaster)
WritableRaster getAlphaRaster(WritableRaster raster);
m
boolean
equals
java/awt/image/PackedColorModel.html#equals(java.lang.Object)
boolean equals(Object obj);
DirectColorModel
class DirectColorModel extends PackedColorModel;
PackedColorModel
java/awt/image/DirectColorModel.html
java.awt.image.DirectColorModel
c

DirectColorModel
java/awt/image/DirectColorModel.html
DirectColorModel(int bits, int rmask, int gmask, int bmask);
DirectColorModel(int bits, int rmask, int gmask, int bmask, int amask);
DirectColorModel(ColorSpace space, int bits, int rmask, int gmask, int bmask, int amask, boolean isAlphaPremultiplied, int transferType);
m
int
getRedMask
java/awt/image/DirectColorModel.html#getRedMask()
int getRedMask();
m
int
getGreenMask
java/awt/image/DirectColorModel.html#getGreenMask()
int getGreenMask();
m
int
getBlueMask
java/awt/image/DirectColorModel.html#getBlueMask()
int getBlueMask();
m
int
getAlphaMask
java/awt/image/DirectColorModel.html#getAlphaMask()
int getAlphaMask();
m
int
getRed
java/awt/image/DirectColorModel.html#getRed(int)
int getRed(int pixel);
m
int
getGreen
java/awt/image/DirectColorModel.html#getGreen(int)
int getGreen(int pixel);
m
int
getBlue
java/awt/image/DirectColorModel.html#getBlue(int)
int getBlue(int pixel);
m
int
getAlpha
java/awt/image/DirectColorModel.html#getAlpha(int)
int getAlpha(int pixel);
m
int
getRGB
java/awt/image/DirectColorModel.html#getRGB(int)
int getRGB(int pixel);
m
int
getRed
java/awt/image/DirectColorModel.html#getRed(java.lang.Object)
int getRed(Object inData);
m
int
getGreen
java/awt/image/DirectColorModel.html#getGreen(java.lang.Object)
int getGreen(Object inData);
m
int
getBlue
java/awt/image/DirectColorModel.html#getBlue(java.lang.Object)
int getBlue(Object inData);
m
int
getAlpha
java/awt/image/DirectColorModel.html#getAlpha(java.lang.Object)
int getAlpha(Object inData);
m
int
getRGB
java/awt/image/DirectColorModel.html#getRGB(java.lang.Object)
int getRGB(Object inData);
m
Object
getDataElements
java/awt/image/DirectColorModel.html#getDataElements(int, java.lang.Object)
Object getDataElements(int rgb, Object pixel);
m
int
getComponents
java/awt/image/DirectColorModel.html#getComponents(int, int[], int)
int[] getComponents(int pixel, int[] components, int offset);
int[] getComponents(Object pixel, int[] components, int offset);
m
WritableRaster
createCompatibleWritableRaster
java/awt/image/DirectColorModel.html#createCompatibleWritableRaster(int, int)
WritableRaster createCompatibleWritableRaster(int w, int h);
m
int
getDataElement
java/awt/image/DirectColorModel.html#getDataElement(int[], int)
int getDataElement(int[] components, int offset);
m
Object
getDataElements
java/awt/image/DirectColorModel.html#getDataElements(int[], int, java.lang.Object)
Object getDataElements(int[] components, int offset, Object obj);
m
ColorModel
coerceData
java/awt/image/DirectColorModel.html#coerceData(java.awt.image.WritableRaster, boolean)
ColorModel coerceData(WritableRaster raster, boolean isAlphaPremultiplied);
m
boolean
isCompatibleRaster
java/awt/image/DirectColorModel.html#isCompatibleRaster(java.awt.image.Raster)
boolean isCompatibleRaster(Raster raster);
m
String
toString
java/awt/image/DirectColorModel.html#toString()
String toString();
MultiPixelPackedSampleModel
class MultiPixelPackedSampleModel extends SampleModel;
SampleModel
java/awt/image/MultiPixelPackedSampleModel.html
java.awt.image.MultiPixelPackedSampleModel
c

MultiPixelPackedSampleModel
java/awt/image/MultiPixelPackedSampleModel.html
MultiPixelPackedSampleModel(int dataType, int w, int h, int numberOfBits);
MultiPixelPackedSampleModel(int dataType, int w, int h, int numberOfBits, int scanlineStride, int dataBitOffset);
m
SampleModel
createCompatibleSampleModel
java/awt/image/MultiPixelPackedSampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
DataBuffer
createDataBuffer
java/awt/image/MultiPixelPackedSampleModel.html#createDataBuffer()
DataBuffer createDataBuffer();
m
int
getNumDataElements
java/awt/image/MultiPixelPackedSampleModel.html#getNumDataElements()
int getNumDataElements();
m
int
getSampleSize
java/awt/image/MultiPixelPackedSampleModel.html#getSampleSize()
int[] getSampleSize();
int getSampleSize(int band);
m
int
getOffset
java/awt/image/MultiPixelPackedSampleModel.html#getOffset(int, int)
int getOffset(int x, int y);
m
int
getBitOffset
java/awt/image/MultiPixelPackedSampleModel.html#getBitOffset(int)
int getBitOffset(int x);
m
int
getScanlineStride
java/awt/image/MultiPixelPackedSampleModel.html#getScanlineStride()
int getScanlineStride();
m
int
getPixelBitStride
java/awt/image/MultiPixelPackedSampleModel.html#getPixelBitStride()
int getPixelBitStride();
m
int
getDataBitOffset
java/awt/image/MultiPixelPackedSampleModel.html#getDataBitOffset()
int getDataBitOffset();
m
int
getTransferType
java/awt/image/MultiPixelPackedSampleModel.html#getTransferType()
int getTransferType();
m
SampleModel
createSubsetSampleModel
java/awt/image/MultiPixelPackedSampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
m
int
getSample
java/awt/image/MultiPixelPackedSampleModel.html#getSample(int, int, int, java.awt.image.DataBuffer)
int getSample(int x, int y, int b, DataBuffer data);
m
void
setSample
java/awt/image/MultiPixelPackedSampleModel.html#setSample(int, int, int, int, java.awt.image.DataBuffer)
void setSample(int x, int y, int b, int s, DataBuffer data);
m
Object
getDataElements
java/awt/image/MultiPixelPackedSampleModel.html#getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
Object getDataElements(int x, int y, Object obj, DataBuffer data);
m
int
getPixel
java/awt/image/MultiPixelPackedSampleModel.html#getPixel(int, int, int[], java.awt.image.DataBuffer)
int[] getPixel(int x, int y, int[] iArray, DataBuffer data);
m
void
setDataElements
java/awt/image/MultiPixelPackedSampleModel.html#setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
void setDataElements(int x, int y, Object obj, DataBuffer data);
m
void
setPixel
java/awt/image/MultiPixelPackedSampleModel.html#setPixel(int, int, int[], java.awt.image.DataBuffer)
void setPixel(int x, int y, int[] iArray, DataBuffer data);
ImageProducer
class ImageProducer;

java/awt/image/ImageProducer.html
java.awt.image.ImageProducer
m
void
addConsumer
java/awt/image/ImageProducer.html#addConsumer(java.awt.image.ImageConsumer)
void addConsumer(ImageConsumer ic);
m
boolean
isConsumer
java/awt/image/ImageProducer.html#isConsumer(java.awt.image.ImageConsumer)
boolean isConsumer(ImageConsumer ic);
m
void
removeConsumer
java/awt/image/ImageProducer.html#removeConsumer(java.awt.image.ImageConsumer)
void removeConsumer(ImageConsumer ic);
m
void
startProduction
java/awt/image/ImageProducer.html#startProduction(java.awt.image.ImageConsumer)
void startProduction(ImageConsumer ic);
m
void
requestTopDownLeftRightResend
java/awt/image/ImageProducer.html#requestTopDownLeftRightResend(java.awt.image.ImageConsumer)
void requestTopDownLeftRightResend(ImageConsumer ic);
TileObserver
class TileObserver;

java/awt/image/TileObserver.html
java.awt.image.TileObserver
m
void
tileUpdate
java/awt/image/TileObserver.html#tileUpdate(java.awt.image.WritableRenderedImage, int, int, boolean)
void tileUpdate(WritableRenderedImage source, int tileX, int tileY, boolean willBeWritable);
ColorConvertOp
class ColorConvertOp extends Object;
Object
java/awt/image/ColorConvertOp.html
java.awt.image.ColorConvertOp
c

ColorConvertOp
java/awt/image/ColorConvertOp.html
ColorConvertOp(RenderingHints hints);
ColorConvertOp(ColorSpace cspace, RenderingHints hints);
ColorConvertOp(ColorSpace srcCspace, ColorSpace dstCspace, RenderingHints hints);
ColorConvertOp(ICC_Profile[] profiles, RenderingHints hints);
m
ICC_Profile
getICC_Profiles
java/awt/image/ColorConvertOp.html#getICC_Profiles()
ICC_Profile[] getICC_Profiles();
m
BufferedImage
filter
java/awt/image/ColorConvertOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dest);
WritableRaster filter(Raster src, WritableRaster dest);
m
Rectangle2D
getBounds2D
java/awt/image/ColorConvertOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
Rectangle2D getBounds2D(Raster src);
m
BufferedImage
createCompatibleDestImage
java/awt/image/ColorConvertOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/ColorConvertOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/ColorConvertOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/ColorConvertOp.html#getRenderingHints()
RenderingHints getRenderingHints();
RasterOp
class RasterOp;

java/awt/image/RasterOp.html
java.awt.image.RasterOp
m
WritableRaster
filter
java/awt/image/RasterOp.html#filter(java.awt.image.Raster, java.awt.image.WritableRaster)
WritableRaster filter(Raster src, WritableRaster dest);
m
Rectangle2D
getBounds2D
java/awt/image/RasterOp.html#getBounds2D(java.awt.image.Raster)
Rectangle2D getBounds2D(Raster src);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/RasterOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/RasterOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/RasterOp.html#getRenderingHints()
RenderingHints getRenderingHints();
ComponentSampleModel
class ComponentSampleModel extends SampleModel;
SampleModel
java/awt/image/ComponentSampleModel.html
java.awt.image.ComponentSampleModel
c

ComponentSampleModel
java/awt/image/ComponentSampleModel.html
ComponentSampleModel(int dataType, int w, int h, int pixelStride, int scanlineStride, int[] bandOffsets);
ComponentSampleModel(int dataType, int w, int h, int pixelStride, int scanlineStride, int[] bankIndices, int[] bandOffsets);
f
int
bandOffsets
java/awt/image/ComponentSampleModel.html#bandOffsets
int bandOffsets;
f
int
bankIndices
java/awt/image/ComponentSampleModel.html#bankIndices
int bankIndices;
f
int
numBands
java/awt/image/ComponentSampleModel.html#numBands
int numBands;
f
int
numBanks
java/awt/image/ComponentSampleModel.html#numBanks
int numBanks;
f
int
scanlineStride
java/awt/image/ComponentSampleModel.html#scanlineStride
int scanlineStride;
f
int
pixelStride
java/awt/image/ComponentSampleModel.html#pixelStride
int pixelStride;
m
SampleModel
createCompatibleSampleModel
java/awt/image/ComponentSampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
SampleModel
createSubsetSampleModel
java/awt/image/ComponentSampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
m
DataBuffer
createDataBuffer
java/awt/image/ComponentSampleModel.html#createDataBuffer()
DataBuffer createDataBuffer();
m
int
getOffset
java/awt/image/ComponentSampleModel.html#getOffset(int, int)
int getOffset(int x, int y);
int getOffset(int x, int y, int b);
m
int
getSampleSize
java/awt/image/ComponentSampleModel.html#getSampleSize()
int[] getSampleSize();
int getSampleSize(int band);
m
int
getBankIndices
java/awt/image/ComponentSampleModel.html#getBankIndices()
int[] getBankIndices();
m
int
getBandOffsets
java/awt/image/ComponentSampleModel.html#getBandOffsets()
int[] getBandOffsets();
m
int
getScanlineStride
java/awt/image/ComponentSampleModel.html#getScanlineStride()
int getScanlineStride();
m
int
getPixelStride
java/awt/image/ComponentSampleModel.html#getPixelStride()
int getPixelStride();
m
int
getNumDataElements
java/awt/image/ComponentSampleModel.html#getNumDataElements()
int getNumDataElements();
m
Object
getDataElements
java/awt/image/ComponentSampleModel.html#getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
Object getDataElements(int x, int y, Object obj, DataBuffer data);
m
int
getPixel
java/awt/image/ComponentSampleModel.html#getPixel(int, int, int[], java.awt.image.DataBuffer)
int[] getPixel(int x, int y, int[] iArray, DataBuffer data);
m
int
getPixels
java/awt/image/ComponentSampleModel.html#getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
int
getSample
java/awt/image/ComponentSampleModel.html#getSample(int, int, int, java.awt.image.DataBuffer)
int getSample(int x, int y, int b, DataBuffer data);
m
float
getSampleFloat
java/awt/image/ComponentSampleModel.html#getSampleFloat(int, int, int, java.awt.image.DataBuffer)
float getSampleFloat(int x, int y, int b, DataBuffer data);
m
double
getSampleDouble
java/awt/image/ComponentSampleModel.html#getSampleDouble(int, int, int, java.awt.image.DataBuffer)
double getSampleDouble(int x, int y, int b, DataBuffer data);
m
int
getSamples
java/awt/image/ComponentSampleModel.html#getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
m
void
setDataElements
java/awt/image/ComponentSampleModel.html#setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
void setDataElements(int x, int y, Object obj, DataBuffer data);
m
void
setPixel
java/awt/image/ComponentSampleModel.html#setPixel(int, int, int[], java.awt.image.DataBuffer)
void setPixel(int x, int y, int[] iArray, DataBuffer data);
m
void
setPixels
java/awt/image/ComponentSampleModel.html#setPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
void setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
void
setSample
java/awt/image/ComponentSampleModel.html#setSample(int, int, int, int, java.awt.image.DataBuffer)
void setSample(int x, int y, int b, int s, DataBuffer data);
void setSample(int x, int y, int b, float s, DataBuffer data);
void setSample(int x, int y, int b, double s, DataBuffer data);
m
void
setSamples
java/awt/image/ComponentSampleModel.html#setSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
void setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
BandedSampleModel
class BandedSampleModel extends ComponentSampleModel;
ComponentSampleModel
java/awt/image/BandedSampleModel.html
java.awt.image.BandedSampleModel
c

BandedSampleModel
java/awt/image/BandedSampleModel.html
BandedSampleModel(int dataType, int w, int h, int numBands);
BandedSampleModel(int dataType, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets);
m
SampleModel
createCompatibleSampleModel
java/awt/image/BandedSampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
SampleModel
createSubsetSampleModel
java/awt/image/BandedSampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
m
DataBuffer
createDataBuffer
java/awt/image/BandedSampleModel.html#createDataBuffer()
DataBuffer createDataBuffer();
m
Object
getDataElements
java/awt/image/BandedSampleModel.html#getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
Object getDataElements(int x, int y, Object obj, DataBuffer data);
m
int
getPixel
java/awt/image/BandedSampleModel.html#getPixel(int, int, int[], java.awt.image.DataBuffer)
int[] getPixel(int x, int y, int[] iArray, DataBuffer data);
m
int
getPixels
java/awt/image/BandedSampleModel.html#getPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
int
getSample
java/awt/image/BandedSampleModel.html#getSample(int, int, int, java.awt.image.DataBuffer)
int getSample(int x, int y, int b, DataBuffer data);
m
float
getSampleFloat
java/awt/image/BandedSampleModel.html#getSampleFloat(int, int, int, java.awt.image.DataBuffer)
float getSampleFloat(int x, int y, int b, DataBuffer data);
m
double
getSampleDouble
java/awt/image/BandedSampleModel.html#getSampleDouble(int, int, int, java.awt.image.DataBuffer)
double getSampleDouble(int x, int y, int b, DataBuffer data);
m
int
getSamples
java/awt/image/BandedSampleModel.html#getSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
int[] getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
m
void
setDataElements
java/awt/image/BandedSampleModel.html#setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
void setDataElements(int x, int y, Object obj, DataBuffer data);
m
void
setPixel
java/awt/image/BandedSampleModel.html#setPixel(int, int, int[], java.awt.image.DataBuffer)
void setPixel(int x, int y, int[] iArray, DataBuffer data);
m
void
setPixels
java/awt/image/BandedSampleModel.html#setPixels(int, int, int, int, int[], java.awt.image.DataBuffer)
void setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data);
m
void
setSample
java/awt/image/BandedSampleModel.html#setSample(int, int, int, int, java.awt.image.DataBuffer)
void setSample(int x, int y, int b, int s, DataBuffer data);
void setSample(int x, int y, int b, float s, DataBuffer data);
void setSample(int x, int y, int b, double s, DataBuffer data);
m
void
setSamples
java/awt/image/BandedSampleModel.html#setSamples(int, int, int, int, int, int[], java.awt.image.DataBuffer)
void setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data);
ComponentColorModel
class ComponentColorModel extends ColorModel;
ColorModel
java/awt/image/ComponentColorModel.html
java.awt.image.ComponentColorModel
c

ComponentColorModel
java/awt/image/ComponentColorModel.html
ComponentColorModel(ColorSpace colorSpace, int[] bits, boolean hasAlpha, boolean isAlphaPremultiplied, int transparency, int transferType);
m
int
getRed
java/awt/image/ComponentColorModel.html#getRed(int)
int getRed(int pixel);
m
int
getGreen
java/awt/image/ComponentColorModel.html#getGreen(int)
int getGreen(int pixel);
m
int
getBlue
java/awt/image/ComponentColorModel.html#getBlue(int)
int getBlue(int pixel);
m
int
getAlpha
java/awt/image/ComponentColorModel.html#getAlpha(int)
int getAlpha(int pixel);
m
int
getRGB
java/awt/image/ComponentColorModel.html#getRGB(int)
int getRGB(int pixel);
m
int
getRed
java/awt/image/ComponentColorModel.html#getRed(java.lang.Object)
int getRed(Object inData);
m
int
getGreen
java/awt/image/ComponentColorModel.html#getGreen(java.lang.Object)
int getGreen(Object inData);
m
int
getBlue
java/awt/image/ComponentColorModel.html#getBlue(java.lang.Object)
int getBlue(Object inData);
m
int
getAlpha
java/awt/image/ComponentColorModel.html#getAlpha(java.lang.Object)
int getAlpha(Object inData);
m
int
getRGB
java/awt/image/ComponentColorModel.html#getRGB(java.lang.Object)
int getRGB(Object inData);
m
Object
getDataElements
java/awt/image/ComponentColorModel.html#getDataElements(int, java.lang.Object)
Object getDataElements(int rgb, Object pixel);
m
int
getComponents
java/awt/image/ComponentColorModel.html#getComponents(int, int[], int)
int[] getComponents(int pixel, int[] components, int offset);
int[] getComponents(Object pixel, int[] components, int offset);
m
int
getDataElement
java/awt/image/ComponentColorModel.html#getDataElement(int[], int)
int getDataElement(int[] components, int offset);
m
Object
getDataElements
java/awt/image/ComponentColorModel.html#getDataElements(int[], int, java.lang.Object)
Object getDataElements(int[] components, int offset, Object obj);
m
ColorModel
coerceData
java/awt/image/ComponentColorModel.html#coerceData(java.awt.image.WritableRaster, boolean)
ColorModel coerceData(WritableRaster raster, boolean isAlphaPremultiplied);
m
boolean
isCompatibleRaster
java/awt/image/ComponentColorModel.html#isCompatibleRaster(java.awt.image.Raster)
boolean isCompatibleRaster(Raster raster);
m
WritableRaster
createCompatibleWritableRaster
java/awt/image/ComponentColorModel.html#createCompatibleWritableRaster(int, int)
WritableRaster createCompatibleWritableRaster(int w, int h);
m
SampleModel
createCompatibleSampleModel
java/awt/image/ComponentColorModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
boolean
isCompatibleSampleModel
java/awt/image/ComponentColorModel.html#isCompatibleSampleModel(java.awt.image.SampleModel)
boolean isCompatibleSampleModel(SampleModel sm);
m
WritableRaster
getAlphaRaster
java/awt/image/ComponentColorModel.html#getAlphaRaster(java.awt.image.WritableRaster)
WritableRaster getAlphaRaster(WritableRaster raster);
m
boolean
equals
java/awt/image/ComponentColorModel.html#equals(java.lang.Object)
boolean equals(Object obj);
CropImageFilter
class CropImageFilter extends ImageFilter;
ImageFilter
java/awt/image/CropImageFilter.html
java.awt.image.CropImageFilter
c

CropImageFilter
java/awt/image/CropImageFilter.html
CropImageFilter(int x, int y, int w, int h);
m
void
setProperties
java/awt/image/CropImageFilter.html#setProperties(java.util.Hashtable)
void setProperties(Hashtable props);
m
void
setDimensions
java/awt/image/CropImageFilter.html#setDimensions(int, int)
void setDimensions(int w, int h);
m
void
setPixels
java/awt/image/CropImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
RescaleOp
class RescaleOp extends Object;
Object
java/awt/image/RescaleOp.html
java.awt.image.RescaleOp
c

RescaleOp
java/awt/image/RescaleOp.html
RescaleOp(float[] scaleFactors, float[] offsets, RenderingHints hints);
RescaleOp(float scaleFactor, float offset, RenderingHints hints);
m
float
getScaleFactors
java/awt/image/RescaleOp.html#getScaleFactors(float[])
float[] getScaleFactors(float[] scaleFactors);
m
float
getOffsets
java/awt/image/RescaleOp.html#getOffsets(float[])
float[] getOffsets(float[] offsets);
m
int
getNumFactors
java/awt/image/RescaleOp.html#getNumFactors()
int getNumFactors();
m
BufferedImage
filter
java/awt/image/RescaleOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dst);
WritableRaster filter(Raster src, WritableRaster dst);
m
Rectangle2D
getBounds2D
java/awt/image/RescaleOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
Rectangle2D getBounds2D(Raster src);
m
BufferedImage
createCompatibleDestImage
java/awt/image/RescaleOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/RescaleOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/RescaleOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/RescaleOp.html#getRenderingHints()
RenderingHints getRenderingHints();
FilteredImageSource
class FilteredImageSource extends Object;
Object
java/awt/image/FilteredImageSource.html
java.awt.image.FilteredImageSource
c

FilteredImageSource
java/awt/image/FilteredImageSource.html
FilteredImageSource(ImageProducer orig, ImageFilter imgf);
m
void
addConsumer
java/awt/image/FilteredImageSource.html#addConsumer(java.awt.image.ImageConsumer)
void addConsumer(ImageConsumer ic);
m
boolean
isConsumer
java/awt/image/FilteredImageSource.html#isConsumer(java.awt.image.ImageConsumer)
boolean isConsumer(ImageConsumer ic);
m
void
removeConsumer
java/awt/image/FilteredImageSource.html#removeConsumer(java.awt.image.ImageConsumer)
void removeConsumer(ImageConsumer ic);
m
void
startProduction
java/awt/image/FilteredImageSource.html#startProduction(java.awt.image.ImageConsumer)
void startProduction(ImageConsumer ic);
m
void
requestTopDownLeftRightResend
java/awt/image/FilteredImageSource.html#requestTopDownLeftRightResend(java.awt.image.ImageConsumer)
void requestTopDownLeftRightResend(ImageConsumer ic);
ConvolveOp
class ConvolveOp extends Object;
Object
java/awt/image/ConvolveOp.html
java.awt.image.ConvolveOp
c

ConvolveOp
java/awt/image/ConvolveOp.html
ConvolveOp(Kernel kernel, int edgeCondition, RenderingHints hints);
ConvolveOp(Kernel kernel);
f
int
EDGE_ZERO_FILL
java/awt/image/ConvolveOp.html#EDGE_ZERO_FILL
int EDGE_ZERO_FILL;
f
int
EDGE_NO_OP
java/awt/image/ConvolveOp.html#EDGE_NO_OP
int EDGE_NO_OP;
m
int
getEdgeCondition
java/awt/image/ConvolveOp.html#getEdgeCondition()
int getEdgeCondition();
m
Kernel
getKernel
java/awt/image/ConvolveOp.html#getKernel()
Kernel getKernel();
m
BufferedImage
filter
java/awt/image/ConvolveOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dst);
WritableRaster filter(Raster src, WritableRaster dst);
m
BufferedImage
createCompatibleDestImage
java/awt/image/ConvolveOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/ConvolveOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Rectangle2D
getBounds2D
java/awt/image/ConvolveOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
Rectangle2D getBounds2D(Raster src);
m
Point2D
getPoint2D
java/awt/image/ConvolveOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/ConvolveOp.html#getRenderingHints()
RenderingHints getRenderingHints();
WritableRenderedImage
class WritableRenderedImage;

java/awt/image/WritableRenderedImage.html
java.awt.image.WritableRenderedImage
m
void
addTileObserver
java/awt/image/WritableRenderedImage.html#addTileObserver(java.awt.image.TileObserver)
void addTileObserver(TileObserver to);
m
void
removeTileObserver
java/awt/image/WritableRenderedImage.html#removeTileObserver(java.awt.image.TileObserver)
void removeTileObserver(TileObserver to);
m
WritableRaster
getWritableTile
java/awt/image/WritableRenderedImage.html#getWritableTile(int, int)
WritableRaster getWritableTile(int tileX, int tileY);
m
void
releaseWritableTile
java/awt/image/WritableRenderedImage.html#releaseWritableTile(int, int)
void releaseWritableTile(int tileX, int tileY);
m
boolean
isTileWritable
java/awt/image/WritableRenderedImage.html#isTileWritable(int, int)
boolean isTileWritable(int tileX, int tileY);
m
Point
getWritableTileIndices
java/awt/image/WritableRenderedImage.html#getWritableTileIndices()
Point[] getWritableTileIndices();
m
boolean
hasTileWriters
java/awt/image/WritableRenderedImage.html#hasTileWriters()
boolean hasTileWriters();
m
void
setData
java/awt/image/WritableRenderedImage.html#setData(java.awt.image.Raster)
void setData(Raster r);
DataBufferUShort
class DataBufferUShort extends DataBuffer;
DataBuffer
java/awt/image/DataBufferUShort.html
java.awt.image.DataBufferUShort
c

DataBufferUShort
java/awt/image/DataBufferUShort.html
DataBufferUShort(int size);
DataBufferUShort(int size, int numBanks);
DataBufferUShort(short[] dataArray, int size);
DataBufferUShort(short[] dataArray, int size, int offset);
DataBufferUShort(short[][] dataArray, int size);
DataBufferUShort(short[][] dataArray, int size, int[] offsets);
m
short
getData
java/awt/image/DataBufferUShort.html#getData()
short[] getData();
short[] getData(int bank);
m
short
getBankData
java/awt/image/DataBufferUShort.html#getBankData()
short[][] getBankData();
m
int
getElem
java/awt/image/DataBufferUShort.html#getElem(int)
int getElem(int i);
int getElem(int bank, int i);
m
void
setElem
java/awt/image/DataBufferUShort.html#setElem(int, int)
void setElem(int i, int val);
void setElem(int bank, int i, int val);
RGBImageFilter
class RGBImageFilter extends ImageFilter;
ImageFilter
java/awt/image/RGBImageFilter.html
java.awt.image.RGBImageFilter
c

RGBImageFilter
java/awt/image/RGBImageFilter.html
RGBImageFilter();
f
ColorModel
origmodel
java/awt/image/RGBImageFilter.html#origmodel
ColorModel origmodel;
f
ColorModel
newmodel
java/awt/image/RGBImageFilter.html#newmodel
ColorModel newmodel;
f
boolean
canFilterIndexColorModel
java/awt/image/RGBImageFilter.html#canFilterIndexColorModel
boolean canFilterIndexColorModel;
m
void
setColorModel
java/awt/image/RGBImageFilter.html#setColorModel(java.awt.image.ColorModel)
void setColorModel(ColorModel model);
m
void
substituteColorModel
java/awt/image/RGBImageFilter.html#substituteColorModel(java.awt.image.ColorModel, java.awt.image.ColorModel)
void substituteColorModel(ColorModel oldcm, ColorModel newcm);
m
IndexColorModel
filterIndexColorModel
java/awt/image/RGBImageFilter.html#filterIndexColorModel(java.awt.image.IndexColorModel)
IndexColorModel filterIndexColorModel(IndexColorModel icm);
m
void
filterRGBPixels
java/awt/image/RGBImageFilter.html#filterRGBPixels(int, int, int, int, int[], int, int)
void filterRGBPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize);
m
void
setPixels
java/awt/image/RGBImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
m
int
filterRGB
java/awt/image/RGBImageFilter.html#filterRGB(int, int, int)
int filterRGB(int x, int y, int rgb);
PixelInterleavedSampleModel
class PixelInterleavedSampleModel extends ComponentSampleModel;
ComponentSampleModel
java/awt/image/PixelInterleavedSampleModel.html
java.awt.image.PixelInterleavedSampleModel
c

PixelInterleavedSampleModel
java/awt/image/PixelInterleavedSampleModel.html
PixelInterleavedSampleModel(int dataType, int w, int h, int pixelStride, int scanlineStride, int[] bandOffsets);
m
SampleModel
createCompatibleSampleModel
java/awt/image/PixelInterleavedSampleModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
SampleModel
createSubsetSampleModel
java/awt/image/PixelInterleavedSampleModel.html#createSubsetSampleModel(int[])
SampleModel createSubsetSampleModel(int[] bands);
PixelGrabber
class PixelGrabber extends Object;
Object
java/awt/image/PixelGrabber.html
java.awt.image.PixelGrabber
c

PixelGrabber
java/awt/image/PixelGrabber.html
PixelGrabber(Image img, int x, int y, int w, int h, int[] pix, int off, int scansize);
PixelGrabber(ImageProducer ip, int x, int y, int w, int h, int[] pix, int off, int scansize);
PixelGrabber(Image img, int x, int y, int w, int h, boolean forceRGB);
m
void
startGrabbing
java/awt/image/PixelGrabber.html#startGrabbing()
void startGrabbing();
m
void
abortGrabbing
java/awt/image/PixelGrabber.html#abortGrabbing()
void abortGrabbing();
m
boolean
grabPixels
java/awt/image/PixelGrabber.html#grabPixels()
boolean grabPixels() throws InterruptedException;
boolean grabPixels(long ms) throws InterruptedException;
m
int
getStatus
java/awt/image/PixelGrabber.html#getStatus()
int getStatus();
m
int
getWidth
java/awt/image/PixelGrabber.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/PixelGrabber.html#getHeight()
int getHeight();
m
Object
getPixels
java/awt/image/PixelGrabber.html#getPixels()
Object getPixels();
m
ColorModel
getColorModel
java/awt/image/PixelGrabber.html#getColorModel()
ColorModel getColorModel();
m
void
setDimensions
java/awt/image/PixelGrabber.html#setDimensions(int, int)
void setDimensions(int width, int height);
m
void
setHints
java/awt/image/PixelGrabber.html#setHints(int)
void setHints(int hints);
m
void
setProperties
java/awt/image/PixelGrabber.html#setProperties(java.util.Hashtable)
void setProperties(Hashtable props);
m
void
setColorModel
java/awt/image/PixelGrabber.html#setColorModel(java.awt.image.ColorModel)
void setColorModel(ColorModel model);
m
void
setPixels
java/awt/image/PixelGrabber.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, byte[] pixels, int srcOff, int srcScan);
void setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, int[] pixels, int srcOff, int srcScan);
m
void
imageComplete
java/awt/image/PixelGrabber.html#imageComplete(int)
void imageComplete(int status);
m
int
status
java/awt/image/PixelGrabber.html#status()
int status();
DataBufferShort
class DataBufferShort extends DataBuffer;
DataBuffer
java/awt/image/DataBufferShort.html
java.awt.image.DataBufferShort
c

DataBufferShort
java/awt/image/DataBufferShort.html
DataBufferShort(int size);
DataBufferShort(int size, int numBanks);
DataBufferShort(short[] dataArray, int size);
DataBufferShort(short[] dataArray, int size, int offset);
DataBufferShort(short[][] dataArray, int size);
DataBufferShort(short[][] dataArray, int size, int[] offsets);
m
short
getData
java/awt/image/DataBufferShort.html#getData()
short[] getData();
short[] getData(int bank);
m
short
getBankData
java/awt/image/DataBufferShort.html#getBankData()
short[][] getBankData();
m
int
getElem
java/awt/image/DataBufferShort.html#getElem(int)
int getElem(int i);
int getElem(int bank, int i);
m
void
setElem
java/awt/image/DataBufferShort.html#setElem(int, int)
void setElem(int i, int val);
void setElem(int bank, int i, int val);
RenderedImage
class RenderedImage;

java/awt/image/RenderedImage.html
java.awt.image.RenderedImage
m
Vector
getSources
java/awt/image/RenderedImage.html#getSources()
Vector getSources();
m
Object
getProperty
java/awt/image/RenderedImage.html#getProperty(java.lang.String)
Object getProperty(String name);
m
String
getPropertyNames
java/awt/image/RenderedImage.html#getPropertyNames()
String[] getPropertyNames();
m
ColorModel
getColorModel
java/awt/image/RenderedImage.html#getColorModel()
ColorModel getColorModel();
m
SampleModel
getSampleModel
java/awt/image/RenderedImage.html#getSampleModel()
SampleModel getSampleModel();
m
int
getWidth
java/awt/image/RenderedImage.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/RenderedImage.html#getHeight()
int getHeight();
m
int
getMinX
java/awt/image/RenderedImage.html#getMinX()
int getMinX();
m
int
getMinY
java/awt/image/RenderedImage.html#getMinY()
int getMinY();
m
int
getNumXTiles
java/awt/image/RenderedImage.html#getNumXTiles()
int getNumXTiles();
m
int
getNumYTiles
java/awt/image/RenderedImage.html#getNumYTiles()
int getNumYTiles();
m
int
getMinTileX
java/awt/image/RenderedImage.html#getMinTileX()
int getMinTileX();
m
int
getMinTileY
java/awt/image/RenderedImage.html#getMinTileY()
int getMinTileY();
m
int
getTileWidth
java/awt/image/RenderedImage.html#getTileWidth()
int getTileWidth();
m
int
getTileHeight
java/awt/image/RenderedImage.html#getTileHeight()
int getTileHeight();
m
int
getTileGridXOffset
java/awt/image/RenderedImage.html#getTileGridXOffset()
int getTileGridXOffset();
m
int
getTileGridYOffset
java/awt/image/RenderedImage.html#getTileGridYOffset()
int getTileGridYOffset();
m
Raster
getTile
java/awt/image/RenderedImage.html#getTile(int, int)
Raster getTile(int tileX, int tileY);
m
Raster
getData
java/awt/image/RenderedImage.html#getData()
Raster getData();
Raster getData(Rectangle rect);
m
WritableRaster
copyData
java/awt/image/RenderedImage.html#copyData(java.awt.image.WritableRaster)
WritableRaster copyData(WritableRaster raster);
RasterFormatException
class RasterFormatException extends RuntimeException;
RuntimeException
java/awt/image/RasterFormatException.html
java.awt.image.RasterFormatException
c

RasterFormatException
java/awt/image/RasterFormatException.html
RasterFormatException(String s);
ImagingOpException
class ImagingOpException extends RuntimeException;
RuntimeException
java/awt/image/ImagingOpException.html
java.awt.image.ImagingOpException
c

ImagingOpException
java/awt/image/ImagingOpException.html
ImagingOpException(String s);
BufferedImageFilter
class BufferedImageFilter extends ImageFilter;
ImageFilter
java/awt/image/BufferedImageFilter.html
java.awt.image.BufferedImageFilter
c

BufferedImageFilter
java/awt/image/BufferedImageFilter.html
BufferedImageFilter(BufferedImageOp op);
m
BufferedImageOp
getBufferedImageOp
java/awt/image/BufferedImageFilter.html#getBufferedImageOp()
BufferedImageOp getBufferedImageOp();
m
void
setDimensions
java/awt/image/BufferedImageFilter.html#setDimensions(int, int)
void setDimensions(int width, int height);
m
void
setColorModel
java/awt/image/BufferedImageFilter.html#setColorModel(java.awt.image.ColorModel)
void setColorModel(ColorModel model);
m
void
setPixels
java/awt/image/BufferedImageFilter.html#setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)
void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize);
void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize);
m
void
imageComplete
java/awt/image/BufferedImageFilter.html#imageComplete(int)
void imageComplete(int status);
DataBufferByte
class DataBufferByte extends DataBuffer;
DataBuffer
java/awt/image/DataBufferByte.html
java.awt.image.DataBufferByte
c

DataBufferByte
java/awt/image/DataBufferByte.html
DataBufferByte(int size);
DataBufferByte(int size, int numBanks);
DataBufferByte(byte[] dataArray, int size);
DataBufferByte(byte[] dataArray, int size, int offset);
DataBufferByte(byte[][] dataArray, int size);
DataBufferByte(byte[][] dataArray, int size, int[] offsets);
m
byte
getData
java/awt/image/DataBufferByte.html#getData()
byte[] getData();
byte[] getData(int bank);
m
byte
getBankData
java/awt/image/DataBufferByte.html#getBankData()
byte[][] getBankData();
m
int
getElem
java/awt/image/DataBufferByte.html#getElem(int)
int getElem(int i);
int getElem(int bank, int i);
m
void
setElem
java/awt/image/DataBufferByte.html#setElem(int, int)
void setElem(int i, int val);
void setElem(int bank, int i, int val);
BufferedImage
class BufferedImage extends Image;
Image
java/awt/image/BufferedImage.html
java.awt.image.BufferedImage
c

BufferedImage
java/awt/image/BufferedImage.html
BufferedImage(int width, int height, int imageType);
BufferedImage(int width, int height, int imageType, IndexColorModel cm);
BufferedImage(ColorModel cm, WritableRaster raster, boolean isRasterPremultiplied, Hashtable properties);
f
int
TYPE_CUSTOM
java/awt/image/BufferedImage.html#TYPE_CUSTOM
int TYPE_CUSTOM;
f
int
TYPE_INT_RGB
java/awt/image/BufferedImage.html#TYPE_INT_RGB
int TYPE_INT_RGB;
f
int
TYPE_INT_ARGB
java/awt/image/BufferedImage.html#TYPE_INT_ARGB
int TYPE_INT_ARGB;
f
int
TYPE_INT_ARGB_PRE
java/awt/image/BufferedImage.html#TYPE_INT_ARGB_PRE
int TYPE_INT_ARGB_PRE;
f
int
TYPE_INT_BGR
java/awt/image/BufferedImage.html#TYPE_INT_BGR
int TYPE_INT_BGR;
f
int
TYPE_3BYTE_BGR
java/awt/image/BufferedImage.html#TYPE_3BYTE_BGR
int TYPE_3BYTE_BGR;
f
int
TYPE_4BYTE_ABGR
java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR
int TYPE_4BYTE_ABGR;
f
int
TYPE_4BYTE_ABGR_PRE
java/awt/image/BufferedImage.html#TYPE_4BYTE_ABGR_PRE
int TYPE_4BYTE_ABGR_PRE;
f
int
TYPE_USHORT_565_RGB
java/awt/image/BufferedImage.html#TYPE_USHORT_565_RGB
int TYPE_USHORT_565_RGB;
f
int
TYPE_USHORT_555_RGB
java/awt/image/BufferedImage.html#TYPE_USHORT_555_RGB
int TYPE_USHORT_555_RGB;
f
int
TYPE_BYTE_GRAY
java/awt/image/BufferedImage.html#TYPE_BYTE_GRAY
int TYPE_BYTE_GRAY;
f
int
TYPE_USHORT_GRAY
java/awt/image/BufferedImage.html#TYPE_USHORT_GRAY
int TYPE_USHORT_GRAY;
f
int
TYPE_BYTE_BINARY
java/awt/image/BufferedImage.html#TYPE_BYTE_BINARY
int TYPE_BYTE_BINARY;
f
int
TYPE_BYTE_INDEXED
java/awt/image/BufferedImage.html#TYPE_BYTE_INDEXED
int TYPE_BYTE_INDEXED;
m
int
getType
java/awt/image/BufferedImage.html#getType()
int getType();
m
ColorModel
getColorModel
java/awt/image/BufferedImage.html#getColorModel()
ColorModel getColorModel();
m
WritableRaster
getRaster
java/awt/image/BufferedImage.html#getRaster()
WritableRaster getRaster();
m
WritableRaster
getAlphaRaster
java/awt/image/BufferedImage.html#getAlphaRaster()
WritableRaster getAlphaRaster();
m
int
getRGB
java/awt/image/BufferedImage.html#getRGB(int, int)
int getRGB(int x, int y);
int[] getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize);
m
void
setRGB
java/awt/image/BufferedImage.html#setRGB(int, int, int)
void setRGB(int x, int y, int rgb);
void setRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize);
m
int
getWidth
java/awt/image/BufferedImage.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/BufferedImage.html#getHeight()
int getHeight();
m
int
getWidth
java/awt/image/BufferedImage.html#getWidth(java.awt.image.ImageObserver)
int getWidth(ImageObserver observer);
m
int
getHeight
java/awt/image/BufferedImage.html#getHeight(java.awt.image.ImageObserver)
int getHeight(ImageObserver observer);
m
ImageProducer
getSource
java/awt/image/BufferedImage.html#getSource()
ImageProducer getSource();
m
Object
getProperty
java/awt/image/BufferedImage.html#getProperty(java.lang.String, java.awt.image.ImageObserver)
Object getProperty(String name, ImageObserver observer);
Object getProperty(String name);
m
void
flush
java/awt/image/BufferedImage.html#flush()
void flush();
m
Graphics
getGraphics
java/awt/image/BufferedImage.html#getGraphics()
Graphics getGraphics();
m
Graphics2D
createGraphics
java/awt/image/BufferedImage.html#createGraphics()
Graphics2D createGraphics();
m
BufferedImage
getSubimage
java/awt/image/BufferedImage.html#getSubimage(int, int, int, int)
BufferedImage getSubimage(int x, int y, int w, int h);
m
boolean
isAlphaPremultiplied
java/awt/image/BufferedImage.html#isAlphaPremultiplied()
boolean isAlphaPremultiplied();
m
void
coerceData
java/awt/image/BufferedImage.html#coerceData(boolean)
void coerceData(boolean isAlphaPremultiplied);
m
String
toString
java/awt/image/BufferedImage.html#toString()
String toString();
m
Vector
getSources
java/awt/image/BufferedImage.html#getSources()
Vector getSources();
m
String
getPropertyNames
java/awt/image/BufferedImage.html#getPropertyNames()
String[] getPropertyNames();
m
int
getMinX
java/awt/image/BufferedImage.html#getMinX()
int getMinX();
m
int
getMinY
java/awt/image/BufferedImage.html#getMinY()
int getMinY();
m
SampleModel
getSampleModel
java/awt/image/BufferedImage.html#getSampleModel()
SampleModel getSampleModel();
m
int
getNumXTiles
java/awt/image/BufferedImage.html#getNumXTiles()
int getNumXTiles();
m
int
getNumYTiles
java/awt/image/BufferedImage.html#getNumYTiles()
int getNumYTiles();
m
int
getMinTileX
java/awt/image/BufferedImage.html#getMinTileX()
int getMinTileX();
m
int
getMinTileY
java/awt/image/BufferedImage.html#getMinTileY()
int getMinTileY();
m
int
getTileWidth
java/awt/image/BufferedImage.html#getTileWidth()
int getTileWidth();
m
int
getTileHeight
java/awt/image/BufferedImage.html#getTileHeight()
int getTileHeight();
m
int
getTileGridXOffset
java/awt/image/BufferedImage.html#getTileGridXOffset()
int getTileGridXOffset();
m
int
getTileGridYOffset
java/awt/image/BufferedImage.html#getTileGridYOffset()
int getTileGridYOffset();
m
Raster
getTile
java/awt/image/BufferedImage.html#getTile(int, int)
Raster getTile(int tileX, int tileY);
m
Raster
getData
java/awt/image/BufferedImage.html#getData()
Raster getData();
Raster getData(Rectangle rect);
m
WritableRaster
copyData
java/awt/image/BufferedImage.html#copyData(java.awt.image.WritableRaster)
WritableRaster copyData(WritableRaster outRaster);
m
void
setData
java/awt/image/BufferedImage.html#setData(java.awt.image.Raster)
void setData(Raster r);
m
void
addTileObserver
java/awt/image/BufferedImage.html#addTileObserver(java.awt.image.TileObserver)
void addTileObserver(TileObserver to);
m
void
removeTileObserver
java/awt/image/BufferedImage.html#removeTileObserver(java.awt.image.TileObserver)
void removeTileObserver(TileObserver to);
m
boolean
isTileWritable
java/awt/image/BufferedImage.html#isTileWritable(int, int)
boolean isTileWritable(int tileX, int tileY);
m
Point
getWritableTileIndices
java/awt/image/BufferedImage.html#getWritableTileIndices()
Point[] getWritableTileIndices();
m
boolean
hasTileWriters
java/awt/image/BufferedImage.html#hasTileWriters()
boolean hasTileWriters();
m
WritableRaster
getWritableTile
java/awt/image/BufferedImage.html#getWritableTile(int, int)
WritableRaster getWritableTile(int tileX, int tileY);
m
void
releaseWritableTile
java/awt/image/BufferedImage.html#releaseWritableTile(int, int)
void releaseWritableTile(int tileX, int tileY);
ShortLookupTable
class ShortLookupTable extends LookupTable;
LookupTable
java/awt/image/ShortLookupTable.html
java.awt.image.ShortLookupTable
c

ShortLookupTable
java/awt/image/ShortLookupTable.html
ShortLookupTable(int offset, short[][] data);
ShortLookupTable(int offset, short[] data);
m
short
getTable
java/awt/image/ShortLookupTable.html#getTable()
short[][] getTable();
m
int
lookupPixel
java/awt/image/ShortLookupTable.html#lookupPixel(int[], int[])
int[] lookupPixel(int[] src, int[] dst);
short[] lookupPixel(short[] src, short[] dst);
LookupOp
class LookupOp extends Object;
Object
java/awt/image/LookupOp.html
java.awt.image.LookupOp
c

LookupOp
java/awt/image/LookupOp.html
LookupOp(LookupTable lookup, RenderingHints hints);
m
LookupTable
getTable
java/awt/image/LookupOp.html#getTable()
LookupTable getTable();
m
BufferedImage
filter
java/awt/image/LookupOp.html#filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
BufferedImage filter(BufferedImage src, BufferedImage dst);
WritableRaster filter(Raster src, WritableRaster dst);
m
Rectangle2D
getBounds2D
java/awt/image/LookupOp.html#getBounds2D(java.awt.image.BufferedImage)
Rectangle2D getBounds2D(BufferedImage src);
Rectangle2D getBounds2D(Raster src);
m
BufferedImage
createCompatibleDestImage
java/awt/image/LookupOp.html#createCompatibleDestImage(java.awt.image.BufferedImage, java.awt.image.ColorModel)
BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM);
m
WritableRaster
createCompatibleDestRaster
java/awt/image/LookupOp.html#createCompatibleDestRaster(java.awt.image.Raster)
WritableRaster createCompatibleDestRaster(Raster src);
m
Point2D
getPoint2D
java/awt/image/LookupOp.html#getPoint2D(java.awt.geom.Point2D, java.awt.geom.Point2D)
Point2D getPoint2D(Point2D srcPt, Point2D dstPt);
m
RenderingHints
getRenderingHints
java/awt/image/LookupOp.html#getRenderingHints()
RenderingHints getRenderingHints();
Kernel
class Kernel extends Object;
Object
java/awt/image/Kernel.html
java.awt.image.Kernel
c

Kernel
java/awt/image/Kernel.html
Kernel(int width, int height, float[] data);
m
int
getXOrigin
java/awt/image/Kernel.html#getXOrigin()
int getXOrigin();
m
int
getYOrigin
java/awt/image/Kernel.html#getYOrigin()
int getYOrigin();
m
int
getWidth
java/awt/image/Kernel.html#getWidth()
int getWidth();
m
int
getHeight
java/awt/image/Kernel.html#getHeight()
int getHeight();
m
float
getKernelData
java/awt/image/Kernel.html#getKernelData(float[])
float[] getKernelData(float[] data);
m
Object
clone
java/awt/image/Kernel.html#clone()
Object clone();
WritableRaster
class WritableRaster extends Raster;
Raster
java/awt/image/WritableRaster.html
java.awt.image.WritableRaster
c

WritableRaster
java/awt/image/WritableRaster.html
WritableRaster(SampleModel sampleModel, Point origin);
WritableRaster(SampleModel sampleModel, DataBuffer dataBuffer, Point origin);
WritableRaster(SampleModel sampleModel, DataBuffer dataBuffer, Rectangle aRegion, Point sampleModelTranslate, WritableRaster parent);
m
WritableRaster
getWritableParent
java/awt/image/WritableRaster.html#getWritableParent()
WritableRaster getWritableParent();
m
WritableRaster
createWritableTranslatedChild
java/awt/image/WritableRaster.html#createWritableTranslatedChild(int, int)
WritableRaster createWritableTranslatedChild(int childMinX, int childMinY);
m
WritableRaster
createWritableChild
java/awt/image/WritableRaster.html#createWritableChild(int, int, int, int, int, int, int[])
WritableRaster createWritableChild(int parentX, int parentY, int w, int h, int childMinX, int childMinY, int[] bandList);
m
void
setDataElements
java/awt/image/WritableRaster.html#setDataElements(int, int, java.lang.Object)
void setDataElements(int x, int y, Object inData);
void setDataElements(int x, int y, Raster inRaster);
void setDataElements(int x, int y, int w, int h, Object inData);
m
void
setRect
java/awt/image/WritableRaster.html#setRect(java.awt.image.Raster)
void setRect(Raster srcRaster);
void setRect(int dx, int dy, Raster srcRaster);
m
void
setPixel
java/awt/image/WritableRaster.html#setPixel(int, int, int[])
void setPixel(int x, int y, int[] iArray);
void setPixel(int x, int y, float[] fArray);
void setPixel(int x, int y, double[] dArray);
m
void
setPixels
java/awt/image/WritableRaster.html#setPixels(int, int, int, int, int[])
void setPixels(int x, int y, int w, int h, int[] iArray);
void setPixels(int x, int y, int w, int h, float[] fArray);
void setPixels(int x, int y, int w, int h, double[] dArray);
m
void
setSample
java/awt/image/WritableRaster.html#setSample(int, int, int, int)
void setSample(int x, int y, int b, int s);
void setSample(int x, int y, int b, float s);
void setSample(int x, int y, int b, double s);
m
void
setSamples
java/awt/image/WritableRaster.html#setSamples(int, int, int, int, int, int[])
void setSamples(int x, int y, int w, int h, int b, int[] iArray);
void setSamples(int x, int y, int w, int h, int b, float[] fArray);
void setSamples(int x, int y, int w, int h, int b, double[] dArray);
IndexColorModel
class IndexColorModel extends ColorModel;
ColorModel
java/awt/image/IndexColorModel.html
java.awt.image.IndexColorModel
c

IndexColorModel
java/awt/image/IndexColorModel.html
IndexColorModel(int bits, int size, byte[] r, byte[] g, byte[] b);
IndexColorModel(int bits, int size, byte[] r, byte[] g, byte[] b, int trans);
IndexColorModel(int bits, int size, byte[] r, byte[] g, byte[] b, byte[] a);
IndexColorModel(int bits, int size, byte[] cmap, int start, boolean hasalpha);
IndexColorModel(int bits, int size, byte[] cmap, int start, boolean hasalpha, int trans);
IndexColorModel(int bits, int size, int[] cmap, int start, boolean hasalpha, int trans, int transferType);
IndexColorModel(int bits, int size, int[] cmap, int start, int transferType, BigInteger validBits);
m
int
getTransparency
java/awt/image/IndexColorModel.html#getTransparency()
int getTransparency();
m
int
getComponentSize
java/awt/image/IndexColorModel.html#getComponentSize()
int[] getComponentSize();
m
int
getMapSize
java/awt/image/IndexColorModel.html#getMapSize()
int getMapSize();
m
int
getTransparentPixel
java/awt/image/IndexColorModel.html#getTransparentPixel()
int getTransparentPixel();
m
void
getReds
java/awt/image/IndexColorModel.html#getReds(byte[])
void getReds(byte[] r);
m
void
getGreens
java/awt/image/IndexColorModel.html#getGreens(byte[])
void getGreens(byte[] g);
m
void
getBlues
java/awt/image/IndexColorModel.html#getBlues(byte[])
void getBlues(byte[] b);
m
void
getAlphas
java/awt/image/IndexColorModel.html#getAlphas(byte[])
void getAlphas(byte[] a);
m
void
getRGBs
java/awt/image/IndexColorModel.html#getRGBs(int[])
void getRGBs(int[] rgb);
m
int
getRed
java/awt/image/IndexColorModel.html#getRed(int)
int getRed(int pixel);
m
int
getGreen
java/awt/image/IndexColorModel.html#getGreen(int)
int getGreen(int pixel);
m
int
getBlue
java/awt/image/IndexColorModel.html#getBlue(int)
int getBlue(int pixel);
m
int
getAlpha
java/awt/image/IndexColorModel.html#getAlpha(int)
int getAlpha(int pixel);
m
int
getRGB
java/awt/image/IndexColorModel.html#getRGB(int)
int getRGB(int pixel);
m
Object
getDataElements
java/awt/image/IndexColorModel.html#getDataElements(int, java.lang.Object)
Object getDataElements(int rgb, Object pixel);
m
int
getComponents
java/awt/image/IndexColorModel.html#getComponents(int, int[], int)
int[] getComponents(int pixel, int[] components, int offset);
int[] getComponents(Object pixel, int[] components, int offset);
m
int
getDataElement
java/awt/image/IndexColorModel.html#getDataElement(int[], int)
int getDataElement(int[] components, int offset);
m
Object
getDataElements
java/awt/image/IndexColorModel.html#getDataElements(int[], int, java.lang.Object)
Object getDataElements(int[] components, int offset, Object pixel);
m
WritableRaster
createCompatibleWritableRaster
java/awt/image/IndexColorModel.html#createCompatibleWritableRaster(int, int)
WritableRaster createCompatibleWritableRaster(int w, int h);
m
boolean
isCompatibleRaster
java/awt/image/IndexColorModel.html#isCompatibleRaster(java.awt.image.Raster)
boolean isCompatibleRaster(Raster raster);
m
SampleModel
createCompatibleSampleModel
java/awt/image/IndexColorModel.html#createCompatibleSampleModel(int, int)
SampleModel createCompatibleSampleModel(int w, int h);
m
boolean
isCompatibleSampleModel
java/awt/image/IndexColorModel.html#isCompatibleSampleModel(java.awt.image.SampleModel)
boolean isCompatibleSampleModel(SampleModel sm);
m
BufferedImage
convertToIntDiscrete
java/awt/image/IndexColorModel.html#convertToIntDiscrete(java.awt.image.Raster, boolean)
BufferedImage convertToIntDiscrete(Raster raster, boolean forceARGB);
m
boolean
isValid
java/awt/image/IndexColorModel.html#isValid(int)
boolean isValid(int pixel);
boolean isValid();
m
BigInteger
getValidPixels
java/awt/image/IndexColorModel.html#getValidPixels()
BigInteger getValidPixels();
m
void
finalize
java/awt/image/IndexColorModel.html#finalize()
void finalize();
m
String
toString
java/awt/image/IndexColorModel.html#toString()
String toString();
CanvasPeer
class CanvasPeer;

java/awt/peer/CanvasPeer.html
java.awt.peer.CanvasPeer
ComponentPeer
class ComponentPeer;

java/awt/peer/ComponentPeer.html
java.awt.peer.ComponentPeer
m
void
setVisible
java/awt/peer/ComponentPeer.html#setVisible(boolean)
void setVisible(boolean b);
m
void
setEnabled
java/awt/peer/ComponentPeer.html#setEnabled(boolean)
void setEnabled(boolean b);
m
void
paint
java/awt/peer/ComponentPeer.html#paint(java.awt.Graphics)
void paint(Graphics g);
m
void
repaint
java/awt/peer/ComponentPeer.html#repaint(long, int, int, int, int)
void repaint(long tm, int x, int y, int width, int height);
m
void
print
java/awt/peer/ComponentPeer.html#print(java.awt.Graphics)
void print(Graphics g);
m
void
setBounds
java/awt/peer/ComponentPeer.html#setBounds(int, int, int, int)
void setBounds(int x, int y, int width, int height);
m
void
handleEvent
java/awt/peer/ComponentPeer.html#handleEvent(java.awt.AWTEvent)
void handleEvent(AWTEvent e);
m
void
coalescePaintEvent
java/awt/peer/ComponentPeer.html#coalescePaintEvent(java.awt.event.PaintEvent)
void coalescePaintEvent(PaintEvent e);
m
Point
getLocationOnScreen
java/awt/peer/ComponentPeer.html#getLocationOnScreen()
Point getLocationOnScreen();
m
Dimension
getPreferredSize
java/awt/peer/ComponentPeer.html#getPreferredSize()
Dimension getPreferredSize();
m
Dimension
getMinimumSize
java/awt/peer/ComponentPeer.html#getMinimumSize()
Dimension getMinimumSize();
m
ColorModel
getColorModel
java/awt/peer/ComponentPeer.html#getColorModel()
ColorModel getColorModel();
m
Toolkit
getToolkit
java/awt/peer/ComponentPeer.html#getToolkit()
Toolkit getToolkit();
m
Graphics
getGraphics
java/awt/peer/ComponentPeer.html#getGraphics()
Graphics getGraphics();
m
FontMetrics
getFontMetrics
java/awt/peer/ComponentPeer.html#getFontMetrics(java.awt.Font)
FontMetrics getFontMetrics(Font font);
m
void
dispose
java/awt/peer/ComponentPeer.html#dispose()
void dispose();
m
void
setForeground
java/awt/peer/ComponentPeer.html#setForeground(java.awt.Color)
void setForeground(Color c);
m
void
setBackground
java/awt/peer/ComponentPeer.html#setBackground(java.awt.Color)
void setBackground(Color c);
m
void
setFont
java/awt/peer/ComponentPeer.html#setFont(java.awt.Font)
void setFont(Font f);
m
void
setCursor
java/awt/peer/ComponentPeer.html#setCursor(java.awt.Cursor)
void setCursor(Cursor cursor);
m
void
requestFocus
java/awt/peer/ComponentPeer.html#requestFocus()
void requestFocus();
m
boolean
isFocusTraversable
java/awt/peer/ComponentPeer.html#isFocusTraversable()
boolean isFocusTraversable();
m
Image
createImage
java/awt/peer/ComponentPeer.html#createImage(java.awt.image.ImageProducer)
Image createImage(ImageProducer producer);
Image createImage(int width, int height);
m
boolean
prepareImage
java/awt/peer/ComponentPeer.html#prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
boolean prepareImage(Image img, int w, int h, ImageObserver o);
m
int
checkImage
java/awt/peer/ComponentPeer.html#checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
int checkImage(Image img, int w, int h, ImageObserver o);
m
GraphicsConfiguration
getGraphicsConfiguration
java/awt/peer/ComponentPeer.html#getGraphicsConfiguration()
GraphicsConfiguration getGraphicsConfiguration();
m
Dimension
preferredSize
java/awt/peer/ComponentPeer.html#preferredSize()
Dimension preferredSize();
m
Dimension
minimumSize
java/awt/peer/ComponentPeer.html#minimumSize()
Dimension minimumSize();
m
void
show
java/awt/peer/ComponentPeer.html#show()
void show();
m
void
hide
java/awt/peer/ComponentPeer.html#hide()
void hide();
m
void
enable
java/awt/peer/ComponentPeer.html#enable()
void enable();
m
void
disable
java/awt/peer/ComponentPeer.html#disable()
void disable();
m
void
reshape
java/awt/peer/ComponentPeer.html#reshape(int, int, int, int)
void reshape(int x, int y, int width, int height);
FileDialogPeer
class FileDialogPeer;

java/awt/peer/FileDialogPeer.html
java.awt.peer.FileDialogPeer
m
void
setFile
java/awt/peer/FileDialogPeer.html#setFile(java.lang.String)
void setFile(String file);
m
void
setDirectory
java/awt/peer/FileDialogPeer.html#setDirectory(java.lang.String)
void setDirectory(String dir);
m
void
setFilenameFilter
java/awt/peer/FileDialogPeer.html#setFilenameFilter(java.io.FilenameFilter)
void setFilenameFilter(FilenameFilter filter);
RobotPeer
class RobotPeer;

java/awt/peer/RobotPeer.html
java.awt.peer.RobotPeer
m
void
mouseMove
java/awt/peer/RobotPeer.html#mouseMove(int, int)
void mouseMove(int x, int y);
m
void
mousePress
java/awt/peer/RobotPeer.html#mousePress(int)
void mousePress(int buttons);
m
void
mouseRelease
java/awt/peer/RobotPeer.html#mouseRelease(int)
void mouseRelease(int buttons);
m
void
keyPress
java/awt/peer/RobotPeer.html#keyPress(int)
void keyPress(int keycode);
m
void
keyRelease
java/awt/peer/RobotPeer.html#keyRelease(int)
void keyRelease(int keycode);
m
int
getRGBPixel
java/awt/peer/RobotPeer.html#getRGBPixel(int, int)
int getRGBPixel(int x, int y);
m
int
getRGBPixels
java/awt/peer/RobotPeer.html#getRGBPixels(java.awt.Rectangle)
int[] getRGBPixels(Rectangle bounds);
ScrollPanePeer
class ScrollPanePeer;

java/awt/peer/ScrollPanePeer.html
java.awt.peer.ScrollPanePeer
m
int
getHScrollbarHeight
java/awt/peer/ScrollPanePeer.html#getHScrollbarHeight()
int getHScrollbarHeight();
m
int
getVScrollbarWidth
java/awt/peer/ScrollPanePeer.html#getVScrollbarWidth()
int getVScrollbarWidth();
m
void
setScrollPosition
java/awt/peer/ScrollPanePeer.html#setScrollPosition(int, int)
void setScrollPosition(int x, int y);
m
void
childResized
java/awt/peer/ScrollPanePeer.html#childResized(int, int)
void childResized(int w, int h);
m
void
setUnitIncrement
java/awt/peer/ScrollPanePeer.html#setUnitIncrement(java.awt.Adjustable, int)
void setUnitIncrement(Adjustable adj, int u);
m
void
setValue
java/awt/peer/ScrollPanePeer.html#setValue(java.awt.Adjustable, int)
void setValue(Adjustable adj, int v);
MenuBarPeer
class MenuBarPeer;

java/awt/peer/MenuBarPeer.html
java.awt.peer.MenuBarPeer
m
void
addMenu
java/awt/peer/MenuBarPeer.html#addMenu(java.awt.Menu)
void addMenu(Menu m);
m
void
delMenu
java/awt/peer/MenuBarPeer.html#delMenu(int)
void delMenu(int index);
m
void
addHelpMenu
java/awt/peer/MenuBarPeer.html#addHelpMenu(java.awt.Menu)
void addHelpMenu(Menu m);
MenuPeer
class MenuPeer;

java/awt/peer/MenuPeer.html
java.awt.peer.MenuPeer
m
void
addSeparator
java/awt/peer/MenuPeer.html#addSeparator()
void addSeparator();
m
void
addItem
java/awt/peer/MenuPeer.html#addItem(java.awt.MenuItem)
void addItem(MenuItem item);
m
void
delItem
java/awt/peer/MenuPeer.html#delItem(int)
void delItem(int index);
MenuItemPeer
class MenuItemPeer;

java/awt/peer/MenuItemPeer.html
java.awt.peer.MenuItemPeer
m
void
setLabel
java/awt/peer/MenuItemPeer.html#setLabel(java.lang.String)
void setLabel(String label);
m
void
setEnabled
java/awt/peer/MenuItemPeer.html#setEnabled(boolean)
void setEnabled(boolean b);
m
void
enable
java/awt/peer/MenuItemPeer.html#enable()
void enable();
m
void
disable
java/awt/peer/MenuItemPeer.html#disable()
void disable();
ScrollbarPeer
class ScrollbarPeer;

java/awt/peer/ScrollbarPeer.html
java.awt.peer.ScrollbarPeer
m
void
setValues
java/awt/peer/ScrollbarPeer.html#setValues(int, int, int, int)
void setValues(int value, int visible, int minimum, int maximum);
m
void
setLineIncrement
java/awt/peer/ScrollbarPeer.html#setLineIncrement(int)
void setLineIncrement(int l);
m
void
setPageIncrement
java/awt/peer/ScrollbarPeer.html#setPageIncrement(int)
void setPageIncrement(int l);
FramePeer
class FramePeer;

java/awt/peer/FramePeer.html
java.awt.peer.FramePeer
m
void
setTitle
java/awt/peer/FramePeer.html#setTitle(java.lang.String)
void setTitle(String title);
m
void
setIconImage
java/awt/peer/FramePeer.html#setIconImage(java.awt.Image)
void setIconImage(Image im);
m
void
setMenuBar
java/awt/peer/FramePeer.html#setMenuBar(java.awt.MenuBar)
void setMenuBar(MenuBar mb);
m
void
setResizable
java/awt/peer/FramePeer.html#setResizable(boolean)
void setResizable(boolean resizeable);
m
void
setState
java/awt/peer/FramePeer.html#setState(int)
void setState(int state);
m
int
getState
java/awt/peer/FramePeer.html#getState()
int getState();
MenuComponentPeer
class MenuComponentPeer;

java/awt/peer/MenuComponentPeer.html
java.awt.peer.MenuComponentPeer
m
void
dispose
java/awt/peer/MenuComponentPeer.html#dispose()
void dispose();
PopupMenuPeer
class PopupMenuPeer;

java/awt/peer/PopupMenuPeer.html
java.awt.peer.PopupMenuPeer
m
void
show
java/awt/peer/PopupMenuPeer.html#show(java.awt.Event)
void show(Event e);
PanelPeer
class PanelPeer;

java/awt/peer/PanelPeer.html
java.awt.peer.PanelPeer
LabelPeer
class LabelPeer;

java/awt/peer/LabelPeer.html
java.awt.peer.LabelPeer
m
void
setText
java/awt/peer/LabelPeer.html#setText(java.lang.String)
void setText(String label);
m
void
setAlignment
java/awt/peer/LabelPeer.html#setAlignment(int)
void setAlignment(int alignment);
ChoicePeer
class ChoicePeer;

java/awt/peer/ChoicePeer.html
java.awt.peer.ChoicePeer
m
void
add
java/awt/peer/ChoicePeer.html#add(java.lang.String, int)
void add(String item, int index);
m
void
remove
java/awt/peer/ChoicePeer.html#remove(int)
void remove(int index);
m
void
removeAll
java/awt/peer/ChoicePeer.html#removeAll()
void removeAll();
m
void
select
java/awt/peer/ChoicePeer.html#select(int)
void select(int index);
m
void
addItem
java/awt/peer/ChoicePeer.html#addItem(java.lang.String, int)
void addItem(String item, int index);
ContainerPeer
class ContainerPeer;

java/awt/peer/ContainerPeer.html
java.awt.peer.ContainerPeer
m
Insets
getInsets
java/awt/peer/ContainerPeer.html#getInsets()
Insets getInsets();
m
void
beginValidate
java/awt/peer/ContainerPeer.html#beginValidate()
void beginValidate();
m
void
endValidate
java/awt/peer/ContainerPeer.html#endValidate()
void endValidate();
m
Insets
insets
java/awt/peer/ContainerPeer.html#insets()
Insets insets();
TextAreaPeer
class TextAreaPeer;

java/awt/peer/TextAreaPeer.html
java.awt.peer.TextAreaPeer
m
void
insert
java/awt/peer/TextAreaPeer.html#insert(java.lang.String, int)
void insert(String text, int pos);
m
void
replaceRange
java/awt/peer/TextAreaPeer.html#replaceRange(java.lang.String, int, int)
void replaceRange(String text, int start, int end);
m
Dimension
getPreferredSize
java/awt/peer/TextAreaPeer.html#getPreferredSize(int, int)
Dimension getPreferredSize(int rows, int columns);
m
Dimension
getMinimumSize
java/awt/peer/TextAreaPeer.html#getMinimumSize(int, int)
Dimension getMinimumSize(int rows, int columns);
m
void
insertText
java/awt/peer/TextAreaPeer.html#insertText(java.lang.String, int)
void insertText(String txt, int pos);
m
void
replaceText
java/awt/peer/TextAreaPeer.html#replaceText(java.lang.String, int, int)
void replaceText(String txt, int start, int end);
m
Dimension
preferredSize
java/awt/peer/TextAreaPeer.html#preferredSize(int, int)
Dimension preferredSize(int rows, int cols);
m
Dimension
minimumSize
java/awt/peer/TextAreaPeer.html#minimumSize(int, int)
Dimension minimumSize(int rows, int cols);
ButtonPeer
class ButtonPeer;

java/awt/peer/ButtonPeer.html
java.awt.peer.ButtonPeer
m
void
setLabel
java/awt/peer/ButtonPeer.html#setLabel(java.lang.String)
void setLabel(String label);
LightweightPeer
class LightweightPeer;

java/awt/peer/LightweightPeer.html
java.awt.peer.LightweightPeer
DialogPeer
class DialogPeer;

java/awt/peer/DialogPeer.html
java.awt.peer.DialogPeer
m
void
setTitle
java/awt/peer/DialogPeer.html#setTitle(java.lang.String)
void setTitle(String title);
m
void
setResizable
java/awt/peer/DialogPeer.html#setResizable(boolean)
void setResizable(boolean resizeable);
ListPeer
class ListPeer;

java/awt/peer/ListPeer.html
java.awt.peer.ListPeer
m
int
getSelectedIndexes
java/awt/peer/ListPeer.html#getSelectedIndexes()
int[] getSelectedIndexes();
m
void
add
java/awt/peer/ListPeer.html#add(java.lang.String, int)
void add(String item, int index);
m
void
delItems
java/awt/peer/ListPeer.html#delItems(int, int)
void delItems(int start, int end);
m
void
removeAll
java/awt/peer/ListPeer.html#removeAll()
void removeAll();
m
void
select
java/awt/peer/ListPeer.html#select(int)
void select(int index);
m
void
deselect
java/awt/peer/ListPeer.html#deselect(int)
void deselect(int index);
m
void
makeVisible
java/awt/peer/ListPeer.html#makeVisible(int)
void makeVisible(int index);
m
void
setMultipleMode
java/awt/peer/ListPeer.html#setMultipleMode(boolean)
void setMultipleMode(boolean b);
m
Dimension
getPreferredSize
java/awt/peer/ListPeer.html#getPreferredSize(int)
Dimension getPreferredSize(int rows);
m
Dimension
getMinimumSize
java/awt/peer/ListPeer.html#getMinimumSize(int)
Dimension getMinimumSize(int rows);
m
void
addItem
java/awt/peer/ListPeer.html#addItem(java.lang.String, int)
void addItem(String item, int index);
m
void
clear
java/awt/peer/ListPeer.html#clear()
void clear();
m
void
setMultipleSelections
java/awt/peer/ListPeer.html#setMultipleSelections(boolean)
void setMultipleSelections(boolean v);
m
Dimension
preferredSize
java/awt/peer/ListPeer.html#preferredSize(int)
Dimension preferredSize(int v);
m
Dimension
minimumSize
java/awt/peer/ListPeer.html#minimumSize(int)
Dimension minimumSize(int v);
FontPeer
class FontPeer;

java/awt/peer/FontPeer.html
java.awt.peer.FontPeer
WindowPeer
class WindowPeer;

java/awt/peer/WindowPeer.html
java.awt.peer.WindowPeer
f
int
IGNORE_EVENT
java/awt/peer/WindowPeer.html#IGNORE_EVENT
int IGNORE_EVENT;
f
int
CONSUME_EVENT
java/awt/peer/WindowPeer.html#CONSUME_EVENT
int CONSUME_EVENT;
f
int
FOCUS_NEXT
java/awt/peer/WindowPeer.html#FOCUS_NEXT
int FOCUS_NEXT;
f
int
FOCUS_PREVIOUS
java/awt/peer/WindowPeer.html#FOCUS_PREVIOUS
int FOCUS_PREVIOUS;
m
void
toFront
java/awt/peer/WindowPeer.html#toFront()
void toFront();
m
void
toBack
java/awt/peer/WindowPeer.html#toBack()
void toBack();
m
int
handleFocusTraversalEvent
java/awt/peer/WindowPeer.html#handleFocusTraversalEvent(java.awt.event.KeyEvent)
int handleFocusTraversalEvent(KeyEvent e);
CheckboxPeer
class CheckboxPeer;

java/awt/peer/CheckboxPeer.html
java.awt.peer.CheckboxPeer
m
void
setState
java/awt/peer/CheckboxPeer.html#setState(boolean)
void setState(boolean state);
m
void
setCheckboxGroup
java/awt/peer/CheckboxPeer.html#setCheckboxGroup(java.awt.CheckboxGroup)
void setCheckboxGroup(CheckboxGroup g);
m
void
setLabel
java/awt/peer/CheckboxPeer.html#setLabel(java.lang.String)
void setLabel(String label);
CheckboxMenuItemPeer
class CheckboxMenuItemPeer;

java/awt/peer/CheckboxMenuItemPeer.html
java.awt.peer.CheckboxMenuItemPeer
m
void
setState
java/awt/peer/CheckboxMenuItemPeer.html#setState(boolean)
void setState(boolean t);
TextFieldPeer
class TextFieldPeer;

java/awt/peer/TextFieldPeer.html
java.awt.peer.TextFieldPeer
m
void
setEchoChar
java/awt/peer/TextFieldPeer.html#setEchoChar(char)
void setEchoChar(char echoChar);
m
Dimension
getPreferredSize
java/awt/peer/TextFieldPeer.html#getPreferredSize(int)
Dimension getPreferredSize(int columns);
m
Dimension
getMinimumSize
java/awt/peer/TextFieldPeer.html#getMinimumSize(int)
Dimension getMinimumSize(int columns);
m
void
setEchoCharacter
java/awt/peer/TextFieldPeer.html#setEchoCharacter(char)
void setEchoCharacter(char c);
m
Dimension
preferredSize
java/awt/peer/TextFieldPeer.html#preferredSize(int)
Dimension preferredSize(int cols);
m
Dimension
minimumSize
java/awt/peer/TextFieldPeer.html#minimumSize(int)
Dimension minimumSize(int cols);
TextComponentPeer
class TextComponentPeer;

java/awt/peer/TextComponentPeer.html
java.awt.peer.TextComponentPeer
m
void
setEditable
java/awt/peer/TextComponentPeer.html#setEditable(boolean)
void setEditable(boolean editable);
m
String
getText
java/awt/peer/TextComponentPeer.html#getText()
String getText();
m
void
setText
java/awt/peer/TextComponentPeer.html#setText(java.lang.String)
void setText(String l);
m
int
getSelectionStart
java/awt/peer/TextComponentPeer.html#getSelectionStart()
int getSelectionStart();
m
int
getSelectionEnd
java/awt/peer/TextComponentPeer.html#getSelectionEnd()
int getSelectionEnd();
m
void
select
java/awt/peer/TextComponentPeer.html#select(int, int)
void select(int selStart, int selEnd);
m
void
setCaretPosition
java/awt/peer/TextComponentPeer.html#setCaretPosition(int)
void setCaretPosition(int pos);
m
int
getCaretPosition
java/awt/peer/TextComponentPeer.html#getCaretPosition()
int getCaretPosition();
m
int
getIndexAtPoint
java/awt/peer/TextComponentPeer.html#getIndexAtPoint(int, int)
int getIndexAtPoint(int x, int y);
m
Rectangle
getCharacterBounds
java/awt/peer/TextComponentPeer.html#getCharacterBounds(int)
Rectangle getCharacterBounds(int i);
m
long
filterEvents
java/awt/peer/TextComponentPeer.html#filterEvents(long)
long filterEvents(long mask);

