* 9 Type Conversion and Testing

* 9 型変換と型テスト


The ECMAScript runtime system performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion abstract operations. These abstract operations are not a part of the language; they are defined here to aid the specification of the semantics of the language. The conversion abstract operations are polymorphic; that is, they can accept a value of any ECMAScript language type, but not of specification types.

ECMAScriptのランタイムシステムは必要に応じて自動的に型変換を行います。特定の処理における意味合いを明らかにするために、変換のための抽象的な操作の集合を定義することは役に立ちます。これらの抽象操作は言語の一部ではありませんが言語の意味上の仕様を補助するためにここで定義されています。変換のための抽象操作は多態的です。つまりそれらの抽象操作は仕様の型だけではなくどのECMAScript言語の型の値も受け付けます。


* 9.1 ToPrimitive


The abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The abstract operation ToPrimitive converts its input argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint PreferredType to favour that type. Conversion occurs according to Table 10:

抽象操作ToPrimitiveはひとつの入力引数とひとつのオプション引数PreferredTypeを取ります。抽象操作ToPrimitiveは、その入力引数をオブジェクトではない型に変換します。もしオブジェクトが複数のプリミティブ型に変換できるのであれば、オプションのhintであるPreferredTypeを使って変換したい型を示します。変換は表10に従って行われます。


Table 10 - ToPrimitive Conversions
=============== ================================================================
Input Type      Result
=============== ================================================================
Undefined       The result equals the input argument (no conversion).
Null            The result equals the input argument (no conversion).
Boolean         The result equals the input argument (no conversion).
Number          The result equals the input argument (no conversion).
String          The result equals the input argument (no conversion).
Object          Return a default value for the Object. The default value of an object is retrieved by calling the [[DefaultValue]] internal method of the object, passing the optional hint PreferredType. The behaviour of the [[DefaultValue]] internal method is defined by this specification for all native ECMAScript objects in 8.12.8.
=============== ================================================================

表10 - ToPrimitiveによる変換
=============== ================================================================
入力の型        型
=============== ================================================================
Undefined       結果は入力の引数と同じです(変換せず)。
Null            結果は入力の引数と同じです(変換せず)。
Boolean         結果は入力の引数と同じです(変換せず)。
Number          結果は入力の引数と同じです(変換せず)。
String          結果は入力の引数と同じです(変換せず)。
Object          オブジェクトの初期値を返します。オブジェクトの初期値はオプションのhintであるPreferredTypeを引数として[[DefaultValue]]内部メソッドを呼び出すことで得られます。すべてのネイティブなECMAScriptオブジェクトに対して[[DefaultValue]]内部メソッドの振る舞いが定義されています。8.12.8を参照してください。
=============== ================================================================


* 9.2 ToBoolean


The abstract operation ToBoolean converts its argument to a value of type Boolean according to Table 11:

抽象操作ToBooleanは表11に従って引数をBoolean値に変換します。


Table 11 - ToBoolean Conversions
=============== ================================================================
Argument Type   Result
=============== ================================================================
Undefined       false
Null            false
Boolean         The result equals the input argument (no conversion).
Number          The result is false if the argument is +0, -0, or NaN; otherwise the result is true.
String          The result is false if the argument is the empty String (its length is zero); otherwise the result is true.
Object          true
=============== ================================================================

表11 - ToBooleanによる変換
=============== ================================================================
引数の型        結果
=============== ================================================================
Undefined       falseを返します。
Null            falseを返します。
Boolean         結果は入力引数と同じです(変換せず)。
Number          結果は引数が、+0、 -0、NaNのいずれかであればfalseです。それ以外はtrueです。
String          結果は引数が空文字列(長さゼロ)であればfalseです。それ以外はtrueです。
Object          trueを返します。
=============== ================================================================


* 9.3 ToNumber


The abstract operation ToNumber converts its argument to a value of type Number according to Table 12:

抽象操作ToNumberは表12に従って引数をNumber型の値に変換します。


Table 12 - ToNumber Conversions
=============== ================================================================
Argument Type   Result
=============== ================================================================
Undefined       NaN
Null            +0
Boolean         The result is 1 if the argument is true. The result is +0 if the argument is false.
Number          The result equals the input argument (no conversion).
String          See grammar and note below.
Object          Apply the following steps:
1. Let primValue be ToPrimitive(input argument, hint Number).
2. Return ToNumber(primValue).
=============== ================================================================

表12 - ToNumberによる変換
=============== ================================================================
引数の型        結果
=============== ================================================================
Undefined       NaN
Null            +0
Boolean         もし引数がtrueであれば結果は1です。falseであれば+0です。
Number          結果は入力の引数と同じです(変換せず)。
String          以下の文法と注記を見てください。
Object          以下のステップが適用されます。
1. ToPrimitive(input argument, hint Number)の結果をprimValueとします。
2. ToNumber(primValue)を返します。
=============== ================================================================


* 9.3.1 ToNumber Applied to the String Type

* 9.3.1 String型へのToNumberの適用


ToNumber applied to Strings applies the following grammar to the input String. If the grammar cannot interpret the String as an expansion of StringNumericLiteral, then the result of ToNumber is NaN.

文字列に対するToNumberの適用は入力文字列に対して以下の文法を適用します。もし文法が文字列をStringNumericLiteralの展開として解釈出来なかった場合には、ToNumberの結果はNaNになります。


  StringNumericLiteral :::
    StrWhiteSpace[opt] 
   StrWhiteSpace[opt] StrNumericLiteral StrWhiteSpace[opt] 


  StrWhiteSpace ::: 
    StrWhiteSpaceChar StrWhiteSpace[opt] 


  StrWhiteSpaceChar ::: 
    WhiteSpace 
    LineTerminator 


  StrNumericLiteral ::: 
    StrDecimalLiteral 
    HexIntegerLiteral 


  StrDecimalLiteral ::: 
    StrUnsignedDecimalLiteral 
    + StrUnsignedDecimalLiteral 
    - StrUnsignedDecimalLiteral 


  StrUnsignedDecimalLiteral ::: 
    Infinity
     DecimalDigits . DecimalDigits[opt] ExponentPart[opt] 
     . DecimalDigits ExponentPart[opt] 
     DecimalDigits ExponentPart[opt] 


  DecimalDigits ::: 
    DecimalDigit 
    DecimalDigits DecimalDigit 


  DecimalDigit ::: one of 
    0 1 2 3 4 5 6 7 8 9 


  ExponentPart ::: 
    ExponentIndicator SignedInteger 


  ExponentIndicator ::: one of 
    e E 


  SignedInteger ::: 
    DecimalDigits 
    + DecimalDigits 
    - DecimalDigits 


  HexIntegerLiteral ::: 
    0x HexDigit 
    0X HexDigit 
    HexIntegerLiteral HexDigit 


  HexDigit ::: one of 
    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F 


Some differences should be noted between the syntax of a StringNumericLiteral and a NumericLiteral (see 7.8.3): 

StringNumericLiteralとNumericLiteral(7.8.3)の構文の違いには留意しましょう。


- A StringNumericLiteral may be preceded and/or followed by white space and/or line terminators.
- A StringNumericLiteral that is decimal may have any number of leading 0 digits.
- A StringNumericLiteral that is decimal may be preceded by + or - to indicate its sign.
- A StringNumericLiteral that is empty or contains only white space is converted to +0.

- StringNumericLiteralにはその前と後のどちらかまたは両方に空白文字と改行文字のどちらかまたは両方を付けられます。
- 10進表記のStringNumericLiteralは何個でも数字の0を続けられます。
- 10進表記のStringNumericLiteralは符号を示す+か-を前に付けられます。
- 空文字もしくは空白文字だけを含むStringNumericLiteralは+0へ変換されます。


The conversion of a String to a Number value is similar overall to the determination of the Number value for a numeric literal (see 7.8.3), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here in full. This value is determined in two steps: first, a mathematical value (MV) is derived from the String numeric literal; second, this mathematical value is rounded as described below.

細部は異なりますが文字列の数値への変換は数値リテラル(7.8.3)の値を決定する過程によく似ています。数値リテラルをNumber型へ変換するステップはここで上げられているものがすべてです。この値は二つのステップで決められます。最初に数値文字列によるMVを決めます。次にMVを以下のやり方で丸めます。


- The MV of StringNumericLiteral ::: [empty] is 0.
- The MV of StringNumericLiteral ::: StrWhiteSpace is 0.
- The MV of StringNumericLiteral ::: StrWhiteSpace[opt] StrNumericLiteral StrWhiteSpace[opt] is the MV of StrNumericLiteral, no matter whether white space is present or not.
- The MV of StrNumericLiteral ::: StrDecimalLiteral is the MV of StrDecimalLiteral.
- The MV of StrNumericLiteral ::: HexIntegerLiteral is the MV of HexIntegerLiteral.
- The MV of StrDecimalLiteral ::: StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.
- The MV of StrDecimalLiteral ::: +StrUnsignedDecimalLiteral is the MV of StrUnsignedDecimalLiteral.
- The MV of StrDecimalLiteral ::: -StrUnsignedDecimalLiteral is the negative of the MV of StrUnsignedDecimalLiteral. (Note that if the MV of StrUnsignedDecimalLiteral is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point +0 or -0 as appropriate.) 
- The MV of StrUnsignedDecimalLiteral ::: Infinity is 10^10000 (a value so large that it will round to +∞).
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits . is the MV of DecimalDigits.
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits . DecimalDigits is the MV of the first DecimalDigits plus (the MV of the second DecimalDigits times 10^(-n)), where n is the number of characters in the second DecimalDigits.
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits. ExponentPart is the MV of DecimalDigits times 10^e , where e is the MV of ExponentPart.
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits . DecimalDigits ExponentPart is (the MV of the first DecimalDigits plus (the MV of the second DecimalDigits times 10^(e-n))) times 10^e, where n is the number of characters in the second DecimalDigits and e is the MV of ExponentPart.
- The MV of StrUnsignedDecimalLiteral ::: . DecimalDigits is the MV of DecimalDigits times 10^(-n), where n is the number of characters in DecimalDigits.
- The MV of StrUnsignedDecimalLiteral ::: . DecimalDigits ExponentPart is the MV of DecimalDigits times 10^(e-n) , where n is the number of characters in DecimalDigits and e is the MV of ExponentPart.
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits is the MV of DecimalDigits.
- The MV of StrUnsignedDecimalLiteral ::: DecimalDigits ExponentPart is the MV of DecimalDigits times 10^e , where e is the MV of ExponentPart.
- The MV of DecimalDigits ::: DecimalDigit is the MV of DecimalDigit.
- The MV of DecimalDigits ::: DecimalDigits DecimalDigit is (the MV of DecimalDigits times 10) plus the MV of DecimalDigit.
- The MV of ExponentPart ::: ExponentIndicator SignedInteger is the MV of SignedInteger.
- The MV of SignedInteger ::: DecimalDigits is the MV of DecimalDigits.
- The MV of SignedInteger ::: + DecimalDigits is the MV of DecimalDigits.
- The MV of SignedInteger ::: - DecimalDigits is the negative of the MV of DecimalDigits.
- The MV of DecimalDigit ::: 0 or of HexDigit ::: 0 is 0.
- The MV of DecimalDigit ::: 1 or of HexDigit ::: 1 is 1.
- The MV of DecimalDigit ::: 2 or of HexDigit ::: 2 is 2.
- The MV of DecimalDigit ::: 3 or of HexDigit ::: 3 is 3.
- The MV of DecimalDigit ::: 4 or of HexDigit ::: 4 is 4.
- The MV of DecimalDigit ::: 5 or of HexDigit ::: 5 is 5.
- The MV of DecimalDigit ::: 6 or of HexDigit ::: 6 is 6.
- The MV of DecimalDigit ::: 7 or of HexDigit ::: 7 is 7.
- The MV of DecimalDigit ::: 8 or of HexDigit ::: 8 is 8.
- The MV of DecimalDigit ::: 9 or of HexDigit ::: 9 is 9.
- The MV of HexDigit ::: a or of HexDigit ::: A is 10.
- The MV of HexDigit ::: b or of HexDigit ::: B is 11.
- The MV of HexDigit ::: c or of HexDigit ::: C is 12.
- The MV of HexDigit ::: d or of HexDigit ::: D is 13.
- The MV of HexDigit ::: e or of HexDigit ::: E is 14.
- The MV of HexDigit ::: f or of HexDigit ::: F is 15.
- The MV of HexIntegerLiteral ::: 0x HexDigit is the MV of HexDigit.
- The MV of HexIntegerLiteral ::: 0X HexDigit is the MV of HexDigit.
- The MV of HexIntegerLiteral ::: HexIntegerLiteral HexDigit is (the MV of HexIntegerLiteral times 16) plus the MV of HexDigit.

以下では、nはDicimalDigitsの文字の長さ、eはExponentPartのMVの値です。
- StringNumericLiteralが [empty] の場合、
    MVの値は0です。
- StringNumericLiteralが StrWhiteSpace の場合、
    MVの値は0です。
- StringNumericLiteralが StrWhiteSpace[opt] StrNumericLiteral StrWhiteSpace[opt] の場合、
    空白文字の有無に関わらずMVの値は0です。
- StrNumericLiteralが StrDecimalLiteral の場合、
    MVの値はStrDecimalLiteralの値です。
- StrNumericLiteralが HexDecimalLiteral の場合、
    MVの値はHexDecimalLiteralの値です。
- StrDecimalLiteralが StrUnsignedDecimalLiteral の場合、
    MVの値はStrUnsignedDecimalLiteralの値です。
- StrDecimalLiteralが + StrUnsignedDecimalLiteral の場合、
    MVの値はStrUnsignedDecimalLiteralの値です。
- StrDecimalLiteralが - StrUnsignedDecimalLiteral の場合、
    MVの値はStrUnsignedDecimalLiteralの負数です。(StrUnsignedDecimalLiteralのMVの値が0の場合には、このMVの負数も0であることに注意しましょう。以下で述べる丸め処理では、この符号無し0から浮動小数点の+0もしくは-0への変換を適切に行います。)
- StrUnsignedDecimalLiteralが Infinity の場合、
    MVの値は10^10000です。これは+∞に丸められる程十分に大きい値です。
- StrUnsignedDecimalLiteralが DecimalDigits . の場合、
    MNの値はDecimalDigitsの値です。
- StrUnsignedDecimalLiteralが DecimalDigits . DicimalDigits の場合、
    MVの値は(最初のDecimalDigits + 二番目のDecimalDigits * 10^(-n))になります。ここでnは二番目のDecimalDigitsの文字数です。
- StrUnsignedDecimalLiteralが DecimalDigits . ExponentPart の場合、
    MVの値は(DicimalDigits * 10^e)になります。ここでeはExponentPartのMVの値です。
- StrUnsignedDecimalLiteralが DecimalDigits . DecimalDigits ExponentPart の場合、
    MVの値は((最初のDecimalDigits + 二番目のDecimalDigits * 10^(-n)) * 10^e)になります。ここでnは二番目のDecimalDigitsの文字数であり、eはExponentPartのMVの値です。
- StrUnsignedDecimalLiteralが . DecimalDigits の場合、
    MVの値は10^(-n)になります。ここでnはDecimalDigitsの文字数です。
- StrUnsignedDecimalLiteralが . DecimalDigits ExponentPart の場合、
    MVの値は(DecimalDigits * 10^(e-n))になります。ここでnはExponentPartの文字数であり、eはExponentPartのMVの値です。
- StrUnsignedDecimalLiteralが DecimalDigitsの場合、
    MVの値はDecimalDigitsの値です。
- StrUnsignedDecimalLiteralが DecimalDigits ExponentPart の場合、
    MVの値は(DecimalDigits * 10^e)になります。ここでeはExponentPartのMVの値です。
- DecimalDigitsが DecimalDigit の場合、
    MVの値はDecimalDigitです。
- DecimalDigitsが DecimalDigits DecimalDigitの場合、
    MVの値は(DecimalDigits * 10 + DecimalDigit)になります。
- ExponentPartが ExponentIndicator SignedInteger の場合、
    MVの値はSignedIntegerになります。
- SignedIntegerが DecimalDigits の場合、
    MVの値はDecimalDigitsになります。
- SignedIntegerが + DecimalDigits の場合、
    MVの値はDecimalDigitsになります。
- SignedIntegerが - DecimalDigits の場合、
    MVの値は(- DecimalDigits)になります。
- DecimalDigitが0の場合、もしくは、HexDigitが0の場合、
    MVの値は0になります。
- DecimalDigitが1の場合、もしくは、HexDigitが1の場合、
    MVの値は1になります。
- DecimalDigitが2の場合、もしくは、HexDigitが2の場合、
    MVの値は2になります。
- DecimalDigitが3の場合、もしくは、HexDigitが3の場合、
    MVの値は3になります。
- DecimalDigitが4の場合、もしくは、HexDigitが4の場合、
    MVの値は4になります。
- DecimalDigitが5の場合、もしくは、HexDigitが5の場合、
    MVの値は5になります。
- DecimalDigitが6の場合、もしくは、HexDigitが6の場合、
    MVの値は6になります。
- DecimalDigitが7の場合、もしくは、HexDigitが7の場合、
    MVの値は7になります。
- DecimalDigitが8の場合、もしくは、HexDigitが8の場合、
    MVの値は8になります。
- DecimalDigitが9の場合、もしくは、HexDigitが9の場合、
    MVの値は9になります。
- HexDigitがaの場合、もしくは、HexDigitがAの場合、
    MVの値は10になります。
- HexDigitがbの場合、もしくは、HexDigitがBの場合、
    MVの値は11になります。
- HexDigitがcの場合、もしくは、HexDigitがCの場合、
    MVの値は12になります。
- HexDigitがdの場合、もしくは、HexDigitがDの場合、
    MVの値は13になります。
- HexDigitがeの場合、もしくは、HexDigitがEの場合、
    MVの値は14になります。
- HexDigitがfの場合、もしくは、HexDigitがFの場合、
    MVの値は15になります。
- HexIntegerLiteralが 0x HexDigit の場合、
    MVの値はHexDigitになります。
- HexIntegerLiteralが 0X HexDigit の場合、
    MVの値はHexDigitになります。
- HexIntegerLiteralが HexIntegerLiteral HexDigit の場合、
    MVの値は(HexIntegerLiteral * 16 + HexDigit)になります。


Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is +0 unless the first non white space character in the String numeric literal is ‘-’, in which case the rounded value is -0. Otherwise, the rounded value must be the Number value for the MV (in the sense defined in 8.5), unless the literal includes a StrUnsignedDecimalLiteral and the literal has more than 20 significant digits, in which case the Number value may be either the Number value for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the Number value for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an ExponentPart and 

ひとたび数値文字列に対応した正しいMVが定まると、それからNumber型への丸めが行われます。もしMVが0ならば数値文字列の最初の非空白文字が'-'ではない限り丸められた値は+0となります。もしそうならば丸められた値は-0となります。一方で、丸められた値は数値リテラルがStrUnsignedDecimalLiteralであったり、20桁を越える数値であったりする場合を除き、MVに対する(8.5で定義した意味における)数値とならなければなりません。そういった場合の数値は、20桁を越える部分を0で置き換えて作られれた数値リテラルのMVの値、もしくは、20桁を越える部分を0で置き換えて作られれた数値リテラルのMVの値に対して20桁目を1だけ加算した値となります。
一桁の数字は、それがExponentPartの一部ではなく...


- it is not 0; or 
- there is a nonzero digit to its left and there is a nonzero digit, not in the ExponentPart, to its right.

- それが0ではないか、もしくは
- その左側にゼロではない数字があり、その右側のExponentPartではない部分にゼロではない数字がある場合には重要です。


* 9.4 ToInteger


The abstract operation ToInteger converts its argument to an integral numeric value. This abstract operation functions as follows: 

抽象操作ToIntegerは引数を整数値へ変換します。この抽象操作は以下のとおり機能します。


1. Let number be the result of calling ToNumber on the input argument.
2. If number is NaN, return +0.
3. If number is +0, -0, +∞, or -∞, return number.
4. Return the result of computing sign(number) * floor(abs(number)).

1. 入力引数でToIntegerを呼び出した結果をnumberとします。
2. もしnumberがNaNならば、+0を返します。
3. もしnumberが+0, -0, +∞, -∞のいずれかならば、numberを返します。
4. sign(number) * floor(abs(number))を計算した結果を返します。


* 9.5 ToInt32: (Signed 32 Bit Integer) 

* 9.5 ToInt32: (符号付き32ビット整数) 


The abstract operation ToInt32 converts its argument to one of 2^32 integer values in the range -2^31 through 2^31-1, inclusive. This abstract operation functions as follows: 

抽象操作ToInt32は引数を-2^31から2^31-1までの範囲における2^32個の値のいずれかに変換します。この抽象操作は以下のとおり機能します。


1. Let number be the result of calling ToNumber on the input argument.
2. If number is NaN, +0, -0, +∞, or -∞, return +0.
3. Let posInt be sign(number) * floor(abs(number)).
4. Let int32bit be posInt modulo 2^32; that is, a finite integer value k of Number type with positive sign and less than 2^32 in magnitude such that the mathematical difference of posInt and k is mathematically an integer multiple of 2^32.
5. If int32bit is greater than or equal to 2^31, return int32bit - 2^32, otherwise return int32bit.

1. 入力引数でToNumberを呼び出した結果をnumberとします。
2. もしnumberがNaN, +0, -0, +∞, -∞のいずれかならば、numberを返します。
3. sign(number) * floor(abs(number))の結果をposIntとします。
4. posIntの2^32での剰余をint32bitとします。数学的にはpoIntとの差が2^32の整数倍となるような正の正数かつ2^32未満の値となります。
5. もしint32bitが2^31より大きいか等しいならば、int32bit - 2^32を返します。そうでなければint32bitを返します。


NOTE Given the above definition of ToInt32: 

注意：上記のToInt32の定義において...


- The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.
- ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that +∞ and -∞ are mapped to +0.) 
- ToInt32 maps -0 to +0.

- 抽象操作ToInt32には冪等性があります。ToInt32を適用した結果に対してもう一度ToInt32を適用しても二度目の適用で値は変更されずそのままとなります。
- すべての値xにおいてにToInt32(ToUint32(x))とToInt32(x)は等しくなります。(これは+∞と-∞が+0にマッピングされる特性によります。）
- ToInt32は-0を+0にマッピングします。


* 9.6 ToUint32: (Unsigned 32 Bit Integer)

* 9.6 ToUint32: (符号無し32ビット整数)


The abstract operation ToUint32 converts its argument to one of 2^32 integer values in the range 0 through 2^32-1, inclusive. This abstraction operation functions as follows: 

抽象操作ToUint32は引数を0から2^32-1までの範囲における2^32個の値のいずれかに変換します。この抽象操作は以下のとおり機能します。


1. Let number be the result of calling ToNumber on the input argument.
2. If number is NaN, +0, -0, +∞, or -∞, return +0.
3. Let posInt be sign(number) * floor(abs(number)).
4. Let int32bit be posInt modulo 2^32; that is, a finite integer value k of Number type with positive sign and less than 2^32 in magnitude such that the mathematical difference of posInt and k is mathematically an integer multiple of 2^32.
5. Return int32bit.

1. 入力引数でToNumberを呼び出した結果をnumberとします。
2. もしnumberがNaN, +0, -0, +∞, -∞のいずれかならば、numberを返します。
3. sign(number) * floor(abs(number))の結果をposIntとします。
4. posIntの2^32での剰余をint32bitとします。数学的にはpoIntとの差が2^32の整数倍となるような正の整数かつ2^32未満の値となります。
5. int32bitを返します。


NOTE Given the above definition of ToUInt32: 

注意：上記のToUint32の定義において...


- Step 5 is the only difference between ToUint32 and ToInt32.
- The ToUint32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.
- ToUint32(ToInt32(x)) is equal to ToUint32(x) for all values of x. (It is to preserve this latter property that +∞ and -∞ are mapped to +0.) 
- ToUint32 maps -0 to +0.

- ToUint32とToInt32の違いはステップ5だけです。
- 抽象操作ToUint32には冪等性があります。ToUint32を適用した結果に対してもう一度ToUint32を適用しても二度目の適用で値は変更されずそのままとなります。
- すべての値xにおいてToUint32(ToInt32(x))とToUint32(x)は等しくなります。(これは+∞と-∞が+0にマッピングされる特性によります。）
- ToUint32は-0を+0にマッピングします。


* 9.7 ToUint16: (Unsigned 16 Bit Integer) 

* 9.7 ToUint16: (符号無し16ビット整数)


The abstract operation ToUint16 converts its argument to one of 2^16 integer values in the range 0 through 2^16-1, inclusive. This abstract operation functions as follows: 

抽象操作ToUint16は引数を0から2^16-1までの範囲における2^16個の値のいずれかに変換します。この抽象操作は以下のとおり機能します。


1. Let number be the result of calling ToNumber on the input argument.
2. If number is NaN, +0, -0, +∞, or -∞, return +0.
3. Let posInt be sign(number) * floor(abs(number)).
4. Let int16bit be posInt modulo 2^16; that is, a finite integer value k of Number type with positive sign and less than 2^16 in magnitude such that the mathematical difference of posInt and k is mathematically an integer multiple of 2^16.
5. Return int16bit.

1. 入力引数でToNumberを呼び出した結果をnumberとします。
2. もしnumberがNaN, +0, -0, +∞, -∞のいずれかならば、numberを返します。
3. sign(number) * floor(abs(number))の結果をposIntとします。
4. posIntの2^16での剰余をint16bitとします。数学的にはpoIntとの差が2^16の整数倍となるような正の整数かつ2^16未満の値となります。
5. int16bitを返します。


NOTE Given the above definition of ToUint16: 

注意：上記のToUint16の定義において...


- The substitution of 2^16 for 2^32 in step 4 is the only difference between ToUint32 and ToUint16.
- ToUint16 maps -0 to +0.

- ステップ4の2^16と2^32の置き換えだけがToUint32とToUint16の差違になります。
- ToUint16は-0を+0にマッピングします。


* 9.8 ToString 


The abstract operation ToString converts its argument to a value of type String according to Table 13: 

抽象操作ToStringは引数を表13に応じた文字列の型に変換します。


Table 13 - ToString Conversions 
=============== ================================================================
Argument        Type Result 
=============== ================================================================
Undefined       "undefined" 
Null            "null" 
Boolean         If the argument is true, then the result is "true".
                If the argument is false, then the result is "false".
Number          See 9.8.1.
String          Return the input argument (no conversion) 
Object          Apply the following steps: 
1. Let primValue be ToPrimitive(input argument, hint String).
2. Return ToString(primValue).
=============== ================================================================

表 13 - ToStringによる変換
=============== ================================================================
引数            結果の型
=============== ================================================================
Undefined       "undefined" 
Null            "null" 
Boolean         もし引数がtrueであれば結果は"true"です。
                もし引数がfalseであれば結果は"false"です。
Number          9.8.1.参照
String          引数を返します(変換せず)。
Object          以下の手続きを踏みます。
1. ToPrimitive(input argument, hint String)の結果をprimValueとします。
2. ToString(primValue)を返します。
=============== ================================================================


* 9.8.1 ToString Applied to the Number Type 


The abstract operation ToString converts a Number m to String format as follows: 

抽象操作ToStringは数値mを以下の文字列形式に変換します。


1. If m is NaN, return the String "NaN".
2. If m is +0 or -0, return the String "0".
3. If m is less than zero, return the String concatenation of the String "-" and ToString(-m).
4. If m is infinity, return the String "Infinity".
5. Otherwise, let n, k, and s be integers such that k >= 1, 10^(k-1) <= s < 10^k, the Number value for s * 10^(n-k) is m, and k is as small as possible. Note that k is the number of digits in the decimal representation of s, that s is not divisible by 10, and that the least significant digit of s is not necessarily uniquely determined by these criteria.
6. If k <= n <= 21, return the String consisting of the k digits of the decimal representation of s (in order, with no leading zeroes), followed by n - k occurrences of the character ‘0’.
7. If 0 < n <= 21, return the String consisting of the most significant n digits of the decimal representation of s, followed by a decimal point ‘.’, followed by the remaining k - n digits of the decimal representation of s.
8. If -6 < n <= 0, return the String consisting of the character ‘0’, followed by a decimal point ‘.’, followed by -n occurrences of the character ‘0’, followed by the k digits of the decimal representation of s.
9. Otherwise, if k = 1, return the String consisting of the single digit of s, followed by lowercase character ‘e’, followed by a plus sign ‘+’ or minus sign ‘.’ according to whether n - 1 is positive or negative, followed by the decimal representation of the integer abs(n - 1) (with no leading zeros).
10. Return the String consisting of the most significant digit of the decimal representation of s, followed by a decimal point ‘.’, followed by the remaining k - 1 digits of the decimal representation of s, followed by the lowercase character ‘e’, followed by a plus sign ‘+’ or minus sign ‘.’ according to whether n - 1 is positive or negative, followed by the decimal representation of the integer abs(n - 1) (with no leading zeros).

1. もしmがNaNならば、文字列"NaN"を返します。
2. もしmが+0もしくは-0ならば、文字列"0"を返します。
3. もしmが0より小さければ、文字列"-"とToString(-m)を結合した文字列を返します。
4. もしmが∞であれば、文字列"Infinity"を返します。
5. そうでなければ、1 <= k かつ 10^(k-1) <= s < 10^k を満たし、s * 10^(n-k)の値がmとなり、kはできる限り小さい値となるようなものを整数値n, k, sとします。ここで注意するのは、kはsの10進表現の数字となるがsは10で割り切れなく場合があり、 sのもっとも小さい桁の数字が必ず一意に定まるものではありません。
6. もし k <= n <= 21 ならば、(0を頭に付けない)sの10進表現のk個の数字と、それに続くn-k 個の文字'0'からなる文字列を返します。
7. もし 0 < n <= 21 ならば、sの10進表現の先頭n個の数字と、それに続く小数点'.'と、sの10進表現の残りのk-n個の数字からなる文字列を返します。
8. もし -6 < n <= 0 ならば、'0'と、それに続く小数点'.'と、-n個の'0'と、sの10進表現のk個の数字からなる文字列を返します。
9. そうでない場合、もし k = 1 ならば、sの単体の数字と、それに続く小文字の'e'とn-1の正負によって正の符号'+'もしくは負の符号'-'と、(0を頭に付けない)整数値abs(n-1)の10進表現からなる文字列を返します。
10. 以上に該当しなければ、sの10進表現の数字と、それに続く小数点'.'と、sの10進表現の残りのk-1個の数字と、それに続く小文字の'e'と、n-1の正負によって正の符号'+'もしくは負の符号'-'と、(0を頭に付けない)整数値abs(n-1)の10進表現からなる文字列を返します。


NOTE 1 The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard: 

以下の調査は実装のガイドラインとして役に立つかもしれません。ただしこれらはこの標準仕様で規定された要求事項ではありません。


- If x is any Number value other than -0, then ToNumber(ToString(x)) is exactly the same Number value as x.
- The least significant digit of s is not always uniquely determined by the requirements listed in step 5.

- もしxが-0以外の値の場合、ToNumber(ToString(x))はxに完全に一致します。
- sのもっとも小さい桁の数字はいつでも要求事項のステップ5によって一意に定まるものではありません。


NOTE 2 For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 5 be used as a guideline: 

上記のルールに求められるよりも正確な変換を求める実装にとっては、ガイドラインとして使える5ステップからなる以下の別バージョンをお勧めします。


Otherwise, let n, k, and s be integers such that k >= 1, 10^(k-1) <= s < 10^k, the Number value for s * 10^(n-k) is m, and k is as small as possible. If there are multiple possibilities for s, choose the value of s for which s * 10^(n-k) is closest in value to m. If there are two such possible values of s, choose the one that is even. Note that k is the number of digits in the decimal representation of s and that s is not divisible by 10.

そうでなければ、1 <= k, 10^(k-1) <= s < 10^k, s * 10^(n-k)の値がmとなり、kはできる限り小さい値となるような整数値n, k, sとします。もしsが複数の値を取りえるのであれば、s * 10^(n-k)がmに最も近い値となるようにsの値を選択します。それらを満たすsの値が二つあるのであれば偶数のものを選択します。kはsの10進表現の数字であり、sは10では割り切れないことに注意してください。


NOTE 3 Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers: 

ECMAScriptの実装においてDavid M. Gayによって記述された浮動小数のバイナリから10進への変換のための資料とコードが役に立つでしょう。

Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as 
http://cm.bell-labs.com/cm/cs/doc/90/4-10.ps.gz. Associated code available as 
http://cm.bell-labs.com/netlib/fp/dtoa.c.gz and as 
http://cm.bell-labs.com/netlib/fp/g_fmt.c.gz and may also be found at the various netlib mirror sites.


* 9.9 ToObject 


The abstract operation ToObject converts its argument to a value of type Object according to Table 14: 

抽象操作ToObjectは表14に従って引数をObjectの型の値へ変換します。


Table 14 - ToObject 
=============== ================================================================
Argument Type   Result 
=============== ================================================================
Undefined       Throw a TypeError exception.
Null            Throw a TypeError exception.
Boolean         Create a new Boolean object whose [[PrimitiveValue]] internal property is set to the value of the argument. See 15.6 for a description of Boolean objects.
Number          Create a new Number object whose [[PrimitiveValue]] internal property is set to the value of the argument. See 15.7 for a description of Number objects.
String          Create a new String object whose [[PrimitiveValue]] internal property is set to the value of the argument. See 15.5 for a description of String objects.
Object          The result is the input argument (no conversion).
=============== ================================================================

表14 - ToObject 
=============== ================================================================
引数の型        結果
=============== ================================================================
Undefined       TypeError例外を生じさせます。
Null            TypeError例外を生じさせます。
Boolean         [[PrimitiveValue]]内部プロパティを引数の値に設定した新しいBooleanオブジェクトを生成します。Booleanオブジェクトについては15.6参照のこと。
Number          [[PrimitiveValue]]内部プロパティを引数の値に設定した新しいNumberオブジェクトを生成します。Numberオブジェクトについては15.7参照のこと。
String          [[PrimitiveValue]]内部プロパティが引数の値に設定した新しいStringオブジェクトを生成します。Stringオブジェクトについては15.5参照のこと。
Object          入力引数を返します。(変換せず)
=============== ================================================================


* 9.10 CheckObjectCoercible 


The abstract operation CheckObjectCoercible throws an error if its argument is a value that cannot be converted to an Object using ToObject. It is defined by Table 15: 

抽象操作CheckObjectCoercibleは、引数がToObjectを使ってObjectに変換できない値の場合にエラーを返します。これは表15によって定義されます。


Table 15 - CheckObjectCoercible Results 
=============== ================================================================
Argument Type   Result 
=============== ================================================================
Undefined       Throw a TypeError exception.
Null            Throw a TypeError exception.
Boolean         Return 
Number          Return 
String          Return 
Object          Return 
=============== ================================================================

表15 - CheckObjectCoercibleの結果
=============== ================================================================
引数の型        結果
=============== ================================================================
Undefined       TypeError例外を生じさせます。
Null            TypeError例外を生じさせます。
Boolean         何もせず戻ります。
Number          何もせず戻ります。
String          何もせず戻ります。
Object          何もせず戻ります。
=============== ================================================================


* 9.11 IsCallable 


The abstract operation IsCallable determines if its argument, which must be an ECMAScript language value, is a callable function Object according to Table 16: 

抽象操作IsCallableは引数が表16のように呼び出し可能な関数オブジェクトであるかどうかによって動作が変わります。


Table 16 - IsCallable Results 
=============== ================================================================
Argument Type   Result 
=============== ================================================================
Undefined       Return false.
Null            Return false.
Boolean         Return false.
Number          Return false.
String          Return false.
Object          If the argument object has an [[Call]] internal method, then return true, otherwise return false.
=============== ================================================================

表16 - IsCallableの結果
=============== ================================================================
引数の型        結果
=============== ================================================================
Undefined       falseを返します。
Null            falseを返します。
Boolean         falseを返します。
Number          falseを返します。
String          falseを返します。
Object          もし引数のオブジェクトが[[Call]]内部メソッドを持っているのであればtrueを返します。そうでなければfalseを返します。
=============== ================================================================


* 9.12 The SameValue Algorithm 


The internal comparison abstract operation SameValue(x, y), where x and y are ECMAScript language values, produces true or false. Such a comparison is performed as follows: 

内部の比較用の抽象操作SameValue(x, y)は以下に従ってtrueもしくはfalseを生成します。


1. If Type(x) is different from Type(y), return false.
2. If Type(x) is Undefined, return true.
3. If Type(x) is Null, return true.
4. If Type(x) is Number, then.
  a. If x is NaN and y is NaN, return true.
  b. If x is +0 and y is -0, return false.
  c. If x is -0 and y is +0, return false.
  d. If x is the same Number value as y, return true.
  e. Return false.
5. If Type(x) is String, then return true if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return false.
6. If Type(x) is Boolean, return true if x and y are both true or both false; otherwise, return false.
7. Return true if x and y refer to the same object. Otherwise, return false.

1. もしType(x)がType(y)と異なるのであればfalseを返します。
2. もしType(x)がUndefinedであればtrueを返します。
3. もしType(x)がNullであればtrueを返します。
4. もしType(x)がNumberであれば...
  a. もしxがNaNかつyがNaNでればtrueを返します。
  b. もしxが+0かつyが-0であればfalseを返します。
  c. もしxが-0かつyが+0であればfalseを返します。
  d. もしxがyと数値として同じ数値であればtrueを返します。
  e. そうでなければfalseを返します。
5. もしType(x)がStringの場合、xとyが正確に同じ文字の並び(同じ長さかつ対応する位置に同じ文字)のならばtrueを返します。そうでなければfalseを返します。
6. もしType(x)がBooleanの場合、xとyが両方ともtrueもしくはfalseの場合にtrueを返します。そうでなければfalseを返します。
7. そうでなければxとyが同じオブジェクトを参照しているならばtrueを返します。そうでなければfalseを返します。
