* Annex D (informative) 

* 補足 D (参考情報)


* Corrections and Clarifications in the 5th Edition with Possible 3rd Edition
  Compatibility Impact 

* 第3版との互換性に影響を与える第5版における修正と明示


Throughout: In the Edition 3 specification the meaning of phrases such as “as if
by the expression new Array()” are subject to misinterpretation. In the Edition
5 specification text for all internal references and invocations of standard
built-in objects and methods has been clarified by making it explicit that the
intent is that the actual built-in object is to be used rather than the current
dynamic value of the correspondingly named property. 

全体：第3版の仕様において、"as if by the expression new Array()"という語句の意味
は誤解される内容でした。第5版の仕様では、標準組み込みオブジェクトや標準組み込み
メソッドのすべての内部参照や内部呼び出しのテキストは、対応する名前付きプロパティ
の動的な値ではなく、実際の組み込みオブジェクトが使われるという意図を明示すること
によってはっきりされました。


11.8.2, 11.8.3, 11.8.5: ECMAScript generally uses a left to right evaluation
order, however the Edition 3 specification language for the > and <= operators
resulted in a partial right to left order. The specification has been corrected
for these operators such that it now specifies a full left to right evaluation
order. However, this change of order is potentially observable if side-effects
occur during the evaluation process. 

11.8.2, 11.8.3, 11.8.5：ECMAScriptでは通常は左から右に向かって評価しますが、第3
版の仕様における>演算子や<=演算子では、部分的に右から左に向かって評価していまし
た。これらの演算子のために完全に左から右に向かって評価するように仕様が訂正されま
した。なお、この評価順序の変化は、評価処理において副作用を伴う場合にだけ潜在的に
観測されるようなものです。


11.1.4: Edition 5 clarifies the fact that a trailing comma at the end of an
ArrayInitialiser does not add to the length of the array. This is not a semantic
change from Edition 3 but some implementations may have previously
misinterpreted this. 

11.1.4：第5版では、ArrayInitialiserの後ろのカンマが配列の長さを増やさないという
ことをはっきりさせました。これは第3版からの意味的な変更ではありませんが、以前は
これを間違って解釈していた実装があるかもしれません。


11.2.3: Edition 5 reverses the order of steps 2 and 3 of the algorithm. The
original order as specified in Editions 1 through 3 was incorrectly specified
such that side-effects of evaluating Arguments could affect the result of
evaluating MemberExpression. 

11.2.3：第5版ではアルゴリズムのステップ２やステップ３の順番を予約しています。第1
版から第3版で指定されていた元々の順番は、引数の評価の副作用がMemberExpressionの
評価の結果に影響を与えられるという点で、間違っていました。


12.4: In Edition 3, an object is created, as if by new Object() to serve as the
scope for resolving the name of the exception parameter passed to a catch clause
of a try statement. If the actual exception object is a function and it is
called from within the catch clause, the scope object will be passed as the this
value of the call. The body of the function can then define new properties on
its this value and those property names become visible identifiers bindings
within the scope of the catch clause after the function returns. In Edition 5,
when an exception parameter is called as a function, undefined is passed as the
this value. 

12.4：第3版において、tryステートメントのcatch節へ渡される例外パラメタの名前を解
決するためのスコープとして使用するために、new Object()によって作られたかのように
してオブジェクトが作られています。もし、実際の例外オブジェクトが関数であり、それ
がcatch節で呼び出されると、callのthis値としてスコープオブジェクトが渡されるで
しょう。関数のボディ部はそのthis値で新しいプロパティを定義し、それらのプロパティ
の名前は関数が終わった後のcatch節のスコープにおいて見える識別子にバインディング
されます。第5版では、例外パラメタが関数として呼び出される際には、this値として
undefinedが渡されるようになりました。


13: In Edition 3, the algorithm for the production FunctionExpression with an
Identifier adds an object created as if by new Object() to the scope chain to
serve as a scope for looking up the name of the function. The identifier
resolution rules (10.1.4 in Edition 3) when applied to such an object will, if
necessary, follow the object’s prototype chain when attempting to resolve an
identifier. This means all the properties of Object.prototype are visible as
identifiers within that scope. In practice most implementations of Edition 3
have not implemented this semantics. Edition 5 changes the specified semantics
by using a Declarative Environment Record to bind the name of the function. 

13：第3版において、生成規則FunctionExpressionのIdentifierのアルゴリズムでは、ス
コープチェーンに対してnew Object()によって作られたかようにしてオブジェクトを追加
しています。これは関数の名前を探すためのスコープとして使用するためです。そういっ
たオブジェクトに適用された識別子の解決ルール(第3版 10.1.4)は、必要であれば、識別
子の解決が試みられた際にオブジェクトのプロトタイプチェーンに従います。これは
Object.prototypeのすべてのプロパティがスコープの識別子として見えていることを意味
します。実際、第3版のほとんどの実装ではこれは実装されていません。第5版では、関数
の名前をバインドするためにDeclarative Environment Recordを使うことでそのことを変
更しています。


14: In Edition 3, the algorithm for the production SourceElements :
SourceElements SourceElement did not correctly propagate statement result values
in the same manner as Block. This could result in the eval function producing an
incorrect result when evaluating a Program text. In practice most
implementations of Edition 3 have implemented the correct propagation rather
than what was specified in Edition 3. 

14：第3版において、生成規則 SourceElements : SourceElements SourceElement のアル
ゴリズムは文の結果の値を、ブロックと同じようなやり方に則らずに、間違った伝え方を
していました。これはProgramのテキストを評価する際に、eval関数において結果として
間違った結果が生成されることになります。実際に第3版のほとんどの実装では、第3版で
示されていたよりも正しい実装がされていました。


15.10.6: RegExp.prototype is now a RegExp object rather than an instance of
Object. The value of its [[Class]] internal property which is observable using
Object.prototype.toString is now “RegExp” rather than “Object”.

15.10.6：RegExp.prototypeは、Objectのインスタンスというよりも今ではRegexpオブ
ジェクトとなっています。Object.prototype.toStringで確認できる[[Class]]内部プロパ
ティの値は、"Object"ではなく"RegExp"です。
 

